{% extends "core/base.jinja" %}

{%- block additional_css -%}
  <link rel="stylesheet" href="{{ scss('sas/album.scss') }}">
{%- endblock -%}

{% block additional_js %}
  <script defer type="module">
    import { showSaveFilePicker } from "{{ static('core/js/native-file-system-adapter/mod.js') }}";
    window.showSaveFilePicker = showSaveFilePicker; /* Export function to normal javascript */
  </script>
  <script defer type="text/javascript" src="{{ static('core/js/zipjs/zip-fs-full.min.js') }}"></script>
{% endblock %}

{% block title %}
  {% trans user_name=profile.get_display_name() %}{{ user_name }}'s pictures{% endtrans %}
{% endblock %}

{% block content %}
  <main>
    {% if can_edit(profile, user) %}
      <button disabled id="download" onclick="download('{{ url('api:pictures') }}?users_identified={{ object.id }}')">{% trans %}Download all my pictures{% endtrans %}</button>
      <progress id="download_progress" max="100" hidden></progress>
    {% endif %}
    {% for album, pictures in albums|items %}
      <h4>{{ album }}</h4>
      <div class="photos">
        {% for picture in pictures %}
          {% if picture.can_be_viewed_by(user) %}
            <a href="{{ url("sas:picture", picture_id=picture.id) }}#pict">
              <div
                class="photo{% if not picture.is_moderated %} not_moderated{% endif %}"
                style="background-image: url('{% if picture.file %}{{ picture.get_download_thumb_url() }}{% else %}{{ static('core/img/sas.jpg') }}{% endif %}');"
              >
                {% if not picture.is_moderated %}
                  <div class="overlay">&nbsp;</div>
                  <div class="text">{% trans %}To be moderated{% endtrans %}</div>
                {% else %}
                  <div class="text">&nbsp;</div>
                {% endif %}
              </div>
            </a>
          {% else %}
            <div>
              <div class="photo">
                <div class="text">{% trans %}Picture Unavailable{% endtrans %}</div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      <br>
    {% endfor %}
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        document.getElementById("download").disabled = false;
      });
      async function download(url) {

        let pictures = await (await fetch(url)).json();

        let progressBar = document.getElementById("download_progress");
        let button = document.getElementById("download");
        let picturesDownloaded = 0;

        button.disabled = true;
        progressBar.value = picturesDownloaded;
        progressBar.hidden = false;

        let fileHandle = await window.showSaveFilePicker({
          _preferPolyfill: false,
          suggestedName: "{%- trans -%} pictures {%- endtrans -%}.zip",
          types: {},
          excludeAcceptAllOption: false,
        })
        let writeStream = await fileHandle.createWritable();

        let zipWriter = new zip.ZipWriter(writeStream);

        async function progress() {
          progressBar.value = picturesDownloaded++ * 100 / (pictures.length - 1);
        }

        await Promise.all(pictures.map(picture =>
          zipWriter.add(
            "IMG_" + picture.date.replaceAll(":", "_").replaceAll("-", "_") + picture.name.slice(picture.name.lastIndexOf(".")),
            new zip.HttpReader(picture.full_size_url),
            { level: 9, lastModDate: new Date(picture.date), onstart: progress }
          )
        )
        )

        await zipWriter.close();

        button.disabled = false;
        progressBar.hidden = true;
      }
    </script>
  </main>
{% endblock %}
