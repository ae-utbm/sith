{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation du site de l'association des \u00e9tudiants de l'UTBM","text":"<p>Bonjour, camarade.</p> <p>Si tu es ici, c'est sans doute pour mieux connaitre le fonctionnement interne du site AE. Peut-\u00eatre m\u00eame as-tu envie de contribuer \u00e0 son d\u00e9veloppement. Si tel est le cas, nous ne pouvons faire autrement que te souhaiter la bienvenue sur cette documentation et esp\u00e9rer que ce que nous avons \u00e9crit est assez clair et assez complet pour satisfaire ton esprit en qu\u00eate de connaissances.</p> <p>Et si tu viens pour d'autres motifs, \u00e7a ne change rien, soit le bienvenu (ou la bienvenue) quand m\u00eame.</p> <p>Pour que tu saches o\u00f9 chercher quelles informations, voici comment nous avons d\u00e9coup\u00e9 la documentation :</p> <ul> <li>Dans un premier temps, les explications, o\u00f9 nous  discutons tout simplement de ce \u00e0 quoi nous pensions en faisant ceci ou cela, quels motifs ont guid\u00e9 tel ou tel choix... Bref, nous discutons du projet en tant qu'ensemble de choix, qu'en tant qu'accumulation de d\u00e9tails techniques. Des d\u00e9tails techniques, tu en trouveras quand m\u00eame, mais sans doute moins que dans les autres parties.</li> <li>Deuxi\u00e8mement, les tutoriels, o\u00f9 nous  expliquons pas \u00e0 pas comment installer le projet et commencer \u00e0 travailler dessus. Vois-le comme une notice d'assemblage.</li> <li>Troisi\u00e8mement, les recettes, ou how-to, o\u00f9 nous pr\u00e9senterons des conseils, des proc\u00e9dures \u00e0 suivre et des patterns qui t'aideront peut-\u00eatre.</li> <li>Enfin, la r\u00e9f\u00e9rence, o\u00f9 sera donn\u00e9e en dur les d\u00e9tails techniques les plus intimes du projet, tir\u00e9s directement du code, qui ne seront sans doute pas d'une grande utilit\u00e9 pour comprendre le projet dans sa globalit\u00e9, mais qui seront bien plus utiles pour appr\u00e9hender l'impl\u00e9mentation de telle ou telle partie du code.</li> </ul>"},{"location":"explanation/","title":"Accueil","text":""},{"location":"explanation/#objectifs","title":"Objectifs","text":"<p>Le but de ce projet est de fournir \u00e0  l'Association des \u00c9tudiants de l'UTBM  une plate-forme pratique et centralis\u00e9e de ses services. Le Sith de l'AE tient \u00e0 jour le registre des cotisations \u00e0 l'association, prend en charge la tr\u00e9sorerie,  les ventes de produits et services,  la diffusion d\u2019\u00e9v\u00e9nements,  la gestion de la laverie et bien plus encore. </p> <p>C'est un projet b\u00e9n\u00e9vole qui tire ses origines des ann\u00e9es 2000. Il s'agit de la troisi\u00e8me version du site de l'AE. Son d\u00e9veloppement a commenc\u00e9 en 2015. C'est une r\u00e9\u00e9criture compl\u00e8te en rupture totale des deux versions qui l'ont pr\u00e9c\u00e9d\u00e9e.</p>"},{"location":"explanation/#pourquoi-reecrire-le-site","title":"Pourquoi r\u00e9\u00e9crire le site","text":"<p>L'ancienne version du site, sobrement baptis\u00e9e ae2, pr\u00e9sentait un nombre impressionnant de fonctionnalit\u00e9s.  Il avait \u00e9t\u00e9 \u00e9crit en PHP et se basait  sur son propre framework maison.</p> <p>Malheureusement, son entretien \u00e9tait plus ou moins hasardeux et son framework reposait  sur des principes assez diff\u00e9rents de ce qui se fait  aujourd'hui, rendant la maintenance difficile.  De plus, la version de PHP qu'il utilisait  \u00e9tait plus que d\u00e9pr\u00e9ci\u00e9e et \u00e0 l'heure de l'arriv\u00e9e de PHP 7 et de sa non-r\u00e9trocompatibilit\u00e9 il \u00e9tait vital de faire quelque chose.  Il a donc \u00e9t\u00e9 d\u00e9cid\u00e9 de le r\u00e9\u00e9crire.</p>"},{"location":"explanation/#la-philosophie-initiale","title":"La philosophie initiale","text":"<p>Pour \u00e9viter les erreurs du pass\u00e9,  ce projet met l'accent sur la maintenabilit\u00e9. Le choix des technologies ne s'est donc pas  fait uniquement sur le fait qu'elle soit r\u00e9centes, mais \u00e9galement sur leur robustesse, leur fiabilit\u00e9 et leur potentiel \u00e0 \u00eatre maintenu  loin dans le futur.</p> <p>La maintenabilit\u00e9 passe \u00e9galement par le  choix minutieux des d\u00e9pendances qui doivent, elles aussi, passer l'\u00e9preuve du temps pour \u00e9viter qu'elles ne mettent le projet en danger.</p> <p>Cela passe \u00e9galement par la minimisation des frameworks employ\u00e9s de mani\u00e8re \u00e0 r\u00e9duire un maximum les connaissances n\u00e9cessaires pour contribuer  au projet et donc simplifier la prise en main. La simplicit\u00e9 est \u00e0 privil\u00e9gier si elle est possible.</p> <p>Le projet doit \u00eatre simple \u00e0 installer et \u00e0 d\u00e9ployer.</p> <p>Le projet \u00e9tant \u00e0 destination d'\u00e9tudiants, il est pr\u00e9f\u00e9rable de minimiser les ressources  utilis\u00e9es par l'utilisateur final.  Il faut qu'il soit au maximum \u00e9conome en bande passante et calcul c\u00f4t\u00e9 client.</p> <p>Le projet est un logiciel libre et est sous licence GPL. Aucune d\u00e9pendance propri\u00e9taire n'est accept\u00e9e.</p>"},{"location":"explanation/#la-philosophie-10-ans-plus-tard","title":"La philosophie, 10 ans plus tard","text":"<p>Malgr\u00e9 la bonne volont\u00e9 et le travail colossal fourni par les developpeurs de la version actuelle du projet, force est de constater que nombre d'erreurs ont malheureusement \u00e9t\u00e9 commises : usage complexe et excessif de certains m\u00e9canismes OO, r\u00e9\u00e9criture maison de fonctionnalit\u00e9s de Django, syst\u00e8me de gestion des permissions rigide et co\u00fbteux en requ\u00eate \u00e0 la base de donn\u00e9es...</p> <p>Mais malgr\u00e9 tout \u00e7a, le site tourne. En effet, force est de constater que le pari initial de choisir un framework stable et durable a pay\u00e9. Aujourd'hui encore, Django est activement maintenu, ses mises \u00e0 jour sont r\u00e9guli\u00e8res sans pour autant n\u00e9cessiter beaucoup de changements lors des changements de version majeure.</p> <p>Quant aux erreurs qui ont \u00e9t\u00e9 commises, que celui qui n'a jamais reconsid\u00e9r\u00e9 a posteriori que ce qui lui semblait une bonne architecture \u00e9tait en fait un ensemble brinquebalant, leur jette la premi\u00e8re pierre.</p> <p>La solidit\u00e9 des fondations ayant \u00e9t\u00e9 prouv\u00e9e par l'\u00e9preuve du temps, le travail restant \u00e0 accomplir n'est pas de r\u00e9\u00e9crire encore une fois le site en utilisant encore d'autres technologies, mais plut\u00f4t de raboter les surcouches du site, pour refixer le plus solidement possiblement le projet sur ces fondations.</p>"},{"location":"explanation/archives/","title":"Archives","text":"<p>Page g\u00e9n\u00e9r\u00e9e</p> <p>Cette page est g\u00e9n\u00e9r\u00e9e \u00e0 partir du wiki GitHub du projet puisqu'elle h\u00e9berge du contenu binaire lourd qui encombrerait le repo git. La page originale ici peut \u00eatre plus \u00e0 jour puisque le contenu de cette page date de la derni\u00e8re g\u00e9n\u00e9ration de la documentation.</p> <p>Cette page contient certains des pdf qui ont pu \u00eatre produits dans le cadre du travail pass\u00e9 sur le site. Vous ne trouverez pas des informations compl\u00e8tes et \u00e0 jour. En revanche, vous trouverez des morceaux d'histoire qui vous permettront de mieux comprendre ceux \u00e0 quoi pensaient les anciens d\u00e9veloppeurs et, par extension, vous comprendrez peut-\u00eatre un peu mieux le site.</p>"},{"location":"explanation/archives/#comptes-rendus","title":"Comptes-rendus","text":"<ul> <li>CR 2016.01.05</li> <li>CR 2016.11.10</li> <li>CR 2016.11.16</li> <li>CR 2016.12.1</li> <li>CR 2016.12.8</li> <li>CR 2016.12.15</li> </ul>"},{"location":"explanation/archives/#rapports-de-twtopa","title":"Rapports de TW/TO/PA","text":""},{"location":"explanation/archives/#skia","title":"Skia","text":"<p>Rapport Skia</p>"},{"location":"explanation/archives/#skia-et-loj","title":"Skia et LoJ","text":"<p>Rapport Skia+LoJ</p>"},{"location":"explanation/archives/#sli","title":"Sli","text":"<ul> <li>Rapport TO52 Sli</li> <li>Rapport PA00</li> <li>Cahier des charges PA00</li> </ul>"},{"location":"explanation/archives/#marechal","title":"Mar\u00e9chal","text":"<ul> <li>Rapport de PA00</li> </ul>"},{"location":"explanation/conventions/","title":"Conventions","text":"<p>Cette page traite des conventions utilis\u00e9es dans le d\u00e9veloppement du site.</p>"},{"location":"explanation/conventions/#langue","title":"Langue","text":"<p>Les noms, de fonctions, de classe, de fichiers et de dossiers sont en anglais. De m\u00eame, les commentaires et les docstrings sont r\u00e9dig\u00e9s en anglais.</p> <p>En revanche la documentation est r\u00e9dig\u00e9e en fran\u00e7ais. En effet, les d\u00e9veloppeurs et les d\u00e9veloppeuses qui ont \u00e9t\u00e9, sont et seront amen\u00e9s \u00e0 travailler sur le site sont presque tous des francophones. Or, la bonne compr\u00e9hension prime. Une documentation, qui se doit d'utiliser au mieux les mots justes, compris de mani\u00e8re juste, gagne \u00e0 \u00eatre \u00e9crite en langue vernaculaire, lorsqu'on est assur\u00e9 qu'une coop\u00e9ration internationale est peu probable.</p> <p>De la sorte, on s'assure au mieux que les r\u00e9dacteurs et r\u00e9dactrices s'expriment bien et que, r\u00e9ciproquement, les lecteurs et lectrices comprennent au mieux.</p> <p>A ce titre, on ne vous en voudra pas si vous r\u00e9digez des commentaires ou des docstrings en fran\u00e7ais.</p> <p>En revanche, le code en lui-m\u00eame doit rester imp\u00e9rativement en anglais ; les instructions \u00e9tant en langue anglaise, introduire des mots fran\u00e7ais au milieu cr\u00e9e un contraste qui nuit \u00e0 la compr\u00e9hension.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, demandez-vous juste \u00e0 qui vous \u00eates en train d'\u00e9crire :</p> <ul> <li>si vous \u00e9crivez pour la machine, c'est en anglais</li> <li>si vous \u00e9crivez pour des \u00eatres humains, c'est en fran\u00e7ais</li> </ul>"},{"location":"explanation/conventions/#gestion-de-version","title":"Gestion de version","text":"<p>Le projet utilise Git pour g\u00e9rer les versions et  GitHub pour h\u00e9berger le d\u00e9p\u00f4t distant.</p> <p>L'arbre poss\u00e8de deux branches prot\u00e9g\u00e9es : <code>master</code> et <code>taiste</code>.</p> <p><code>master</code> est la branche contenant le code tel qu'il tourne effectivement sur le vrai site de l'AE. Celle-ci doit, autant que faire se peut, rester impeccable.</p> <p><code>taiste</code> est la branche de r\u00e9f\u00e9rence pour le d\u00e9veloppement. Cette derni\u00e8re est r\u00e9guli\u00e8rement d\u00e9ploy\u00e9e sur le site de test. Elle permet de s'assurer que les diverses modifications fonctionnent bien entre elles et fonctionnent bien sur le serveur, avant d'\u00eatre envoy\u00e9es sur master.</p>"},{"location":"explanation/conventions/#gestion-des-branches","title":"Gestion des branches","text":"<p>Toutes les modifications appliqu\u00e9es sur <code>taiste</code> doivent se faire via des Pull Requests depuis les diff\u00e9rentes branches de d\u00e9veloppement. Toutes les modifications appliqu\u00e9es sur <code>master</code> doivent se faire via des Pull Requests depuis <code>taiste</code>, ou bien depuis une branche de hotfix, dans le cas o\u00f9 il faut r\u00e9parer un bug urgent apparu de mani\u00e8re impromptue.</p> <p>Aucun <code>push</code> direct n'est admis, ni sur l'une, ni sur l'autre branche.</p> <p>En obligeant \u00e0 passer par des PR, on s'assure qu'au moins une autre personne aura lu votre code et que les outils de test et de v\u00e9rification de code auront valid\u00e9 vos modifications.</p> <p>Par extension du mode de travail par PR, les branches <code>master</code> et <code>taiste</code> ne peuvent recevoir du code que sous la forme de merge commits.</p> <p>De plus, ces branches doivent recevoir, mais jamais donner (\u00e0 part entre elles). Lorsqu'une modification a \u00e9t\u00e9 effectu\u00e9e sur <code>taiste</code> et que vous souhaitez la r\u00e9cup\u00e9rer dans une de vos branches, vous devez proc\u00e9der par <code>rebase</code>, et non par <code>merge</code>.</p> <p>En d'autres termes, vous devez respecter les deux r\u00e8gles suivantes :</p> <ol> <li>Les branches <code>master</code> et <code>taiste</code> ne doivent contenir que des merge commits</li> <li>Seules les branches <code>master</code> et <code>taiste</code> peuvent contenir des merge commits</li> </ol> Bien \u2714\ufe0fPas bien \u274c <pre><code>gitGraph:\n    commit id: \"initial commit\"\n    branch bar\n    checkout main\n    checkout bar\n    commit id: \"baz\"\n    checkout main\n    merge bar id: \"Merge branch bar\"\n    branch foo\n    commit id: \"foo a\"\n    commit id: \"foo b\"\n    commit id: \"foo c\"\n    checkout main\n    merge foo id: \"Merge branch foo\"</code></pre> <pre><code>gitGraph:\n    commit\n    branch bar\n    branch foo\n    commit id: \"foo a\"\n    commit id: \"foo b\"\n    checkout main\n    checkout bar\n    commit id: \"baz\"\n    checkout main\n    merge bar id: \"Merge branch bar\"\n    checkout foo\n    merge main id: \"Merge branch main\"\n    commit id: \"foo c\"\n    checkout main\n    merge foo id: \"Merge branch foo\"</code></pre>"},{"location":"explanation/conventions/#style-de-code","title":"Style de code","text":""},{"location":"explanation/conventions/#conventions-de-nommage","title":"Conventions de nommage","text":"<p>Les conventions de nommage sont celles de la PEP8 :</p> <ul> <li>les classes sont en PascalCase (ex: <code>class SacredGraal</code>)</li> <li>les constantes sont en MACRO_CASE (ex: <code>FAVOURITE_COLOUR = \"blue\"</code>)</li> <li>les fonctions et les variables sont en snake_case (ex: <code>swallow_origin = \"african\"</code>)</li> <li>les fichiers et dossiers contenant du code sont en snake_case</li> <li>les fichiers et les dossiers contenant de la documentation sont en kebab-case</li> </ul> <p>En parall\u00e8le de la casse, les r\u00e8gles de formatage du code sont celles du formateur Ruff. Ces r\u00e8gles sont automatiquement appliqu\u00e9es quand  vous faites tourner Ruff, donc vous n'avez pas \u00e0 trop vous poser de questions de ce c\u00f4t\u00e9-l\u00e0.</p> <p>En ce qui concerne les templates Jinja et les fichiers SCSS, la norme de formatage est celle par d\u00e9faut de <code>djHTML</code>.</p> <p>Pour Javascript, nous utilisons biome. C'est \u00e0 la fois un formateur et un linter avec tr\u00e8s peu de configuration, un peu comme ruff.</p> <p>Le javascript dans les templates jinja</p> <p>Biome n'est pas capable de lire dans les fichiers jinja, c'est sa principale limitation.</p> <p>Il est donc recommand\u00e9 d'\u00e9viter de mettre trop de Javascript directement dans jinja mais de pr\u00e9f\u00e9rer des fichiers d\u00e9di\u00e9s.</p>"},{"location":"explanation/conventions/#qualite-du-code","title":"Qualit\u00e9 du code","text":"<p>Pour s'assurer de la qualit\u00e9 du code, Ruff et Biome sont \u00e9galement utilis\u00e9s.</p> <p>Tout comme pour le format, Ruff et Biome doivent tourner avant chaque commit.</p> <p>to edit or not to edit</p> <p>Vous constaterez sans doute que <code>ruff format</code> modifie votre code, mais que <code>ruff check</code> vous signale juste une liste d'erreurs sans rien modifier.</p> <p>En effet, <code>ruff format</code> ne s'occupe que de la forme du code, alors que <code>ruff check</code> regarde la logique du code. Si Ruff modifiait automatiquement la logique du code, \u00e7a serait un coup \u00e0 introduire plus de bugs que \u00e7a n'en r\u00e9soud.</p> <p>Il existe cependant certaines cat\u00e9gories d'erreurs que Ruff peut r\u00e9parer de mani\u00e8re s\u00fbre. Pour appliquer ces r\u00e9parations, faites :</p> <pre><code>ruff check --fix\n</code></pre> <p>Biome se comporte d'une mani\u00e8re tr\u00e8s similaire</p> <pre><code>npx @biomejs/biome check # Liste toutes les erreurs et leurs cat\u00e9gories\nnpx @biomejs/biome check --write # Applique tous les fix consid\u00e9r\u00e9s safe et formate le code\n</code></pre>"},{"location":"explanation/conventions/#documentation","title":"Documentation","text":"<p>La documentation est \u00e9crite en markdown, avec les fonctionnalit\u00e9s offertes par MkDocs, MkDocs-material et leurs extensions.</p> <p>La documentation est int\u00e9gralement en fran\u00e7ais, \u00e0 l'exception des exemples, qui suivent les conventions donn\u00e9es plus haut.</p>"},{"location":"explanation/conventions/#decoupage","title":"D\u00e9coupage","text":"<p>La s\u00e9paration entre les diff\u00e9rentes parties de la documentation se fait en suivant la m\u00e9thodologie Diataxis. On compte quatre sections :</p> <ol> <li>Explications : parlez dans cette section de ce qui est bon \u00e0 savoir    sans que \u00e7a touche aux d\u00e9tails pr\u00e9cis de l'impl\u00e9mentation.    Si vous parlez de pourquoi un choix a \u00e9t\u00e9 fait ou que vous montrez    grossi\u00e8rement les contours d'une partie du projet, c'est une explication.</li> <li>Tutoriels : parlez dans cette section d'\u00e9tapes pr\u00e9cises    ou de d\u00e9tails d'impl\u00e9mentation qu'un nouveau d\u00e9veloppeur    doit suivre pour commencer \u00e0 travailler sur le projet.</li> <li>Utilisation : parlez dans cette section de m\u00e9thodes utiles    pour un d\u00e9veloppeur qui a d\u00e9j\u00e0 pris en main le projet.    Voyez cette partie comme un livre de recettes de cuisine.</li> <li>R\u00e9f\u00e9rence : parlez dans cette section des d\u00e9tails d'impl\u00e9mentation du projet.    En r\u00e9alit\u00e9, vous n'aurez pas besoin de beaucoup vous pencher dessus,    puisque cette partie est compos\u00e9e presque uniquement    des docstrings pr\u00e9sents dans le code.</li> </ol> <p>Pour plus de d\u00e9tails, lisez directement la documentation de Diataxis, qui expose ces concepts de mani\u00e8re beaucoup plus compl\u00e8te.</p>"},{"location":"explanation/conventions/#style","title":"Style","text":"<p>Votre markdown doit \u00eatre compos\u00e9 de lignes courtes ; \u00e0 partir de 88 caract\u00e8res, c'est trop long. Si une phrase est trop longue pour tenir sur une ligne, vous pouvez l'\u00e9crire sur plusieurs.</p> <p>Une ligne ne peut pas contenir plus d'une seule phrase. Dit autrement, quand vous finissez une phrase, faites syst\u00e9matiquement un saut de ligne.</p> Bien \u2714\ufe0fPas bien \u274c <pre><code>First shalt thou take out the Holy Pin,\nthen shalt thou count to three, no more, no less.\nThree shalt be the number thou shalt count,\nand the number of the counting shalt be three.\nFour shalt thou not count, neither count thou two,\nexcepting that thou then proceed to three.\nFive is right out.\nOnce the number three, being the third number, be reached,\nthen lobbest thou thy Holy Hand Grenade of Antioch towards thou foe,\nwho being naughty in My sight, shall snuff it.\n</code></pre> <pre><code>First shalt thou take out the Holy Pin, then shalt thou count to three, no more, no less. Three shalt be the number thou shalt count, and the number of the counting shalt be three. Four shalt thou not count, neither count thou two, excepting that thou then proceed to three. Five is right out. Once the number three, being the third number, be reached, then lobbest thou thy Holy Hand Grenade of Antioch towards thou foe, who being naughty in My sight, shall snuff it.\n</code></pre> <p>\u00c0 noter que ces deux exemples donnent le m\u00eame r\u00e9sultat dans la documentation g\u00e9n\u00e9r\u00e9e. Mais la version avec de courtes lignes est beaucoup  plus facile \u00e0 modifier et \u00e0 versioner.</p> <p>Grammaire et orthographe</p> <p>Ca peut paraitre \u00e9vident dit comme \u00e7a, mais c'est toujours bon \u00e0 rappeler : \u00e9vitez de faire des fautes de fran\u00e7ais. Relisez vous quand vous avez fini d'\u00e9crire.</p>"},{"location":"explanation/conventions/#docstrings","title":"Docstrings","text":"<p>Les docstrings sont \u00e9crits en suivant la norme Google et les fonctionnalit\u00e9s de Griffe.</p> <p>Ils doivent \u00eatre explicites sur ce que la fonction accomplit, mais ne pas parler de comment elle le fait. Un bon docstring est celui qui dit exactement ce qu'il faut pour qu'on puisse savoir comment utiliser la fonction ou la classe document\u00e9e sans avoir \u00e0 lire son code.</p> <p>Tout comme les p\u00e9dales d'une voiture : pour pouvoir conduire, vous avez juste besoin de savoir ce qui se passe quand vous appuyez dessus. La connaissance de la m\u00e9canique interne est inutile dans ce cadre.</p> <p>N'h\u00e9sitez pas \u00e0 mettre des examples dans vos docstrings.</p>"},{"location":"explanation/conventions/#pourquoi-une-partie-du-projet-ne-respecte-pas-ces-conventions","title":"Pourquoi une partie du projet ne respecte pas ces conventions ?","text":"<p>Parce que le projet est vieux. Le commit initial date du 18 novembre 2015. C'\u00e9tait il y a presque dix ans au moment o\u00f9 ces lignes sont \u00e9crites. Au d\u00e9but, on ne se posait pas forc\u00e9ment ce genre de questions. Puis le projet a grandi, de mani\u00e8re s\u00e9dimentaire, fonctionnalit\u00e9 apr\u00e8s fonctionnalit\u00e9, d\u00e9velopp\u00e9 par des personnes n'ayant pas toutes la m\u00eame esth\u00e9tique.</p> <p>On retrouve dans le code ces inspirations diverses de personnes vari\u00e9es \u00e0 travers une d\u00e9cennie. Au bout d'un moment, il est bon de se poser et de normaliser les choses.</p> <p>De ce c\u00f4t\u00e9-l\u00e0, une premi\u00e8re pierre a \u00e9t\u00e9 pos\u00e9e en novembre 2018, avec l'utilisation d'un formateur. Il convient de poursuivre ce travail d'unification.</p> <p>Cependant, l\u00e0 o\u00f9 on peut reformater automatiquement du code, il faut y aller \u00e0 la main pour retravailler un style de code. C'est un travail de fourmi qui prendra du temps.</p>"},{"location":"explanation/technos/","title":"Technologies utilis\u00e9es","text":"<p>Bien choisir ses technologies est crucial  puisqu'une fois que le projet est suffisamment avanc\u00e9, il est tr\u00e8s difficile voir impossible de revenir en arri\u00e8re.</p> <p>En novembre 2015, plusieurs choix se pr\u00e9sentaient :</p> <ul> <li>Continuer avec du PHP</li> <li>S'orienter vers un langage web plus moderne et \u00e0 la mode comme le Python ou le Ruby</li> <li>Baser le site sur un framework Javascript</li> </ul> <p>Le PHP 5, bient\u00f4t 7, de l'\u00e9poque  \u00e9tant assez discutable comme  cet article le montre, et l'ancien site ayant laiss\u00e9 un go\u00fbt amer \u00e0 certains d\u00e9veloppeurs, celui-ci a \u00e9t\u00e9 mis de c\u00f4t\u00e9.</p> <p>L'\u00e9cosyst\u00e8me Javascript \u00e9tant \u00e0 peine naissant  et les frameworks allant et venant en seulement quelques mois, il \u00e9tait impossible de pr\u00e9dire avec certitude  si ceux-ci passeraient l'\u00e9preuve du temps, il \u00e9tait inconcevable de tout parier l\u00e0-dessus.</p> <p>Ne restait plus que le Python et le Ruby  avec les frameworks Django et Ruby On Rails. Ruby ayant une r\u00e9putation d'\u00eatre tr\u00e8s \"cutting edge\", c'est Python, un langage bien implant\u00e9  et ayant fait ses preuves, qui a \u00e9t\u00e9 retenu.</p> <p>Il est \u00e0 noter que r\u00e9\u00e9crire le site avec un framework PHP comme Laravel ou Symphony eut aussi \u00e9t\u00e9 possible,  ces deux technologies \u00e9tant assez matures et robustes au moment o\u00f9 le d\u00e9veloppement a commenc\u00e9. Cependant, il aurait \u00e9t\u00e9 potentiellement  fastidieux de maintenir en parall\u00e8le deux versions de PHP sur le serveur durant toute la dur\u00e9e du d\u00e9veloppement. Il faut aussi prendre en compte que nous \u00e9tions  \u00e0 ce moment d\u00e9go\u00fbt\u00e9s du PHP.</p>"},{"location":"explanation/technos/#backend","title":"Backend","text":""},{"location":"explanation/technos/#python-3","title":"Python 3","text":"<p>Site officiel</p> <p>Le python est un langage de programmation interpr\u00e9t\u00e9 multi paradigme sorti en 1991.  Il est tr\u00e8s populaire dans de nombreux domaines pour sa simplicit\u00e9 d'utilisation, sa polyvalence, sa s\u00e9curit\u00e9 ainsi que sa grande communaut\u00e9 de d\u00e9veloppeur.  Sa version 3, non r\u00e9tro compatible avec sa version 2, a \u00e9t\u00e9 publi\u00e9e en 2008.</p> <p>Note</p> <p>Puisque toutes les d\u00e9pendances du backend sont  des packages Python,  elles sont toutes ajout\u00e9es directement  dans le fichier pyproject.toml,  \u00e0 la racine du projet.</p>"},{"location":"explanation/technos/#django","title":"Django","text":"<p>Site officiel</p> <p>Documentation</p> <p>Django est un framework web pour Python apparu en 2005. Il fournit un grand nombre de fonctionnalit\u00e9s pour d\u00e9velopper un site rapidement et simplement.  Cela inclut entre autre un serveur Web de d\u00e9veloppement, un parseur d'URLs pour le routage,  un ORM (Object-Relational Mapper)  pour la gestion de la base de donn\u00e9e, un cadre pour l'\u00e9criture et l'ex\u00e9cution des tests, de nombreux utilitaires pour l'internationalisation, les zones horaires et autres, une interface web d'administration ais\u00e9ment configurable, un moteur de templates pour le rendu HTML...</p> <p>Django propose une version LTS (Long Term Support)  qui reste stable et est maintenu sur des cycles plus longs. Ce sont ces versions qui sont utilis\u00e9es.</p>"},{"location":"explanation/technos/#postgresql-sqlite3","title":"PostgreSQL / SQLite3","text":"<p>Site officiel PostgreSQL</p> <p>Site officiel SQLite</p> <p>Comme la majorit\u00e9 des sites internet,  le Sith de l'AE enregistre ses donn\u00e9es  dans une base de donn\u00e9es.  Nous utilisons une base de donn\u00e9e relationnelle  puisque c'est la mani\u00e8re typique d'utiliser  Django et c'est ce qu'utilise son ORM.</p> <p>Le principal \u00e0 retenir ici est :</p> <ul> <li>Sur la version de production, nous utilisons PostgreSQL, c'est cette version qui doit fonctionner en priorit\u00e9. C'est un syst\u00e8me de gestion de base de donn\u00e9es fiable, puissant, activement maintenu, et particuli\u00e8rement bien support\u00e9 par Django.</li> <li>Sur les versions de d\u00e9veloppement, pour faciliter l'installation du projet, nous utilisons la technologie SQLite3  qui ne requiert aucune installation sp\u00e9cifique (la librairie <code>sqlite</code> est incluse dans les  librairies par d\u00e9faut de Python). Certaines instructions ne sont pas support\u00e9es par cette technologie et il est parfois n\u00e9cessaire d'installer PostgreSQL pour le d\u00e9veloppement  de certaines parties du site  (cependant, ces parties sont rares, et vous pourriez m\u00eame ne jamais en rencontrer une).</li> </ul> <p>PostgreSQL est-ce avec quoi le site doit fonctionner. Cependant, pour permettre aux d\u00e9veloppeurs de travailler en installant le moins de d\u00e9pendances possible sur leur ordinateur, il est \u00e9galement d\u00e9sirable de chercher la compatibilit\u00e9 avec SQLite. Aussi, dans la mesure du possible, nous cherchons \u00e0 ce que les interactions avec la base de donn\u00e9es fonctionnent avec l'un comme avec l'autre.</p> <p>Heureusement, et gr\u00e2ce \u00e0 l'ORM de Django, cette double compatibilit\u00e9 est presque toujours possible.</p>"},{"location":"explanation/technos/#celery","title":"Celery","text":"<p>Site officiel</p> <p>Dans certaines situations, on veut s\u00e9parer une t\u00e2che pour la faire tourner dans son coin. Deux cas qui correspondent \u00e0 cette situation sont :</p> <ul> <li>les t\u00e2ches longues \u00e0 ex\u00e9cuter    (comme l'envoi de mail ou la g\u00e9n\u00e9ration de documents),   pour lesquelles on veut pouvoir dire \u00e0 l'utilisateur   que sa requ\u00eate a \u00e9t\u00e9 prise en compte, sans pour autant   le faire trop patienter</li> <li>les t\u00e2ches r\u00e9guli\u00e8res s\u00e9par\u00e9es du cycle requ\u00eate/r\u00e9ponse.</li> </ul> <p>Pour \u00e7a, nous utilisons Celery. Gr\u00e2ce \u00e0 son int\u00e9gration avec Django, il permet de mettre en place une queue de message avec assez peu complexit\u00e9 ajout\u00e9e.</p> <p>En outre, ses extensions <code>django-celery-results</code> et <code>django-celery-beat</code> enrichissent son int\u00e9gration avec django et offrent des moyens de manipuler certaines t\u00e2ches directement dans l'interface admin de django.</p>"},{"location":"explanation/technos/#frontend","title":"Frontend","text":""},{"location":"explanation/technos/#jinja2","title":"Jinja2","text":"<p>Site officiel</p> <p>Jinja2 est un moteur de template \u00e9crit en Python qui s'inspire fortement de la syntaxe des templates de Django. Ce moteur apporte toutefois son lot d'am\u00e9liorations non n\u00e9gligeables.  Il permet par exemple l'ajout de macros, sortes de fonctions \u00e9crivant du HTML.</p> <p>Un moteur de templates permet de g\u00e9n\u00e9rer  du contenu textuel de mani\u00e8re proc\u00e9dural en fonction des donn\u00e9es \u00e0 afficher, cela permet de pouvoir inclure du code proche du Python dans la syntaxe au milieu d'un document contenant principalement du HTML.  On peut facilement faire des boucles ou des conditions ainsi m\u00eame que de l'h\u00e9ritage de templates.</p> <p>Note</p> <p>le rendu est fait c\u00f4t\u00e9 serveur, si on souhaite faire des modifications c\u00f4t\u00e9 client,  il faut utiliser du Javascript, rien ne change \u00e0 ce niveau-l\u00e0.</p>"},{"location":"explanation/technos/#jquery","title":"jQuery","text":"<p>Site officiel</p> <p>jQuery est une biblioth\u00e8que JavaScript  libre et multiplateforme cr\u00e9\u00e9e pour faciliter l'\u00e9criture de scripts c\u00f4t\u00e9 client  dans le code HTML des pages web.  La premi\u00e8re version est lanc\u00e9e en janvier 2006 par John Resig.</p> <p>C'est une vieille technologie et certains feront remarquer \u00e0 juste titre que le Javascript  moderne permet d'utiliser assez simplement  la majorit\u00e9 de ce que fournit jQuery  sans rien avoir \u00e0 installer.  Cependant, de nombreuses d\u00e9pendances du projet utilisent encore jQuery qui est toujours  tr\u00e8s implant\u00e9 aujourd'hui.  Le sucre syntaxique qu'offre cette librairie  reste tr\u00e8s agr\u00e9able \u00e0 utiliser et \u00e9conomise parfois beaucoup de temps.  \u00c7a fonctionne et \u00e7a fonctionne tr\u00e8s bien. C'est maintenu et pratique.</p>"},{"location":"explanation/technos/#alpinejs","title":"AlpineJS","text":"<p>Site officiel</p> <p>AlpineJS est une librairie l\u00e9g\u00e8re et minimaliste permettant le rendu dynamique d'\u00e9l\u00e9ments sur une page web, code de mani\u00e8re d\u00e9clarative. La librairie est d\u00e9crite par ses cr\u00e9ateurs comme : \"un outil robuste et minimal pour composer un comportement directement dans vos balises\".</p> <p>Alpine permet d'accomplir la plupart du temps le m\u00eame r\u00e9sultat qu'un usage des fonctionnalit\u00e9s de base des plus gros frameworks Javascript, mais est beaucoup plus l\u00e9ger, un peu plus facile \u00e0 prendre en main et ne s'embarrasse pas d'un DOM virtuel. Gr\u00e2ce \u00e0 son architecture, il est extr\u00eamement bien adapt\u00e9 pour un usage dans un site multipage. C'est une technologie simple et puissante qui se veut comme le jQuery du web moderne.</p>"},{"location":"explanation/technos/#htmx","title":"Htmx","text":"<p>Site officiel</p> <p>En plus de AlpineJS, l\u2019interactivit\u00e9 sur le site est augment\u00e9e via Htmx. C'est une librairie js qui s'utilise \u00e9galement au moyen d'attributs HTML \u00e0 ajouter directement dans les templates.</p> <p>Son principe est de remplacer certains \u00e9l\u00e9ments du html par un fragment de HTML renvoy\u00e9 par le serveur backend. Cela se marie tr\u00e8s bien avec le fonctionnement de django et en particulier de ses formulaires afin d'\u00e9viter de doubler le travail pour la v\u00e9rification des donn\u00e9es.</p>"},{"location":"explanation/technos/#sass","title":"Sass","text":"<p>Site officiel</p> <p>Sass (Syntactically Awesome Stylesheets) est un langage dynamique  de g\u00e9n\u00e9ration de feuilles CSS apparu en 2006. C'est un langage de CSS \"am\u00e9lior\u00e9\" qui permet  l'ajout de variables  (\u00e0 une \u00e9poque o\u00f9 le CSS ne les supportait pas), de fonctions, mixins ainsi qu'une syntaxe pour  imbriquer plus facilement et proprement les r\u00e8gles sur certains \u00e9l\u00e9ments.  Le Sass est traduit en CSS directement c\u00f4t\u00e9 serveur  et le client ne re\u00e7oit que du CSS.</p> <p>C'est une technologie stable, mature et pratique qui ne n\u00e9cessite pas \u00e9norm\u00e9ment d'apprentissage.</p>"},{"location":"explanation/technos/#fontawesome","title":"Fontawesome","text":"<p>Site officiel</p> <p>Fontawesome regroupe tout un ensemble  d'ic\u00f4nes libres de droits utilisables facilement  sur n'importe quelle page web. Ils sont simples \u00e0 modifier puisque modifiables  via le CSS et pr\u00e9sentent l'avantage de fonctionner sur tous les navigateurs contrairement  \u00e0 un simple ic\u00f4ne unicode qui s'affiche  lui diff\u00e9remment selon la plate-forme.</p> <p>Note</p> <p>C'est une d\u00e9pendance capricieuse qui \u00e9volue tr\u00e8s vite  et qu'il faut tr\u00e8s souvent mettre \u00e0 jour.</p> <p>Warning</p> <p>Il a \u00e9t\u00e9 d\u00e9cid\u00e9 de ne pas utiliser de CDN puisque le site ralentissait r\u00e9guli\u00e8rement. Il est pr\u00e9f\u00e9rable de fournir cette d\u00e9pendance avec le site.</p>"},{"location":"explanation/technos/#workflow","title":"Workflow","text":""},{"location":"explanation/technos/#git","title":"Git","text":"<p>Site officiel</p> <p>Git est un logiciel de gestion de versions \u00e9crit par Linus Torvalds pour les besoins du noyau linux en 2005.  C'est ce logiciel qui remplace svn anciennement utilis\u00e9 pour g\u00e9rer les sources du projet (rappelez vous, l'ancien site date d'avant 2005). Git est plus complexe \u00e0 utiliser,  mais est bien plus puissant, permet de g\u00e9rer plusieurs versions en parall\u00e8le  et g\u00e9n\u00e8re des codebases vraiment plus l\u00e9g\u00e8res puisque  seules les modifications sont enregistr\u00e9es  (contrairement \u00e0 svn qui garde une copie  de la codebase par version).</p> <p>Git s'\u00e9tant impos\u00e9 comme le principal outil de gestion de versions, sa communaut\u00e9 est tr\u00e8s grande et sa documentation tr\u00e8s fournie. Il est \u00e9galement ais\u00e9 de trouver des outils avec une interface graphique, qui simplifient grandement son usage.</p>"},{"location":"explanation/technos/#github","title":"GitHub","text":"<p>Site officiel</p> <p>Page github du P\u00f4le Informatique de l'AE</p> <p>Github est un service web d'h\u00e9bergement et de gestion de d\u00e9veloppement de logiciel. C'est une plate-forme avec interface web permettant de d\u00e9poser du code g\u00e9r\u00e9 avec Git offrant \u00e9galement de l'int\u00e9gration continue et du d\u00e9ploiement automatique. C'est au travers de cette plate-forme que le Sith de l'AE est g\u00e9r\u00e9.</p>"},{"location":"explanation/technos/#sentry","title":"Sentry","text":"<p>Site officiel</p> <p>Instance de l'AE</p> <p>Sentry est une plate-forme libre qui permet de se tenir inform\u00e9 des bugs qui ont lieu sur le site. \u00c0 chaque crash du logiciel (erreur 500), une erreur est envoy\u00e9e sur la plate-forme et il est indiqu\u00e9 pr\u00e9cis\u00e9ment \u00e0 quelle ligne de code celle-ci a eu lieu, \u00e0 quelle heure, combien de fois, avec quel navigateur la page a \u00e9t\u00e9 visit\u00e9e et m\u00eame \u00e9ventuellement  un commentaire de l'utilisateur qui a rencontr\u00e9 le bug.</p> <p>C'est un outil incroyablement pratique pour savoir tout ce qui ne fonctionne pas, et surtout pour r\u00e9colter toutes les informations n\u00e9cessaires \u00e0 la r\u00e9paration des bugs.</p>"},{"location":"explanation/technos/#uv","title":"UV","text":"<p>UV</p> <p>UV est un utilitaire qui permet de cr\u00e9er et g\u00e9rer  des environnements Python de mani\u00e8re simple et intuitive. Il permet \u00e9galement de g\u00e9rer et mettre \u00e0 jour le fichier de d\u00e9pendances.</p> <p>L'avantage d'utiliser uv  (et les environnements virtuels en g\u00e9n\u00e9ral)  est de pouvoir g\u00e9rer plusieurs projets diff\u00e9rents  en parall\u00e8le puisqu'il permet d'avoir sur sa machine plusieurs environnements diff\u00e9rents et  donc plusieurs versions d'une m\u00eame d\u00e9pendance  dans plusieurs projets diff\u00e9rents sans impacter  le syst\u00e8me sur lequel le tout est install\u00e9.</p> <p>UV poss\u00e8de \u00e9galement l'avantage par rapport \u00e0 un simple venv que les versions exactes de toutes les d\u00e9pendances, y compris celles utilis\u00e9es par d'autres d\u00e9pendances, sont consign\u00e9es dans un fichier <code>.lock</code>. On est donc s\u00fbr et certain que deux environnements virtuels configur\u00e9s avec le m\u00eame fichier lock utiliseront exactement les m\u00eames versions des m\u00eames d\u00e9pendances, y compris si celles-ci ne sont pas indiqu\u00e9es explicitement.</p> <p>UV se charge m\u00eame de t\u00e9l\u00e9charger la bonne version de Python automatiquement !</p> <p>Les d\u00e9pendances utilis\u00e9es par uv sont d\u00e9clar\u00e9es dans le fichier <code>pyproject.toml</code>, situ\u00e9 \u00e0 la racine du projet.</p> <p>Aussi, uv est rapide, genre TR\u00c8S TR\u00c8S rapide \u26a1\ufe0f</p>"},{"location":"explanation/technos/#ruff","title":"Ruff","text":"<p>Site officiel</p> <p>Pour faciliter la lecture du code,  il est toujours appr\u00e9ciable d'avoir  une norme d'\u00e9criture coh\u00e9rente. C'est g\u00e9n\u00e9ralement \u00e0 l'\u00e9tape de relecture  des modifications par les autres contributeurs  que sont rep\u00e9r\u00e9es ces fautes de normes  qui se doivent d'\u00eatre corrig\u00e9es pour le bien commun.</p> <p>Imposer une norme est tr\u00e8s fastidieux, que ce soit pour ceux qui relisent ou pour ceux qui \u00e9crivent. C'est pour cela que nous utilisons Ruff, qui est un formateur et linter automatique de code. Une fois l'outil lanc\u00e9, il parcourt la codebase pour y rep\u00e9rer les fautes de norme et les erreurs de logique courantes et les corrige automatiquement (quand c'est possible) sans que l'utilisateur ait \u00e0 s'en soucier. Bien install\u00e9, il peut effectuer ce travail \u00e0 chaque sauvegarde d'un fichier dans son \u00e9diteur, ce qui est tr\u00e8s agr\u00e9able pour travailler.</p>"},{"location":"explanation/technos/#biome","title":"Biome","text":"<p>Site officiel</p> <p>Puisque Ruff ne fonctionne malheureusement que pour le Python, nous utilisons Biome pour le javascript.</p> <p>Biome est \u00e9galement capable d'analyser et formater les fichiers json et css.</p> <p>Tout comme Ruff, Biome fait office de formateur et de linter.</p>"},{"location":"explanation/technos/#djhtml","title":"DjHTML","text":"<p>Site officiel</p> <p>Ruff permet de formater les fichiers Python et Biome les fichiers js, mais ils ne formattent pas les templates et les feuilles de style. Pour \u00e7a, il faut un autre outil, ais\u00e9ment int\u00e9grable dans la CI : <code>djHTML</code>.</p> <p>En utilisant conjointement Ruff, Biome et djHTML, on arrive donc \u00e0 la fois \u00e0 formater les fichiers Python et les fichiers relatifs au frontend.</p>"},{"location":"explanation/technos/#npm","title":"Npm","text":"<p>Utiliser npm</p> <p>Npm est un gestionnaire de paquets pour Node.js. C'est l'un des gestionnaires les plus r\u00e9pandus sur le march\u00e9 et est tr\u00e8s complet et utilis\u00e9.</p> <p>Npm poss\u00e8de, tout comme Poetry, la capacit\u00e9 de locker les d\u00e9pendances au moyen d'un fichier <code>.lock</code>. Il a \u00e9galement l'avantage de presque toujours \u00eatre facilement disponible \u00e0 l'installation.</p> <p>Nous l'utilisons ici pour g\u00e9rer les d\u00e9pendances JavaScript. Celle-ci sont d\u00e9clar\u00e9es dans le fichier <code>package.json</code> situ\u00e9 \u00e0 la racine du projet.</p>"},{"location":"explanation/technos/#vite","title":"Vite","text":"<p>Utiliser vite</p> <p>Vite est un bundler de fichiers static. Il nous sert ici \u00e0 mettre \u00e0 disposition les d\u00e9pendances frontend g\u00e9r\u00e9es par npm.</p> <p>Il sert \u00e9galement \u00e0 int\u00e9grer les autres outils JavaScript au workflow du Sith de mani\u00e8re transparente.</p> <p>Vite a \u00e9t\u00e9 choisi pour sa versatilit\u00e9 et sa popularit\u00e9. Il est moderne et tr\u00e8s rapide avec un fort soutien de la communaut\u00e9.</p> <p>Il int\u00e8gre aussi tout le n\u00e9cessaire pour la r\u00e9tro-compatibilit\u00e9 et le Typescript.</p> <p>Le logiciel se configure au moyen du fichier <code>vite.config.mts</code> \u00e0 la racine du projet.</p>"},{"location":"howto/direnv/","title":"Direnv","text":"<p>Pour \u00e9viter d'avoir \u00e0 sourcer l'environnement  \u00e0 chaque fois qu'on rentre dans le projet, il est possible d'utiliser l'utilitaire direnv.</p> <p>Comme pour beaucoup de choses, il faut commencer par l'installer :</p> LinuxmacOS Debian/UbuntuArch Linux <pre><code>sudo apt install direnv\n</code></pre> <pre><code>sudo pacman -S direnv\n</code></pre> <pre><code>brew install direnv\n</code></pre> <p>Puis on configure :</p> bashzshnu <pre><code>echo 'eval \"$(direnv hook bash)\"' &gt;&gt; ~/.bashrc\nexit # On red\u00e9marre le terminal\n</code></pre> <pre><code>echo 'eval \"$(direnv hook zsh)\"' &gt;&gt; ~/.zshrc\nexit # On red\u00e9marre le terminal\n</code></pre> <p>D\u00e9sol\u00e9, par <code>direnv hook</code> pour <code>nu</code></p> <p>Une fois le terminal red\u00e9marr\u00e9, dans le r\u00e9pertoire du projet : <pre><code>direnv allow .\n</code></pre></p> <p>Une fois que cette configuration a \u00e9t\u00e9 appliqu\u00e9e,  aller dans le dossier du site applique automatiquement  l'environnement virtuel. \u00c7a peut faire gagner pas mal de temps.</p> <p>Direnv est un utilitaire tr\u00e8s puissant  et qui peut s'av\u00e9rer pratique dans bien des situations, n'h\u00e9sitez pas \u00e0 aller vous renseigner plus en d\u00e9tail sur celui-ci.</p>"},{"location":"howto/js-import-paths/","title":"Ajouter un chemin d'import javascript","text":"<p>Vous avez ajout\u00e9 une application et vous voulez y mettre du javascript ?</p> <p>Vous voulez importer depuis cette nouvelle application dans votre script g\u00e9r\u00e9 par le bundler ?</p> <p>Eh bien il faut manuellement enregistrer dans node o\u00f9 les trouver et c'est tr\u00e8s simple.</p> <p>D'abord, il faut ajouter dans node via <code>package.json</code>:</p> <pre><code>{\n    // ...\n    \"imports\": {\n        // ...\n        \"#mon_app:*\": \"./mon_app/static/bundled/*\"\n    }\n    // ...\n}\n</code></pre> <p>Ensuite, pour faire fonctionne l'auto-compl\u00e9tion, il faut configurer <code>tsconfig.json</code>:</p> <pre><code>{\n    \"compilerOptions\": {\n        // ...\n        \"paths\": {\n            // ...\n            \"#mon_app:*\": [\"./mon_app/static/bundled/*\"]\n        }\n    }\n}\n</code></pre> <p>Et c'est tout !</p> <p>Note</p> <p>Il se peut qu'il soit n\u00e9cessaire de red\u00e9marrer <code>./manage.py runserver</code> pour que les changements prennent effet.</p>"},{"location":"howto/logo/","title":"Ajouter un logo de promo","text":""},{"location":"howto/logo/#les-logos-de-promo","title":"Les logos de promo","text":"<p>Une fois par an, il est g\u00e9n\u00e9ralement n\u00e9cessaire d'ajouter le nouveau logo d'une promo. C'est un processus manuel.</p> <p>Automatisation</p> <p>Cr\u00e9er une interface automatique sur le site serait compliqu\u00e9 et long \u00e0 faire. Les erreurs de format des utilisateurs sont g\u00e9n\u00e9ralement nombreuses et on se retrouverais souvent avec des logos ratatin\u00e9s. Il est donc plus simple et plus fiable de faire cette op\u00e9ration manuellement, \u00e7a prend quelques minutes et on est certain de la qualit\u00e9 \u00e0 la fin.</p>"},{"location":"howto/logo/#avec-une-commande-django","title":"avec une commande django","text":"<p><pre><code>./manage.py add_promo_logo numero_de_promo chemin_dacces_du_logo\n</code></pre> options:</p> <ul> <li><code>--force/-f</code> pour automatiquement \u00e9craser les logos de promo avec le m\u00eame nom.</li> </ul>"},{"location":"howto/logo/#manuellement","title":"manuellement","text":"<p>Les logos de promo sont \u00e0 manuellement ajouter dans le projet. Ils se situent dans le dossier <code>core/static/core/img/</code>.</p> <p>Leur format est le suivant:</p> <ul> <li>PNG \u00e0 fond transparent</li> <li>Taille 120x120 px</li> <li>Nom <code>promo_xx.png</code></li> </ul>"},{"location":"howto/migrations/","title":"G\u00e9rer les migrations","text":""},{"location":"howto/migrations/#quest-ce-quune-migration","title":"Qu'est-ce qu'une migration ?","text":"<p>Une migration est un fichier Python qui contient des instructions pour modifier la base de donn\u00e9es. Une base de donn\u00e9es \u00e9volue au cours du temps, et les migrations permettent de garder une trace de ces modifications.</p> <p>Gr\u00e2ce \u00e0 elles, on peut \u00e9galement apporter des modifications \u00e0 la base de donn\u00e9es sans \u00eatre oblig\u00e9es de la recr\u00e9er. On applique seulement les modifications n\u00e9cessaires.</p>"},{"location":"howto/migrations/#appliquer-les-migrations","title":"Appliquer les migrations","text":"<p>Pour appliquer les migrations, ex\u00e9cutez la commande suivante :</p> <pre><code>python ./manage.py migrate\n</code></pre> <p>Vous remarquerez peut-\u00eatre que cette commande a \u00e9t\u00e9 utilis\u00e9e dans la section  Installation. En effet, en partant d'une base de donn\u00e9es vierge et en appliquant toutes les migrations, on arrive \u00e0 l'\u00e9tat actuel de la base de donn\u00e9es.  Logique.</p> <p>Si vous utilisez cette commande sur une base de donn\u00e9es sur laquelle toutes les migrations ont \u00e9t\u00e9 appliqu\u00e9es, elle ne fera rien.</p> <p>Si vous utilisez cette commande sur une base de donn\u00e9es sur laquelle seule une partie des migrations ont \u00e9t\u00e9 appliqu\u00e9es, seules les migrations manquantes seront appliqu\u00e9es.</p>"},{"location":"howto/migrations/#creer-une-migration","title":"Cr\u00e9er une migration","text":"<p>Pour cr\u00e9er une migration, ex\u00e9cutez la commande suivante :</p> <pre><code>python ./manage.py makemigrations\n</code></pre> <p>Cette commande comparera automatiquement le contenu des classes de mod\u00e8les et le comparera avec les migrations d\u00e9j\u00e0 appliqu\u00e9es. A partir de cette comparaison, elle g\u00e9n\u00e9rera automatiquement une nouvelle migration.</p> <p>Note</p> <p>La commande <code>makemigrations</code> ne fait que g\u00e9n\u00e9rer les fichiers de migration. Elle ne modifie pas la base de donn\u00e9es. Pour appliquer la migration, n'oubliez pas la commande <code>migrate</code>.</p> <p>Un fichier de migration ressemble \u00e0 \u00e7a : </p> <pre><code>from django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        # liste des autres migrations \u00e0 appliquer avant celle-ci\n    ]\n\n    operations = [\n        # liste des op\u00e9rations \u00e0 appliquer sur la db\n    ]\n</code></pre> <p>Gr\u00e2ce \u00e0 la liste des d\u00e9pendances, Django sait dans quel ordre les migrations doivent \u00eatre appliqu\u00e9es. Gr\u00e2ce \u00e0 la liste des op\u00e9rations, Django sait quelles sont les op\u00e9rations \u00e0 appliquer durant cette migration.</p>"},{"location":"howto/migrations/#revenir-a-une-migration-anterieure","title":"Revenir \u00e0 une migration ant\u00e9rieure","text":"<p>Lorsque vous d\u00e9veloppez, il peut arriver que vous vouliez revenir \u00e0 une migration ant\u00e9rieure. Pour cela, il suffit d'appliquer la commande <code>migrate</code> en sp\u00e9cifiant le nom de la migration \u00e0 laquelle vous voulez revenir :</p> <pre><code>python ./manage.py migrate &lt;application&gt; &lt;num\u00e9ro de la migration&gt;\n</code></pre> <p>Par exemple, si vous voulez revenir \u00e0 la migration <code>0001_initial</code>  de l'application <code>customer</code>, vous pouvez ex\u00e9cuter la commande suivante :</p> <pre><code>python ./manage.py migrate customer 0001\n</code></pre>"},{"location":"howto/migrations/#customiser-une-migration","title":"Customiser une migration","text":"<p>Il peut arriver que vous ayez besoin de modifier le fichier de migration g\u00e9n\u00e9r\u00e9 par Django. Par exemple, si vous voulez ex\u00e9cuter un script Python lors de l'application de la migration.</p> <p>Dans ce cas, vous pouvez trouver les fichiers de migration dans le dossier <code>migrations</code> de chaque application. Vous pouvez modifier le fichier Python correspondant \u00e0 la migration que vous voulez modifier.</p> <p>Ajoutez l'op\u00e9ration que vous voulez effectuer dans l'attribut <code>operations</code> de la classe <code>Migration</code>.</p> <p>Par exemple :</p> <pre><code>from django.db import migrations\n\ndef forwards_func(apps, schema_editor):\n    print(\"Appplication de la migration\")\n\ndef reverse_func(apps, schema_editor):\n    print(\"Annulation de la migration\")\n\nclass Migration(migrations.Migration):\n\n    dependencies = []\n\n    operations = [\n        migrations.RunPython(forwards_func, reverse_func),\n    ]\n</code></pre> <p>Script d'annulation de la migration</p> <p>Lorsque vous incluez un script Python dans une migration, incluez toujours aussi un script d'annulation, sinon Django ne pourra pas annuler la migration apr\u00e8s son application.</p> <p>Vous ne pourrez donc pas revenir \u00e0 un \u00e9tat ant\u00e9rieur de la db, \u00e0 moins de la recr\u00e9er de z\u00e9ro.</p>"},{"location":"howto/migrations/#fusionner-des-migrations","title":"Fusionner des migrations","text":"<p>Quand on travaille sur une fonctionnalit\u00e9 qui n\u00e9cessite une modification de la base de donn\u00e9es, les fichiers de migration sont comme toute chose : on peut se rendre compte que les changements apport\u00e9s pourraient \u00eatre meilleurs.</p> <p>Par exemple, supposons que nous voulons cr\u00e9er un mod\u00e8le repr\u00e9sentant une UE suivie par un \u00e9tudiant (ne demandez pas pourquoi on voudrait faire \u00e7a,  c'est juste pour l'exemple). Un tel mod\u00e8le aurait besoin des informations suivantes :</p> <ul> <li>l'utilisateur</li> <li>le code de l'UE</li> </ul> <p>On \u00e9crirait donc, dans l'application <code>pedagogy</code> : <pre><code>from django.db import models\nfrom core.models import User\n\nclass UserUe(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    ue = models.CharField(max_length=10)\n</code></pre></p> <p>Et nous aurions le fichier de migration suivant :  <pre><code>from django.db import migrations, models\nfrom django.conf import settings\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"pedagogy\", \"0003_alter_uv_language\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"UserUe\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"ue\", models.CharField(max_length=10)),\n                (\n                    \"user\",\n                    models.ForeignKey(\n                        on_delete=models.deletion.CASCADE,\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n        ),\n    ]\n</code></pre></p> <p>On finit son travail, on soumet la PR. Mais l\u00e0, quelqu'un fait remarquer qu'il existe d\u00e9j\u00e0 un mod\u00e8le pour repr\u00e9senter une UE. On modifie donc le mod\u00e8le :</p> <pre><code>from django.db import models\nfrom core.models import User\nfrom pedagogy.models import UV\n\nclass UserUe(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    ue = models.ForeignKey(UV, on_delete=models.CASCADE)\n</code></pre> <p>On refait la commande <code>makemigrations</code> et on obtient : <pre><code>from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"pedagogy\", \"0004_userue\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"userue\",\n            name=\"ue\",\n            field=models.ForeignKey(\n                on_delete=models.deletion.CASCADE, to=\"pedagogy.uv\"\n            ),\n        ),\n    ]\n</code></pre></p> <p>Sauf que maintenant, nous avons deux fichiers de migration, alors qu'en r\u00e9alit\u00e9, on ne souhaite faire qu'une seule migration, une fois qu'on aura exp\u00e9di\u00e9 le code en prod. Certes, \u00e7a fonctionnerait d'appliquer les deux, mais \u00e7a pose un probl\u00e8me d'encombrement.</p> <p>Plus il y a de fichiers de migrations, plus il y a de migrations \u00e0 r\u00e9soudre au moment de l'installation du projet chez quelqu'un, plus c'est emb\u00eatant \u00e0 g\u00e9rer et plus Django prendra du temps \u00e0 r\u00e9soudre les migrations.</p> <p>C'est pourquoi il est bon de respecter le principe : une PR = un fichier de migration maximum par application.</p> <p>Nous voulons donc fusionner les deux, pour n'en garder qu'une. Pour \u00e7a, deux mani\u00e8res de proc\u00e9der :</p> <ul> <li>le faire \u00e0 la main</li> <li>utiliser la commande squashmigrations</li> </ul> <p>Pour la m\u00e9thode manuelle, on ne pourrait pas vous dire exhaustivement comment faire. Mais ne vous inqui\u00e9tez pas, ce n'est pas tr\u00e8s dur. Regardez bien quelles sont les instructions utilis\u00e9es par django pour les op\u00e9rations de migrations, et avec un peu d'astuce et quelques copier-coller, vous vous en sortirez comme des chefs.</p> <p>Pour la m\u00e9thode <code>squashmigrations</code>, ex\u00e9cutez la commande </p> <pre><code>python ./manage.py squasmigrations &lt;app&gt; &lt;migration de d\u00e9but (incluse)&gt; &lt;migration de fin (incluse)&gt; \n</code></pre> <p>Par exemple, dans notre cas, \u00e7a donnera :</p> <pre><code>python ./manage.py squasmigrations pedagogy 0004 0005 \n</code></pre> <p>La commande vous donnera ceci : <pre><code>from django.conf import settings\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    replaces = [(\"pedagogy\", \"0004_userue\"), (\"pedagogy\", \"0005_alter_userue_ue\")]\n\n    dependencies = [\n        (\"pedagogy\", \"0003_alter_uv_language\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"UserUe\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"ue\",\n                    models.ForeignKey(\n                        on_delete=models.deletion.CASCADE, to=\"pedagogy.uv\"\n                    ),\n                ),\n                (\n                    \"user\",\n                    models.ForeignKey(\n                        on_delete=models.deletion.CASCADE,\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n        ),\n    ]\n</code></pre></p> <p>Vous pouvez alors supprimer les deux autres fichiers.</p> <p>Vous remarquerez peut-\u00eatre la pr\u00e9sence de la ligne suivante : <pre><code>replaces = [(\"pedagogy\", \"0004_userue\"), (\"pedagogy\", \"0005_alter_userue_ue\")]\n</code></pre></p> <p>Cela sert \u00e0 dire que cette migration doit \u00eatre appliqu\u00e9e \u00e0 la place des deux autres. Une fois que vous aurez supprim\u00e9 les deux fichiers, supprimez \u00e9galement cette ligne.</p> <p>Warning</p> <p>Django sait quelles migrations ont \u00e9t\u00e9 appliqu\u00e9es, en les stockant dans une table de la db. Si une migration est enregistr\u00e9e en db, sans que le fichier de migration correspondant existe, la commande <code>migrate</code> \u00e9choue.</p> <p>Quand vous faites un <code>squashmigrations</code>, pensez donc \u00e0 appliquer la commande <code>migrate</code> juste apr\u00e8s (mais avant la suppression des anciens fichiers), pour que Django supprime de la base de donn\u00e9es les migrations devenues inutiles.</p>"},{"location":"howto/prod/","title":"Configurer pour la production","text":""},{"location":"howto/prod/#configurer-sentry","title":"Configurer Sentry","text":"<p>Pour connecter l'application \u00e0 une instance de sentry (ex: https://sentry.io), il est n\u00e9cessaire de configurer la variable <code>SENTRY_DSN</code> dans le fichier <code>.env</code>. Cette variable est compos\u00e9e d'un lien complet vers votre projet sentry.</p>"},{"location":"howto/prod/#recuperer-les-statiques","title":"R\u00e9cup\u00e9rer les statiques","text":"<p>Nous utilisons du SCSS dans le projet. En environnement de d\u00e9veloppement (<code>SITH_DEBUG=true</code>), le SCSS est compil\u00e9 \u00e0 chaque fois que le fichier est demand\u00e9. Pour la production, le projet consid\u00e8re  que chacun des fichiers est d\u00e9j\u00e0 compil\u00e9. C'est pourquoi le SCSS est automatiquement compil\u00e9 lors  de la r\u00e9cup\u00e9ration des fichiers statiques. Les fichiers JS sont \u00e9galement automatiquement minifi\u00e9s.</p> <p>Il peut \u00eatre judicieux de supprimer les anciens fichiers statiques avant de collecter les nouveaux. Pour \u00e7a, ajoutez le flag <code>--clear</code> \u00e0 la commande <code>collectstatic</code> :</p> <pre><code>python ./manage.py collectstatic --clear\n</code></pre> <p>Tip</p> <p>Le dossier o\u00f9 seront enregistr\u00e9s ces fichiers statiques peut \u00eatre chang\u00e9 en modifiant la variable <code>STATIC_ROOT</code> dans les param\u00e8tres.</p>"},{"location":"howto/querysets/","title":"L'ORM de Django","text":"<p>L'ORM de Django est puissant, tr\u00e8s puissant, non par parce qu'il est performant (apr\u00e8s tout, ce n'est qu'une interface, le gros du boulot, c'est la db qui le fait), mais parce qu'il permet d'\u00e9crire de mani\u00e8re relativement simple un grand panel de requ\u00eates.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, puisqu'un ORM est un syst\u00e8me consistant \u00e0 manipuler avec un code orient\u00e9-objet une db relationnelle (c'est-\u00e0-dire deux paradigmes qui ne fonctionnent absolument pas pareil), on rencontre un des deux probl\u00e8mes suivants :</p> <ul> <li>soit l'ORM n'offre pas assez d'abstraction,   auquel cas, quand on veut faire des requ\u00eates   plus complexes qu'un <code>select</code> avec un <code>where</code>,   on s'emm\u00eale les pinceaux et on se dit que   \u00e7a aurait \u00e9t\u00e9 plus simple de le faire directement   en SQL.</li> <li>soit l'ORM offre trop d'abstraction,   auquel cas, on a tendance \u00e0 ne pas pr\u00eater   assez attention aux requ\u00eates envoy\u00e9es en base   de donn\u00e9es et on finit par se rendre compte   que les temps d'attente explosent   parce qu'on envoie trop de requ\u00eates.</li> </ul> <p>Django est dans ce deuxi\u00e8me cas.</p> <p>C'est pourquoi nous ne parlerons pas ici de son fonctionnement exact ni de toutes les fonctions que l'on peut utiliser  (la doc officielle fait d\u00e9j\u00e0 \u00e7a mieux que nous), mais plut\u00f4t des pi\u00e8ges courants et des astuces pour les \u00e9viter.</p>"},{"location":"howto/querysets/#les-n1-queries","title":"Les <code>N+1 queries</code>","text":""},{"location":"howto/querysets/#le-probleme","title":"Le probl\u00e8me","text":"<p>Normalement, quand on veut r\u00e9cup\u00e9rer une liste, on fait une requ\u00eate et c'est fini. Mais des fois, \u00e7a n'est pas si simple. Par exemple, supposons que nous voulons r\u00e9cup\u00e9rer les 100 utilisateurs les plus riches, avec leurs informations client :</p> <pre><code>from core.models import User\n\nfor user in User.objects.order_by(\"-customer__amount\")[:100]:\n    print(user.customer.amount)\n</code></pre> <p>Combien de requ\u00eates le bout de code suivant effectue-t-il ? 101. En deux pauvres lignes de code, nous avons demand\u00e9 \u00e0 la base de donn\u00e9es d'effectuer 101 requ\u00eates. Une requ\u00eate toute seule n'est d\u00e9j\u00e0 une op\u00e9ration anodine, alors je vous laisse imaginer ce que \u00e7a donne pour 101.</p> <p>Si vous ne comprenez pourquoi ce nombre, c'est tr\u00e8s simple :</p> <ul> <li>Une requ\u00eate pour s\u00e9lectionner nos 100 utilisateurs</li> <li>Une requ\u00eate suppl\u00e9mentaire pour r\u00e9cup\u00e9rer les informations   client de chaque utilisateur, soit 100 requ\u00eates.</li> </ul> <p>En effet, les informations client sont stock\u00e9es dans une autre table, mais le fait d'\u00e9tablir un lien de clef \u00e9trang\u00e8re permet de manipuler <code>customer</code> comme si c'\u00e9tait un membre \u00e0 part enti\u00e8re de <code>User</code>.</p> <p>Il est \u00e0 noter cependant, que Django n'effectue une requ\u00eate que pour le premier acc\u00e8s \u00e0 un membre d'une relation de clef \u00e9trang\u00e8re. Toutes les fois suivantes, l'objet est d\u00e9j\u00e0 l\u00e0, et django le r\u00e9cup\u00e8re :</p> <pre><code>from core.models import User\n\n# l'utilisateur le plus riche\nuser = User.objects.order_by(\"-customer__amount\").first()  # &lt;-- requ\u00eate db\nprint(user.customer.amount)  # &lt;-- requ\u00eate db\nprint(user.customer.account_id)  # on a d\u00e9j\u00e0 r\u00e9cup\u00e9r\u00e9 `customer`, donc pas de requ\u00eate\n</code></pre> <p>Ce n'est donc pas gravissime si vous faites cette erreur quand vous manipulez un seul objet. En revanche, quand vous en manipulez plusieurs, il faut r\u00e9gler le probl\u00e8me. Pour \u00e7a, il y a plusieurs m\u00e9thodes, en fonction de votre cas.</p>"},{"location":"howto/querysets/#select_related","title":"<code>select_related</code>","text":"<p>La m\u00e9thode la plus basique consiste \u00e0 annoter le queryset, avec la m\u00e9thode <code>select_related()</code>. En faisant \u00e7a, Django fera une jointure sur l'autre table et demandera des informations en plus \u00e0 la db lors de la requ\u00eate.</p> <p>De la sorte, lorsque vous appellerez le membre reli\u00e9, les informations seront d\u00e9j\u00e0 l\u00e0.</p> <pre><code>from core.models import User\n\nrichest = User.objects.order_by(\"-customer__amount\")\nfor user in richest.select_related(\"customer\")[:100]:\n    print(user.customer)\n</code></pre> <p>Le code ci-dessus effectue une seule requ\u00eate. Chaque fois qu'on veut acc\u00e9der \u00e0 <code>customer</code>, c'est bon, \u00e7a a d\u00e9j\u00e0 \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9 \u00e0 travers le <code>select_related</code>.</p>"},{"location":"howto/querysets/#prefetch_related","title":"<code>prefetch_related</code>","text":"<p>Maintenant, un cas plus compliqu\u00e9. Supposons que vous ne vouliez pas r\u00e9cup\u00e9rer des informations reli\u00e9es par une relation One-to-One, mais par une relation One-to-Many.</p> <p>Par exemple, un utilisateur a un seul compte client, mais il peut avoir plusieurs cotisations \u00e0 son actif. Et dans ces cas-l\u00e0, <code>annotate</code> ne marche plus. En effet, s'il peut exister plusieurs cotisations, comment savoir laquelle on veut ?</p> <p>Il faut alors utiliser un <code>prefetch_related</code>. C'est un m\u00e9canisme un peu diff\u00e9rent : au lieu de faire une jointure et d'ajouter les informations voulues dans la m\u00eame requ\u00eate, Django va effectuer une deuxi\u00e8me requ\u00eate pour r\u00e9cup\u00e9rer les \u00e9l\u00e9ments de l'autre table, puis, \u00e0 partir de ces \u00e9l\u00e9ments, peupler la relation de son c\u00f4t\u00e9.</p> <p>C'est un m\u00e9canisme qui peut \u00eatre un peu co\u00fbteux en m\u00e9moire et qui demande une deuxi\u00e8me requ\u00eate, mais qui reste quand m\u00eame largement pr\u00e9f\u00e9rable \u00e0 faire N requ\u00eates en plus.</p> <pre><code>from core.models import User\n\nfor user in User.objects.prefetch_related(\"subscriptions\")[:100]:\n    # c'est bon, la m\u00e9thode prefetch a r\u00e9cup\u00e9r\u00e9 en avance les `subscriptions`\n    print(user.subscriptions.all())\n</code></pre> <p>Danger</p> <p>La m\u00e9thode <code>prefetch_related</code> ne marche que si vous utilisez la m\u00e9thode <code>all()</code> pour acc\u00e9der au membre. Si vous utilisez une autre m\u00e9thode (comme <code>filter</code> ou <code>annotate</code>), alors Django effectuera une nouvelle requ\u00eate, et vous retomberez dans le probl\u00e8me initial.</p> <pre><code>from core.models import User\nfrom django.db.models import Count\n\nfor user in User.objects.prefetch_related(\"subscriptions\")[:100]:\n    # Le prefetch_related ne marche plus !\n    print(user.subscriptions.annotate(count=Count(\"*\")))\n</code></pre>"},{"location":"howto/querysets/#recuperer-ce-dont-vous-avez-besoin","title":"R\u00e9cup\u00e9rer ce dont vous avez besoin","text":"<p>Des fois (souvent, m\u00eame), penser explicitement \u00e0 la jointure est le meilleur choix.</p> <p>En effet, vous remarquerez que dans tous les exemples pr\u00e9c\u00e9dents, nous n'utilisions qu'une partie des informations  (par exemple, nous ne r\u00e9cup\u00e9rions que la somme d'argent sur les comptes, et \u00e9ventuellement le num\u00e9ro de compte).</p> <p>Nous pouvons utiliser la m\u00e9thode <code>annotate</code> pour sp\u00e9cifier explicitement les donn\u00e9es que l'on veut joindre \u00e0 notre requ\u00eate.</p> <p>Quand nous voulions r\u00e9cup\u00e9rer les informations utilisateur, nous aurions tout aussi bien pu \u00e9crire :</p> <pre><code>from core.models import User\nfrom django.db.models import F\n\nrichest = User.objects.order_by(\"-customer__amount\")\nfor user in richest.annotate(amount=F(\"customer__amount\"))[:100]:\n    print(user.amount)\n</code></pre> <p>On aurait m\u00eame pu r\u00e9organiser \u00e7a : <pre><code>from core.models import User\nfrom django.db.models import F\n\nrichest = User.objects.annotate(amount=F(\"customer__amount\")).order_by(\"-amount\")\nfor user in richest[:100]:\n    print(user.amount)\n</code></pre></p> <p>\u00c7a peut sembler moins bien qu'un <code>select_related</code>, comme \u00e7a. Des fois, c'est en effet moins bien, et des fois c'est mieux. La comparaison est plus \u00e9vidente avec le <code>prefetch_related</code>.</p> <p>En effet, quand nous voulions r\u00e9cup\u00e9rer le nombre de cotisations des utilisateurs, le <code>prefetch_related</code> ne marchait plus. Pourtant, nous voulions r\u00e9cup\u00e9rer une seule information.</p> <p>Il aurait donc \u00e9t\u00e9 suffisant d'\u00e9crire : <pre><code>from core.models import User\nfrom django.db.models import Count\n\nfor user in User.objects.annotate(nb_subscriptions=Count(\"subscriptions\"))[:100]:\n    # Et l\u00e0 \u00e7a marche, en une seule requ\u00eate.\n    print(user.nb_subscriptions)\n</code></pre></p> <p>Faire une jointure, c'est normal en SQL. Et pourtant avec Django on les oublie trop facilement. Posez-vous toujours la question des donn\u00e9es que vous pourriez avoir besoin d'annoter, et vous \u00e9viterez beaucoup d'ennuis.</p>"},{"location":"howto/querysets/#les-aggregations-manquees","title":"Les aggr\u00e9gations manqu\u00e9es","text":"<p>Il arrive souvent que l'on veuille une information qui porte sur un ensemble d'objets de notre db.</p> <p>Imaginons par exemple que nous voulons connaitre la somme totale des ventes faites \u00e0 un comptoir.</p> <p>Nous avons tous suivi nos cours de programmation, nous \u00e9crivons donc instinctivement :</p> <pre><code>from counter.models import Counter\n\nfoyer = Counter.objects.get(name=\"Foyer\")\ntotal_amount = sum(\n    sale.amount * sale.unit_price\n    for sale in foyer.sellings.all()\n)\n</code></pre> <p>On pourrait penser qu'il n'y a pas de probl\u00e8me. Apr\u00e8s tout, on ne fait qu'une seule requ\u00eate. Eh bien si, il y a un probl\u00e8me : on fait beaucoup de choses en trop.</p> <p>Concr\u00e8tement, on demande \u00e0 la base de donn\u00e9es de renvoyer toutes les informations, ce qui rallonge inutilement la dur\u00e9e de l'\u00e9change entre le serveur et la db, puis on perd du temps \u00e0 convertir ces informations en objets Python (op\u00e9ration qui a un co\u00fbt \u00e9galement), et enfin on reperd du temps \u00e0 calculer en Python quelque chose que la db aurait pu calculer \u00e0 notre plus bien plus vite.</p> <p>Nous aurions d\u00fb aggr\u00e9ger la requ\u00eate, avec la m\u00e9thode <code>aggregate</code> :</p> <pre><code>from counter.models import Counter\nfrom django.db.models import Sum, F\n\nfoyer = Counter.objects.get(name=\"Foyer\")\ntotal_amount = (\n    foyer.sellings.aggregate(amount=Sum(F(\"amount\") * F(\"unit_price\"), default=0))\n)[\"amount__sum\"]\n</code></pre> <p>En effectuant cette requ\u00eate, la base de donn\u00e9es nous renverra exactement l'information dont nous avons besoin. Et de notre c\u00f4t\u00e9, nous n'aurons pas \u00e0 faire de traitement en plus.</p>"},{"location":"howto/querysets/#benchmark","title":"Benchmark","text":""},{"location":"howto/querysets/#ce-quil-faut-mesurer","title":"Ce qu'il faut mesurer","text":"<p>Quand on parle d'interaction avec une base de donn\u00e9es, la question de la performance est cruciale. Et quand on parle de performance, on en vient forc\u00e9ment \u00e0 parler d'optimisation.</p> <p>Or, pour optimiser, il faut savoir quoi optimiser. C'est-\u00e0-dire qu'il nous faut un benchmark pour \u00e9tudier les performances r\u00e9elles de notre code. En ce qui concerne des requ\u00eates \u00e0 une base de donn\u00e9es, deux aspects sont \u00e9tudiables :</p> <ul> <li>le nombre de requ\u00eates qu'une vue ou une fonction   effectue pour son fonctionnement.</li> <li>le temps d'ex\u00e9cution individuel des requ\u00eates les plus longues.</li> </ul> <p>Le premier aspect est celui qui nous int\u00e9resse le plus, puisqu'il est reli\u00e9 au probl\u00e8me le plus fr\u00e9quent et le plus facile \u00e0 mesurer. Le second aspect, au contraire, est bien moins fr\u00e9quent (dans 99% des cas, une requ\u00eate complexe prendra moins de temps que deux requ\u00eates, m\u00eame simples) et bien plus dur \u00e0 mesurer (il faut r\u00e9ussir \u00e0 faire des mesures fiables, dans un environnement proche de celui de la prod, avec les donn\u00e9es de la prod).</p> <p>Nous consid\u00e9rerons donc que dans la quasi-totalit\u00e9 des cas, le probl\u00e8me vient du nombre de requ\u00eates, pas du temps d'ex\u00e9cution d'une requ\u00eate en particulier. Partez du principe que moins vous faites de requ\u00eates, mieux c'est, sans pr\u00eater attention au temps d'ex\u00e9cution des requ\u00eates.</p> <p>Pour quantifier de mani\u00e8re fiables les requ\u00eates effectu\u00e9es, il y a quelques outils.</p>"},{"location":"howto/querysets/#django-debug-toolbar","title":"<code>django-debug-toolbar</code>","text":"<p>La <code>django-debug-toolbar</code> est une interface disponible sur toutes les pages quand vous \u00eates en mode debug. Elle s'affiche \u00e0 droite et vous permet de voir toutes sortes d'informations, parmi lesquelles le nombre de requ\u00eates effectu\u00e9es.</p> <p>Cette interface est tr\u00e8s pratique, puisqu'elle va plus loin que simplement compter les requ\u00eates, elle vous donne \u00e9galement le SQL qui a \u00e9t\u00e9 utilis\u00e9, l'endroit du code, avec fichier et num\u00e9ro de ligne, o\u00f9 cette requ\u00eate a \u00e9t\u00e9 faite et, encore mieux, elle vous indique quelles requ\u00eates semblent dupliqu\u00e9es.</p> <p>Quand <code>django-debug-toolbar</code> vous indique qu'une requ\u00eate a \u00e9t\u00e9 dupliqu\u00e9e quatre fois, cinq fois, ou m\u00eame deux cent fois (le chiffre peut sembler \u00e9norme, mais c'est d\u00e9j\u00e0 arriv\u00e9), vous pouvez \u00eatre s\u00fbr qu'il y a l\u00e0 quelque chose \u00e0 optimiser.</p> <p>Warning</p> <p>Le widget de <code>django-debug-toolbar</code> ne s'affiche que sur les pages html. Si vous voulez \u00e9tudier autre chose, comme une simple fonction, ou bien comme une vue retournant du JSON, vous n'aurez donc pas <code>django-debug-toolbar</code>.</p>"},{"location":"howto/querysets/#connectionqueries","title":"<code>connection.queries</code>","text":"<p>Quand vous voulez examiner les requ\u00eates d'un bout de code en particulier, Django met \u00e0 disposition un m\u00e9canisme permettant d'examiner toutes les requ\u00eates qui sont faites : <code>connection.queries</code></p> <p>C'est un historique de toutes les requ\u00eates effectu\u00e9es, qui est assez simple \u00e0 utiliser :</p> <pre><code>from django.db import connection\nfrom core.models import User\n\nprint(len(connection.queries))  # 0\n\nnb_users = User.objects.count()\n\nprint(len(connection.queries))  # 1\nprint(connection.queries)  # affiche toutes les requ\u00eates effectu\u00e9es\n</code></pre>"},{"location":"howto/querysets/#assertnumqueries","title":"<code>assertNumQueries</code>","text":"<p>Quand on a mis en place une fonctionnalit\u00e9, ou qu'on en a am\u00e9lior\u00e9 les performances, on veut absolument \u00e9viter la r\u00e9gression.</p> <p>Or, une r\u00e9gression ne se manifeste pas forc\u00e9ment dans l'apparition d'un bug : \u00e7a peut aussi \u00eatre une augmentation du temps d'ex\u00e9cution, possiblement caus\u00e9 par une augmentation du nombre de requ\u00eates.</p> <p>C'est pour \u00e7a que django met \u00e0 disposition un moyen de tester automatiquement le nombre de requ\u00eates : <code>assertNumQueries</code>.</p> <p>Il s'agit d'un gestionnaire de contexte accessible dans les tests, qui teste le nombre de requ\u00eates effectu\u00e9es en son sein.</p> <p>Par exemple :</p> <pre><code>from django.test import TestCase\nfrom django.shortcuts import reverse\n\n\nclass FooTest(TestCase):\n    def test_nb_queries(self):\n        \"\"\"Test that the number of db queries is stable.\"\"\"\n        with self.assertNumQueries(6):\n            self.client.get(reverse(\"foo:bar\"))\n</code></pre> <p>Si l'ex\u00e9cution de la route n\u00e9cessite plus ou moins de six requ\u00eates, alors le test \u00e9choue. S'il y a eu moins que le nombre de requ\u00eate attendu, alors tant mieux, modifiez le test pour coller au nouveau nombre (sous r\u00e9serve que tous les autres tests passent, bien s\u00fbr). Si par contre il y a eu plus, alors d\u00e9sol\u00e9, vous avez sans doute introduit une r\u00e9gression.</p>"},{"location":"howto/statics/","title":"G\u00e9rer les statics","text":""},{"location":"howto/statics/#cest-quoi-les-fichiers-statics","title":"C'est quoi les fichiers statics ?","text":"<p>Les fichiers statics sont tous les fichiers qui ne sont pas g\u00e9n\u00e9r\u00e9s par le backend Django et qui sont t\u00e9l\u00e9charg\u00e9s par le navigateur. Cela comprend les fichiers css, javascript, images et autre.</p> <p>La documentation officielle est tr\u00e8s compr\u00e9hensive.</p> <p>Pour faire court, dans chaque module d'application il existe un dossier <code>static</code> o\u00f9 mettre tous ces fichiers. Django se d\u00e9brouille ensuite pour aller chercher ce qu'il faut \u00e0 l'int\u00e9rieur.</p> <p>Pour acc\u00e9der \u00e0 un fichier static dans un template Jinja il suffit d'utiliser la fonction <code>static</code>.</p> <pre><code>    {# Exemple pour ajouter sith/core/static/core/base.css #}\n    &lt;link rel=\"stylesheet\" href=\"{{ static('core/base.css') }}\"&gt;\n</code></pre>"},{"location":"howto/statics/#lintegration-des-scss","title":"L'int\u00e9gration des scss","text":"<p>Les scss sont \u00e0 mettre dans le dossier static comme le reste. Il n'y a aucune diff\u00e9rence avec le reste pour les inclure, le syst\u00e8me se d\u00e9brouille automatiquement pour les transformer en <code>.css</code></p> <pre><code>    {# Exemple pour ajouter sith/core/static/core/base.scss #}\n    &lt;link rel=\"stylesheet\" href=\"{{ static('core/style.scss') }}\"&gt;\n</code></pre>"},{"location":"howto/statics/#lintegration-avec-le-bundler-javascript","title":"L'int\u00e9gration avec le bundler javascript","text":"<p>Le bundler javascript est int\u00e9gr\u00e9 un peu diff\u00e9rement. Le principe est tr\u00e8s similaire mais les fichiers sont \u00e0 mettre dans un dossier <code>static/bundled</code> de l'application \u00e0 la place.</p> <p>Pour acc\u00e9der au fichier, il faut utiliser <code>static</code> comme pour le reste mais en ajouter <code>bundled/</code> comme prefix.</p> <pre><code>    {# Example pour ajouter sith/core/bundled/alpine-index.js #}\n    &lt;script type=\"module\" src=\"{{ static('bundled/alpine-index.js') }}\"&gt;&lt;/script&gt;\n    &lt;script type=\"module\" src=\"{{ static('bundled/other-index.ts') }}\"&gt;&lt;/script&gt;\n</code></pre> <p>Note</p> <p>Seuls les fichiers se terminant par <code>index.js</code> sont export\u00e9s par le bundler. Les autres fichiers sont disponibles \u00e0 l'import dans le JavaScript comme si ils \u00e9taient tous au m\u00eame niveau.</p> <p>Warning</p> <p>Le bundler ne g\u00e9n\u00e8re que des modules javascript. Ajouter <code>type=\"module\"</code> n'est pas optionnel !</p>"},{"location":"howto/statics/#les-imports-au-sein-des-fichiers-des-fichiers-javascript-bundles","title":"Les imports au sein des fichiers des fichiers javascript bundl\u00e9s","text":"<p>Pour importer au sein d'un fichier js bundl\u00e9, il faut pr\u00e9fixer ses imports de <code>#app:</code>.</p> <p>Exemple:</p> <pre><code>import { paginated } from \"#core:utils/api\";\n</code></pre>"},{"location":"howto/statics/#comment-ca-fonctionne-le-post-processing","title":"Comment \u00e7a fonctionne le post processing ?","text":"<p>Le post processing est g\u00e9r\u00e9 par le module <code>staticfiles</code>. Les fichiers sont compil\u00e9s \u00e0 la vol\u00e9e en mode d\u00e9veloppement.</p> <p>Pour la production, ils sont compil\u00e9s uniquement lors du <code>./manage.py collectstatic</code>. Les fichiers g\u00e9n\u00e9r\u00e9s sont ajout\u00e9s dans le dossier <code>staticfiles/generated</code>. Celui-ci est ensuite enregistr\u00e9 comme dossier suppl\u00e9mentaire \u00e0 collecter dans Django.</p>"},{"location":"howto/subscriptions/","title":"Ajouter une cotisation","text":""},{"location":"howto/subscriptions/#ajouter-une-nouvelle-cotisation","title":"Ajouter une nouvelle cotisation","text":"<p>Il peut arriver que le type de cotisation propos\u00e9 varie en prix et en dur\u00e9e. Ces param\u00e8tres sont configurables directement dans les param\u00e8tres du projet.</p> <p>Pour modifier les cotisations disponibles,  tout se g\u00e8re dans la configuration avec la variable <code>SITH_SUBSCRIPTIONS</code>.</p> <p>Par exemple, si nous voulons ajouter une nouvelle cotisation d'un mois, voici ce que nous ajouterons :</p> settings.py<pre><code>from django.utils.translation import gettext_lazy as _\n\nSITH_SUBSCRIPTIONS = {\n    # Voici un \u00e9chantillon de la v\u00e9ritable configuration \u00e0 l'heure de l'\u00e9criture.\n    # Celle-ci est donn\u00e9e \u00e0 titre d'exemple pour mieux comprendre comment cela fonctionne.\n    \"un-semestre\": {\"name\": _(\"One semester\"), \"price\": 15, \"duration\": 1},\n    \"deux-semestres\": {\"name\": _(\"Two semesters\"), \"price\": 28, \"duration\": 2},\n    \"cursus-tronc-commun\": {\n        \"name\": _(\"Common core cursus\"),\n        \"price\": 45,\n        \"duration\": 4,\n    },\n    \"cursus-branche\": {\"name\": _(\"Branch cursus\"), \"price\": 45, \"duration\": 6},\n    \"cursus-alternant\": {\"name\": _(\"Alternating cursus\"), \"price\": 30, \"duration\": 6},\n    \"membre-honoraire\": {\"name\": _(\"Honorary member\"), \"price\": 0, \"duration\": 666},\n    \"un-jour\": {\"name\": _(\"One day\"), \"price\": 0, \"duration\": 0.00555333},\n\n    # On rajoute ici notre cotisation\n    # Elle se nomme \"Un mois\"\n    # Co\u00fbte 6\u20ac\n    # Dure 1 mois (on raisonne en semestre, ici, c'est 1/6 de semestre)\n    \"un-mois\": {\"name\": _(\"One month\"), \"price\": 6, \"duration\": 0.166}\n}\n</code></pre> <p>Une fois ceci fait, il faut cr\u00e9er une nouvelle migration :</p> <pre><code>python ./manage.py makemigrations subscription\npython ./manage.py migrate\n</code></pre> <p>N'oubliez pas non plus les traductions (cf. ici)</p>"},{"location":"howto/terminal/","title":"Terminal","text":""},{"location":"howto/terminal/#quel-terminal-utiliser","title":"Quel terminal utiliser ?","text":"<p>Quel que soit votre configuration, si vous avez r\u00e9ussi \u00e0 installer le projet, il y a de fortes chances que bash existe sur votre ordinateur. Certains d'entre vous utilisent peut-\u00eatre un autre shell, comme <code>zsh</code>.</p> <p>En effet, <code>bash</code> est bien, il fait le taff ; mais son ergonomie finit par montrer ses limites. C'est pourquoi il existe des shells plus avanc\u00e9s, qui peuvent am\u00e9liorer l'ergonomie, la compl\u00e9tion des commandes, et l'apparence.  C'est le cas de <code>zsh</code>. Certains vont m\u00eame plus loin et refont carr\u00e9ment la syntaxe. C'est le cas de <code>nu</code>.</p> <p>Pour choisir un terminal, demandez-vous juste quel  est votre usage du terminal :</p> <ul> <li>Si c'est juste quelques commandes basiques et que vous ne voulez pas vous emb\u00eater \u00e0 changer votre configuration, <code>bash</code> convient parfaitement.</li> <li>Si vous commencez \u00e0 utilisez le terminal de mani\u00e8re plus intensive, \u00e0 varier les commandes que vous utilisez et/ou que vous voulez customiser un peu votre exp\u00e9rience, <code>zsh</code> est parfait pour vous.</li> <li>Si vous aimez la programmation fonctionnelle, que vous adorez les pipes et que vous voulez faire des scripts complets mais qui restent lisibles, <code>nu</code> vous plaira \u00e0 coup s\u00fbr.</li> </ul> <p>Note</p> <p>Ce ne sont que des suggestions. Le meilleur choix restera toujours celui avec lequel vous \u00eates le plus confortable.</p>"},{"location":"howto/terminal/#commandes-utiles","title":"Commandes utiles","text":""},{"location":"howto/terminal/#compter-le-nombre-de-lignes-du-projet","title":"Compter le nombre de lignes du projet","text":"bash/zshnu <p><pre><code>sudo apt install cloc\ncloc --exclude-dir=doc,env .\n</code></pre> Ok, c'est de la triche, on installe un package externe. Mais bon, \u00e7a marche, et l'\u00e9quivalent pur bash serait carr\u00e9ment plus moche.</p> <p>Nombre de lignes, group\u00e9 par fichier : <pre><code>ls **/*.py | insert linecount { get name | open | lines | length }\n</code></pre></p> <p>Nombre de lignes total : <pre><code>ls **/*.py | insert linecount { get name | open | lines | length } | math sum\n</code></pre></p> <p>Vous pouvez aussi exlure les lignes vides et les les lignes de commentaire : <pre><code>ls **/*.py |\ninsert linecount {\n    get name |\n    open |\n    lines |\n    each { str trim } |\n    filter { |l| not ($l | str starts-with \"#\") } |  # commentaires\n    filter { |l| ($l | str length) &gt; 0 } |  # lignes vides\n    length\n} |\nmath sum\n</code></pre></p>"},{"location":"howto/translation/","title":"G\u00e9rer les traductions","text":"<p>Le code du site est enti\u00e8rement \u00e9crit en anglais,  le texte affich\u00e9 aux utilisateurs l'est \u00e9galement.  La traduction en fran\u00e7ais se fait  ult\u00e9rieurement avec un fichier de traduction. Voici un petit guide rapide pour apprendre \u00e0 s'en servir.</p>"},{"location":"howto/translation/#dans-le-code-du-logiciel","title":"Dans le code du logiciel","text":"<p>Imaginons que nous souhaitons afficher \"Hello\" et le traduire en fran\u00e7ais. Voici comment signaler que ce mot doit \u00eatre traduit.</p> <p>Si le mot est dans le code Python :</p> <pre><code>from django.utils.translation import gettext as _\n\nhelp_text=_(\"Hello\")\n</code></pre> <p>Si le mot appara\u00eet dans le template Jinja :</p> <pre><code>{% trans %}Hello{% endtrans %}\n</code></pre> <p>Si on est dans un fichier javascript ou typescript :</p> <pre><code>gettext(\"Hello\");\n</code></pre>"},{"location":"howto/translation/#generer-le-fichier-djangopo","title":"G\u00e9n\u00e9rer le fichier django.po","text":"<p>La traduction se fait en trois \u00e9tapes.  Il faut d'abord g\u00e9n\u00e9rer un fichier de traductions, l'\u00e9diter et enfin le compiler au format binaire pour qu'il soit lu par le serveur.</p> <pre><code># Pour le backend\n./manage.py makemessages \\\n  --locale=fr \\\n  -e py,jinja \\\n  --ignore=.venv \\\n  --ignore=node_modules \\\n  --add-location=file \n\n# Pour le frontend\n./manage.py makemessages \\\n  --locale=fr \\\n  -d djangojs \\\n  -e js,ts \\\n  --ignore=.venv \\\n  --ignore=node_modules \\\n  --ignore=staticfiles/generated \\\n  --add-location=file\n</code></pre>"},{"location":"howto/translation/#editer-le-fichier-djangopo","title":"\u00c9diter le fichier django.po","text":"<pre><code># locale/fr/LC_MESSAGES/django.po\n\n# ...\nmsgid \"Hello\"\nmsgstr \"\" # Ligne \u00e0 modifier\n\n# ...\n</code></pre> <p>Note</p> <p>Si les commentaires suivants apparaissent, pensez \u00e0 les supprimer. Ils peuvent g\u00eaner votre traduction.</p> <pre><code>#, fuzzy\n#| msgid \"Bonjour\"\n</code></pre>"},{"location":"howto/translation/#generer-le-fichier-djangomo","title":"G\u00e9n\u00e9rer le fichier django.mo","text":"<p>Il s'agit de la derni\u00e8re \u00e9tape. Un fichier binaire est g\u00e9n\u00e9r\u00e9 \u00e0 partir du fichier django.mo.</p> <pre><code>./manage.py compilemessages\n</code></pre> <p>Tip</p> <p>Pensez \u00e0 red\u00e9marrer le serveur si les traductions ne s'affichent pas</p>"},{"location":"howto/weekmail/","title":"Modifier le weekmail","text":"<p>Le site est capable de g\u00e9n\u00e9rer des mails automatiques contenant l\u2019agr\u00e9gation d'articles \u00e9crits par les administrateurs de clubs. Le contenu est ins\u00e9r\u00e9 dans un template standardis\u00e9 et contr\u00f4l\u00e9 directement dans le code. Il arrive r\u00e9guli\u00e8rement que l'\u00e9quipe communication souhaite modifier ce template. Que ce soient les couleurs, l'agencement ou encore la banni\u00e8re ou le footer, voici tout ce qu'il y a \u00e0 savoir sur le fonctionnement du weekmail en commen\u00e7ant par la classe qui le contr\u00f4le.</p>"},{"location":"howto/weekmail/#modifier-la-banniere-et-le-footer","title":"Modifier la banni\u00e8re et le footer","text":"<p>Ces \u00e9l\u00e9ments sont contr\u00f4l\u00e9s par les m\u00e9thodes <code>get_banner</code> et <code>get_footer</code> de la classe <code>Weekmail</code>.  Les modifier est donc tr\u00e8s simple, il suffit de modifier le contenu de la fonction et de rajouter les nouvelles images dans les statics.</p> <p>Les images sont \u00e0 ajouter dans <code>core/static/com/img</code> et sont \u00e0 nommer selon le type (banner ou footer), le semestre (Automne ou Printemps) et l'ann\u00e9e. Exemple : <code>weekmail_bannerA18.jpg</code> pour la banni\u00e8re de l'automne 2018.</p> <pre><code>from django.conf import settings\nfrom django.templatetags.static import static\n\n# S\u00e9lectionnez le fichier de banni\u00e8re pour le weekmail de l'automne 2018\n\ndef get_banner(self):\n    return \"http://\" + settings.SITH_URL + static(\"com/img/weekmail_bannerA18.jpg\")\n</code></pre> <p>Note</p> <p>Penser \u00e0 prendre les images au format jpg et \u00e0 les compresser un peu, pour qu'elles soient le plus l\u00e9ger possible,  c'est bien mieux pour l'utilisateur final.</p> <p>Warning</p> <p>Pensez \u00e0 laisser les anciennes images dans le dossier  pour que les anciens weekmails ne soient pas affect\u00e9s par les changements.</p>"},{"location":"howto/weekmail/#modifier-le-template","title":"Modifier le template","text":"<p>Il existe deux templates diff\u00e9rents :</p> <ul> <li>Un en texte pur, qui sert pour le rendu d\u00e9grad\u00e9 des lecteurs   de mails ne supportant pas le HTML</li> <li>un qui fait du rendu html.</li> </ul> <p>Ces deux templates sont respectivement accessibles aux emplacements suivants :</p> <ul> <li><code>com/templates/com/weekmail_renderer_html.jinja</code></li> <li><code>com/templates/com/weekmail_renderer_text.jinja</code></li> </ul> <p>Note</p> <p>Pour le rendu HTML, pensez \u00e0 utiliser le CSS et le javascript  le plus simple possible pour que le rendu se fasse correctement dans les clients mails qui sont souvent capricieux.</p> <p>Note</p> <p>Le CSS est inclus statiquement pour que toute modification  ult\u00e9rieure de celui-ci n'affecte pas les versions pr\u00e9c\u00e9demment envoy\u00e9es.</p> <p>Warning</p> <p>Si vous souhaitez ajouter du contenu, n'oubliez pas de bien inclure ce contenu dans les deux templates.</p>"},{"location":"reference/antispam/forms/","title":"Forms","text":""},{"location":"reference/antispam/forms/#antispam.forms.validate_antispam_email","title":"<code>validate_antispam_email = AntiSpamEmailValidator()</code>  <code>module-attribute</code>","text":""},{"location":"reference/antispam/forms/#antispam.forms.ToxicDomain","title":"<code>ToxicDomain</code>","text":"<p>               Bases: <code>Model</code></p> <p>Domain marked as spam in public databases</p>"},{"location":"reference/antispam/forms/#antispam.forms.AntiSpamEmailValidator","title":"<code>AntiSpamEmailValidator</code>","text":"<p>               Bases: <code>EmailValidator</code></p>"},{"location":"reference/antispam/forms/#antispam.forms.AntiSpamEmailField","title":"<code>AntiSpamEmailField</code>","text":"<p>               Bases: <code>EmailField</code></p> <p>An email field that email addresses with a known toxic domain.</p>"},{"location":"reference/antispam/models/","title":"Models","text":""},{"location":"reference/antispam/models/#antispam.models.ToxicDomain","title":"<code>ToxicDomain</code>","text":"<p>               Bases: <code>Model</code></p> <p>Domain marked as spam in public databases</p>"},{"location":"reference/api/auth/","title":"Auth","text":""},{"location":"reference/api/auth/#api.auth.ApiKeyAuth","title":"<code>ApiKeyAuth</code>","text":"<p>               Bases: <code>APIKeyHeader</code></p>"},{"location":"reference/api/hashers/","title":"Hashers","text":""},{"location":"reference/api/hashers/#api.hashers.get_hasher","title":"<code>get_hasher()</code>  <code>cached</code>","text":"Source code in <code>api/hashers.py</code> <pre><code>@functools.cache\ndef get_hasher():\n    return Sha512ApiKeyHasher()\n</code></pre>"},{"location":"reference/api/hashers/#api.hashers.generate_key","title":"<code>generate_key()</code>","text":"<p>Generate a [key, hash] couple.</p> Source code in <code>api/hashers.py</code> <pre><code>def generate_key() -&gt; tuple[str, str]:\n    \"\"\"Generate a [key, hash] couple.\"\"\"\n    # this will result in key with a length of 72\n    key = str(secrets.token_urlsafe(54))\n    hasher = get_hasher()\n    return key, hasher.encode(key)\n</code></pre>"},{"location":"reference/api/models/","title":"Models","text":""},{"location":"reference/api/models/#api.auth.ApiKey","title":"<code>ApiKey</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/api/models/#api.auth.ApiClient","title":"<code>ApiClient</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/api/models/#api.auth.ApiClient.has_perm","title":"<code>has_perm(perm)</code>","text":"<p>Return True if the client has the specified permission.</p> Source code in <code>api/models.py</code> <pre><code>def has_perm(self, perm: str):\n    \"\"\"Return True if the client has the specified permission.\"\"\"\n\n    if self._perm_cache is None:\n        group_permissions = (\n            Permission.objects.filter(group__group__in=self.groups.all())\n            .values_list(\"content_type__app_label\", \"codename\")\n            .order_by()\n        )\n        client_permissions = self.client_permissions.values_list(\n            \"content_type__app_label\", \"codename\"\n        ).order_by()\n        self._perm_cache = {\n            f\"{content_type}.{name}\"\n            for content_type, name in (*group_permissions, *client_permissions)\n        }\n    return perm in self._perm_cache\n</code></pre>"},{"location":"reference/api/models/#api.auth.ApiClient.has_perms","title":"<code>has_perms(perm_list)</code>","text":"<p>Return True if the client has each of the specified permissions. If object is passed, check if the client has all required perms for it.</p> Source code in <code>api/models.py</code> <pre><code>def has_perms(self, perm_list):\n    \"\"\"\n    Return True if the client has each of the specified permissions. If\n    object is passed, check if the client has all required perms for it.\n    \"\"\"\n    if not isinstance(perm_list, Iterable) or isinstance(perm_list, str):\n        raise ValueError(\"perm_list must be an iterable of permissions.\")\n    return all(self.has_perm(perm) for perm in perm_list)\n</code></pre>"},{"location":"reference/api/perms/","title":"Perms","text":"<p>Permission classes to be used within ninja-extra controllers.</p> <p>Some permissions are global (like <code>IsInGroup</code> or <code>IsRoot</code>), and some others are per-object (like <code>CanView</code> or <code>CanEdit</code>).</p> Example <pre><code># restrict all the routes of this controller\n# to subscribed users\n@api_controller(\"/foo\", permissions=[IsSubscriber])\nclass FooController(ControllerBase):\n    @route.get(\"/bar\")\n    def bar_get(self):\n        # This route inherits the permissions of the controller\n        # ...\n\n    @route.bar(\"/bar/{bar_id}\", permissions=[CanView])\n    def bar_get_one(self, bar_id: int):\n        # per-object permission resolution happens\n        # when calling either the `get_object_or_exception`\n        # or `get_object_or_none` method.\n        bar = self.get_object_or_exception(Counter, pk=bar_id)\n\n        # you can also call the `check_object_permission` manually\n        other_bar = Counter.objects.first()\n        self.check_object_permissions(other_bar)\n\n        # ...\n\n    # This route is restricted to counter admins and root users\n    @route.delete(\n        \"/bar/{bar_id}\",\n        permissions=[IsRoot | IsInGroup(settings.SITH_GROUP_COUNTER_ADMIN_ID)\n    ]\n    def bar_delete(self, bar_id: int):\n        # ...\n</code></pre>"},{"location":"reference/api/perms/#api.permissions.CanAccessLookup","title":"<code>CanAccessLookup = IsLoggedInCounter | HasPerm('core.access_lookup')</code>  <code>module-attribute</code>","text":""},{"location":"reference/api/perms/#api.permissions.IsInGroup","title":"<code>IsInGroup(group_pk)</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that the user is in the group whose primary key is given.</p> Source code in <code>api/permissions.py</code> <pre><code>def __init__(self, group_pk: int):\n    self._group_pk = group_pk\n</code></pre>"},{"location":"reference/api/perms/#api.permissions.HasPerm","title":"<code>HasPerm(perms, op=operator.and_)</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that the user has the required perm.</p> <p>If multiple perms are given, a comparer function can also be passed, in order to change the way perms are checked.</p> Example <pre><code>@api_controller(\"/foo\")\nclass FooController(ControllerBase):\n    # this route will require both permissions\n    @route.put(\"/foo\", permissions=[HasPerm([\"foo.change_foo\", \"foo.add_foo\"])]\n    def foo(self): ...\n\n    # This route will require at least one of the perm,\n    # but it's not mandatory to have all of them\n    @route.put(\n        \"/bar\",\n        permissions=[HasPerm([\"foo.change_bar\", \"foo.add_bar\"], op=operator.or_)],\n    )\n    def bar(self): ...\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>perms</code> <code>str | Permission | list[str | Permission]</code> <p>a permission or a list of permissions the user must have</p> required <code>op</code> <code>Callable[[bool, bool], bool]</code> <p>An operator to combine multiple permissions (in most cases, it will be either <code>operator.and_</code> or <code>operator.or_</code>)</p> <code>and_</code> Source code in <code>api/permissions.py</code> <pre><code>def __init__(\n    self,\n    perms: str | Permission | list[str | Permission],\n    op: Callable[[bool, bool], bool] = operator.and_,\n):\n    \"\"\"\n    Args:\n        perms: a permission or a list of permissions the user must have\n        op: An operator to combine multiple permissions (in most cases,\n            it will be either `operator.and_` or `operator.or_`)\n    \"\"\"\n    super().__init__()\n    if not isinstance(perms, (list, tuple, set)):\n        perms = [perms]\n    self._operator = op\n    self._perms = perms\n</code></pre>"},{"location":"reference/api/perms/#api.permissions.IsRoot","title":"<code>IsRoot</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that the user is root.</p>"},{"location":"reference/api/perms/#api.permissions.IsSubscriber","title":"<code>IsSubscriber</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that the user is currently subscribed.</p>"},{"location":"reference/api/perms/#api.permissions.IsOldSubscriber","title":"<code>IsOldSubscriber</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that the user has at least one subscription in its history.</p>"},{"location":"reference/api/perms/#api.permissions.CanView","title":"<code>CanView</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that this user has the permission to view the object of this route.</p> <p>Wrap the <code>user.can_view(obj)</code> method. To see an example, look at the example in the module docstring.</p>"},{"location":"reference/api/perms/#api.permissions.CanEdit","title":"<code>CanEdit</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that this user has the permission to edit the object of this route.</p> <p>Wrap the <code>user.can_edit(obj)</code> method. To see an example, look at the example in the module docstring.</p>"},{"location":"reference/api/perms/#api.permissions.IsOwner","title":"<code>IsOwner</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that this user owns the object of this route.</p> <p>Wrap the <code>user.is_owner(obj)</code> method. To see an example, look at the example in the module docstring.</p>"},{"location":"reference/api/perms/#api.permissions.IsLoggedInCounter","title":"<code>IsLoggedInCounter</code>","text":"<p>               Bases: <code>BasePermission</code></p> <p>Check that a user is logged in a counter.</p>"},{"location":"reference/club/models/","title":"Models","text":""},{"location":"reference/club/models/#club.models.ClubQuerySet","title":"<code>ClubQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/club/models/#club.models.ClubQuerySet.having_board_member","title":"<code>having_board_member(user)</code>","text":"<p>Filter all club in which the given user is a board member.</p> Source code in <code>club/models.py</code> <pre><code>def having_board_member(self, user: User) -&gt; Self:\n    \"\"\"Filter all club in which the given user is a board member.\"\"\"\n    active_memberships = user.memberships.board().ongoing()\n    return self.filter(Exists(active_memberships.filter(club=OuterRef(\"pk\"))))\n</code></pre>"},{"location":"reference/club/models/#club.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/club/models/#club.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/club/models/#club.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/club/models/#club.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/club/models/#club.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/club/models/#club.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/club/models/#club.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/club/models/#club.models.MembershipQuerySet","title":"<code>MembershipQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/club/models/#club.models.MembershipQuerySet.ongoing","title":"<code>ongoing()</code>","text":"<p>Filter all memberships which are not finished yet.</p> Source code in <code>club/models.py</code> <pre><code>def ongoing(self) -&gt; Self:\n    \"\"\"Filter all memberships which are not finished yet.\"\"\"\n    return self.filter(Q(end_date=None) | Q(end_date__gt=localdate()))\n</code></pre>"},{"location":"reference/club/models/#club.models.MembershipQuerySet.board","title":"<code>board()</code>","text":"<p>Filter all memberships where the user is/was in the board.</p> <p>Be aware that users who were in the board in the past are included, even if there are no more members.</p> <p>If you want to get the users who are currently in the board, mind combining this with the :meth:<code>ongoing</code> queryset method</p> Source code in <code>club/models.py</code> <pre><code>def board(self) -&gt; Self:\n    \"\"\"Filter all memberships where the user is/was in the board.\n\n    Be aware that users who were in the board in the past\n    are included, even if there are no more members.\n\n    If you want to get the users who are currently in the board,\n    mind combining this with the :meth:`ongoing` queryset method\n    \"\"\"\n    return self.filter(role__gt=settings.SITH_MAXIMUM_FREE_ROLE)\n</code></pre>"},{"location":"reference/club/models/#club.models.MembershipQuerySet.update","title":"<code>update(**kwargs)</code>","text":"<p>Refresh the cache and edit group ownership.</p> <p>Update the cache, when necessary, remove users from club groups they are no more in and add them in the club groups they should be in.</p> <p>Be aware that this adds three db queries : one to retrieve the updated memberships, one to perform group removal and one to perform group attribution.</p> Source code in <code>club/models.py</code> <pre><code>def update(self, **kwargs) -&gt; int:\n    \"\"\"Refresh the cache and edit group ownership.\n\n    Update the cache, when necessary, remove\n    users from club groups they are no more in\n    and add them in the club groups they should be in.\n\n    Be aware that this adds three db queries :\n    one to retrieve the updated memberships,\n    one to perform group removal and one to perform\n    group attribution.\n    \"\"\"\n    nb_rows = super().update(**kwargs)\n    if nb_rows == 0:\n        # if no row was affected, no need to refresh the cache\n        return 0\n\n    cache_memberships = {}\n    memberships = set(self.select_related(\"club\"))\n    # delete all User-Group relations and recreate the necessary ones\n    # It's more concise to write and more reliable\n    Membership._remove_club_groups(memberships)\n    Membership._add_club_groups(memberships)\n    for member in memberships:\n        cache_key = f\"membership_{member.club_id}_{member.user_id}\"\n        if member.end_date is None:\n            cache_memberships[cache_key] = member\n        else:\n            cache_memberships[cache_key] = \"not_member\"\n    cache.set_many(cache_memberships)\n    return nb_rows\n</code></pre>"},{"location":"reference/club/models/#club.models.MembershipQuerySet.delete","title":"<code>delete()</code>","text":"<p>Work just like the default Django's delete() method, but add a cache invalidation for the elements of the queryset before the deletion, and a removal of the user from the club groups.</p> <p>Be aware that this adds some db queries :</p> <ul> <li>1 to retrieve the deleted elements in order to perform   post-delete operations.   As we can't know if a delete will affect rows or not,   this query will always happen</li> <li>1 query to remove the users from the club groups.   If the delete operation affected no row,   this query won't happen.</li> </ul> Source code in <code>club/models.py</code> <pre><code>def delete(self) -&gt; tuple[int, dict[str, int]]:\n    \"\"\"Work just like the default Django's delete() method,\n    but add a cache invalidation for the elements of the queryset\n    before the deletion,\n    and a removal of the user from the club groups.\n\n    Be aware that this adds some db queries :\n\n    - 1 to retrieve the deleted elements in order to perform\n      post-delete operations.\n      As we can't know if a delete will affect rows or not,\n      this query will always happen\n    - 1 query to remove the users from the club groups.\n      If the delete operation affected no row,\n      this query won't happen.\n    \"\"\"\n    memberships = set(self.all())\n    nb_rows, rows_counts = super().delete()\n    if nb_rows &gt; 0:\n        Membership._remove_club_groups(memberships)\n        cache.set_many(\n            {\n                f\"membership_{m.club_id}_{m.user_id}\": \"not_member\"\n                for m in memberships\n            }\n        )\n    return nb_rows, rows_counts\n</code></pre>"},{"location":"reference/club/models/#club.models.Membership","title":"<code>Membership</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Membership class makes the connection between User and Clubs.</p> Both Users and Clubs can have many Membership objects <ul> <li>a user can be a member of many clubs at a time</li> <li>a club can have many members at a time too</li> </ul> <p>A User is currently member of all the Clubs where its Membership has an end_date set to null/None. Otherwise, it's a past membership kept because it can be very useful to see who was in which Club in the past.</p>"},{"location":"reference/club/models/#club.models.Membership.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/club/models/#club.models.Membership.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Check if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Check if that object can be edited by the given user.\"\"\"\n    if user.is_root or user.is_board_member:\n        return True\n    membership = self.club.get_membership_for(user)\n    return membership is not None and membership.role &gt;= self.role\n</code></pre>"},{"location":"reference/club/models/#club.models.Mailing","title":"<code>Mailing</code>","text":"<p>               Bases: <code>Model</code></p> <p>A Mailing list for a club.</p> Warning <p>Remember that mailing lists should be validated by UTBM.</p>"},{"location":"reference/club/models/#club.models.MailingSubscription","title":"<code>MailingSubscription</code>","text":"<p>               Bases: <code>Model</code></p> <p>Link between user and mailing list.</p>"},{"location":"reference/club/views/","title":"Views","text":""},{"location":"reference/club/views/#club.views.ClubAdminEditForm","title":"<code>ClubAdminEditForm</code>","text":"<p>               Bases: <code>ClubEditForm</code></p>"},{"location":"reference/club/views/#club.views.ClubEditForm","title":"<code>ClubEditForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/club/views/#club.views.ClubMemberForm","title":"<code>ClubMemberForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> <p>Form handling the members of a club.</p> Source code in <code>club/forms.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.club = kwargs.pop(\"club\")\n    self.request_user = kwargs.pop(\"request_user\")\n    self.club_members = kwargs.pop(\"club_members\", None)\n    if not self.club_members:\n        self.club_members = self.club.members.ongoing().order_by(\"-role\").all()\n    self.request_user_membership = self.club.get_membership_for(self.request_user)\n    super().__init__(*args, **kwargs)\n\n    # Using a ModelForm binds too much the form with the model and we don't want that\n    # We want the view to process the model creation since they are multiple users\n    # We also want the form to handle bulk deletion\n    self.fields.update(\n        forms.fields_for_model(\n            Membership,\n            fields=(\"role\", \"start_date\", \"description\"),\n            widgets={\"start_date\": SelectDate},\n        )\n    )\n\n    # Role is required only if users is specified\n    self.fields[\"role\"].required = False\n\n    # Start date and description are never really required\n    self.fields[\"start_date\"].required = False\n    self.fields[\"description\"].required = False\n\n    self.fields[\"users_old\"] = forms.ModelMultipleChoiceField(\n        User.objects.filter(\n            id__in=[\n                ms.user.id\n                for ms in self.club_members\n                if ms.can_be_edited_by(self.request_user)\n            ]\n        ).all(),\n        label=_(\"Mark as old\"),\n        required=False,\n        widget=forms.CheckboxSelectMultiple,\n    )\n    if not self.request_user.is_root:\n        self.fields.pop(\"start_date\")\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubMemberForm.clean_users","title":"<code>clean_users()</code>","text":"<p>Check that the user is not trying to add an user already in the club.</p> <p>Also check that the user is valid and has a valid subscription.</p> Source code in <code>club/forms.py</code> <pre><code>def clean_users(self):\n    \"\"\"Check that the user is not trying to add an user already in the club.\n\n    Also check that the user is valid and has a valid subscription.\n    \"\"\"\n    cleaned_data = super().clean()\n    users = []\n    for user in cleaned_data[\"users\"]:\n        if not user.is_subscribed:\n            raise forms.ValidationError(\n                _(\"User must be subscriber to take part to a club\"), code=\"invalid\"\n            )\n        if self.club.get_membership_for(user):\n            raise forms.ValidationError(\n                _(\"You can not add the same user twice\"), code=\"invalid\"\n            )\n        users.append(user)\n    return users\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubMemberForm.clean","title":"<code>clean()</code>","text":"<p>Check user rights for adding an user.</p> Source code in <code>club/forms.py</code> <pre><code>def clean(self):\n    \"\"\"Check user rights for adding an user.\"\"\"\n    cleaned_data = super().clean()\n\n    if \"start_date\" in cleaned_data and not cleaned_data[\"start_date\"]:\n        # Drop start_date if allowed to edition but not specified\n        cleaned_data.pop(\"start_date\")\n\n    if not cleaned_data.get(\"users\"):\n        # No user to add equals no check needed\n        return cleaned_data\n\n    if cleaned_data.get(\"role\", \"\") == \"\":\n        # Role is required if users exists\n        self.add_error(\"role\", _(\"You should specify a role\"))\n        return cleaned_data\n\n    request_user = self.request_user\n    membership = self.request_user_membership\n    if not (\n        cleaned_data[\"role\"] &lt;= settings.SITH_MAXIMUM_FREE_ROLE\n        or (membership is not None and membership.role &gt;= cleaned_data[\"role\"])\n        or request_user.is_board_member\n        or request_user.is_root\n    ):\n        raise forms.ValidationError(_(\"You do not have the permission to do that\"))\n    return cleaned_data\n</code></pre>"},{"location":"reference/club/views/#club.views.MailingForm","title":"<code>MailingForm(club_id, user_id, mailings, *args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> <p>Form handling mailing lists right.</p> Source code in <code>club/forms.py</code> <pre><code>def __init__(self, club_id, user_id, mailings, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    self.fields[\"action\"] = forms.TypedChoiceField(\n        choices=(\n            (self.ACTION_NEW_MAILING, _(\"New Mailing\")),\n            (self.ACTION_NEW_SUBSCRIPTION, _(\"Subscribe\")),\n            (self.ACTION_REMOVE_SUBSCRIPTION, _(\"Remove\")),\n        ),\n        coerce=int,\n        label=_(\"Action\"),\n        initial=1,\n        required=True,\n        widget=forms.HiddenInput(),\n    )\n\n    # Generate bulk removal forms, they are never required\n    for mailing in mailings:\n        self.fields[\"removal_\" + str(mailing.id)] = forms.ModelMultipleChoiceField(\n            mailing.subscriptions.all(),\n            label=_(\"Remove\"),\n            required=False,\n            widget=forms.CheckboxSelectMultiple,\n        )\n\n    # Include fields for handling mailing creation\n    mailing_fields = (\"email\",)\n    self.fields.update(forms.fields_for_model(Mailing, fields=mailing_fields))\n    for field in mailing_fields:\n        self.fields[\"mailing_\" + field] = self.fields.pop(field)\n        self.fields[\"mailing_\" + field].required = False\n\n    # Include fields for handling subscription creation\n    subscription_fields = (\"mailing\", \"email\")\n    self.fields.update(\n        forms.fields_for_model(MailingSubscription, fields=subscription_fields)\n    )\n    for field in subscription_fields:\n        self.fields[\"subscription_\" + field] = self.fields.pop(field)\n        self.fields[\"subscription_\" + field].required = False\n\n    self.fields[\"subscription_mailing\"].queryset = Mailing.objects.filter(\n        club__id=club_id, is_moderated=True\n    )\n</code></pre>"},{"location":"reference/club/views/#club.views.MailingForm.check_required","title":"<code>check_required(cleaned_data, field)</code>","text":"<p>If the given field doesn't exist or has no value, add a required error on it.</p> Source code in <code>club/forms.py</code> <pre><code>def check_required(self, cleaned_data, field):\n    \"\"\"If the given field doesn't exist or has no value, add a required error on it.\"\"\"\n    if not cleaned_data.get(field, None):\n        self.add_error(field, _(\"This field is required\"))\n</code></pre>"},{"location":"reference/club/views/#club.views.MailingForm.clean_subscription_users","title":"<code>clean_subscription_users()</code>","text":"<p>Convert given users into real users and check their validity.</p> Source code in <code>club/forms.py</code> <pre><code>def clean_subscription_users(self):\n    \"\"\"Convert given users into real users and check their validity.\"\"\"\n    cleaned_data = super().clean()\n    users = []\n    for user in cleaned_data[\"subscription_users\"]:\n        if not user.email:\n            raise forms.ValidationError(\n                _(\"One of the selected users doesn't have an email address\"),\n                code=\"invalid\",\n            )\n        users.append(user)\n    return users\n</code></pre>"},{"location":"reference/club/views/#club.views.SellingsForm","title":"<code>SellingsForm(club, *args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> Source code in <code>club/forms.py</code> <pre><code>def __init__(self, club, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    # postgres struggles really hard with a single query having three WHERE conditions,\n    # but deals perfectly fine with UNION of multiple queryset with their own WHERE clause,\n    # so we do this to get the ids, which we use to build another queryset that can be used by django.\n    club_sales_subquery = Selling.objects.filter(counter=OuterRef(\"pk\"), club=club)\n    ids = (\n        Counter.objects.filter(Q(club=club) | Q(products__club=club))\n        .union(Counter.objects.filter(Exists(club_sales_subquery)))\n        .values_list(\"id\", flat=True)\n    )\n    counters_qs = Counter.objects.filter(id__in=ids).order_by(Lower(\"name\"))\n    self.fields[\"counters\"] = forms.ModelMultipleChoiceField(\n        counters_qs, label=_(\"Counter\"), required=False\n    )\n    self.fields[\"products\"] = forms.ModelMultipleChoiceField(\n        club.products.order_by(\"name\").filter(archived=False).all(),\n        label=_(\"Products\"),\n        required=False,\n    )\n    self.fields[\"archived_products\"] = forms.ModelMultipleChoiceField(\n        club.products.order_by(\"name\").filter(archived=True).all(),\n        label=_(\"Archived products\"),\n        required=False,\n    )\n</code></pre>"},{"location":"reference/club/views/#club.views.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/club/views/#club.views.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/club/views/#club.views.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/club/views/#club.views.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/club/views/#club.views.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/club/views/#club.views.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/club/views/#club.views.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/club/views/#club.views.Mailing","title":"<code>Mailing</code>","text":"<p>               Bases: <code>Model</code></p> <p>A Mailing list for a club.</p> Warning <p>Remember that mailing lists should be validated by UTBM.</p>"},{"location":"reference/club/views/#club.views.MailingSubscription","title":"<code>MailingSubscription</code>","text":"<p>               Bases: <code>Model</code></p> <p>Link between user and mailing list.</p>"},{"location":"reference/club/views/#club.views.Membership","title":"<code>Membership</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Membership class makes the connection between User and Clubs.</p> Both Users and Clubs can have many Membership objects <ul> <li>a user can be a member of many clubs at a time</li> <li>a club can have many members at a time too</li> </ul> <p>A User is currently member of all the Clubs where its Membership has an end_date set to null/None. Otherwise, it's a past membership kept because it can be very useful to see who was in which Club in the past.</p>"},{"location":"reference/club/views/#club.views.Membership.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/club/views/#club.views.Membership.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Check if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Check if that object can be edited by the given user.\"\"\"\n    if user.is_root or user.is_board_member:\n        return True\n    membership = self.club.get_membership_for(user)\n    return membership is not None and membership.role &gt;= self.role\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubTabsMixin","title":"<code>ClubTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/club/views/#club.views.ClubListView","title":"<code>ClubListView</code>","text":"<p>               Bases: <code>ListView</code></p> <p>List the Clubs.</p>"},{"location":"reference/club/views/#club.views.ClubView","title":"<code>ClubView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>DetailView</code></p> <p>Front page of a Club.</p>"},{"location":"reference/club/views/#club.views.ClubRevView","title":"<code>ClubRevView</code>","text":"<p>               Bases: <code>ClubView</code></p> <p>Display a specific page revision.</p>"},{"location":"reference/club/views/#club.views.ClubPageEditView","title":"<code>ClubPageEditView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>PageEditViewBase</code></p>"},{"location":"reference/club/views/#club.views.ClubPageHistView","title":"<code>ClubPageHistView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Modification hostory of the page.</p>"},{"location":"reference/club/views/#club.views.ClubToolsView","title":"<code>ClubToolsView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanEditMixin</code>, <code>DetailView</code></p> <p>Tools page of a Club.</p>"},{"location":"reference/club/views/#club.views.ClubMembersView","title":"<code>ClubMembersView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailFormView</code></p> <p>View of a club's members.</p>"},{"location":"reference/club/views/#club.views.ClubMembersView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Check user rights.</p> Source code in <code>club/views.py</code> <pre><code>def form_valid(self, form):\n    \"\"\"Check user rights.\"\"\"\n    resp = super().form_valid(form)\n\n    data = form.clean()\n    users = data.pop(\"users\", [])\n    users_old = data.pop(\"users_old\", [])\n    for user in users:\n        Membership(club=self.object, user=user, **data).save()\n    for user in users_old:\n        membership = self.object.get_membership_for(user)\n        membership.end_date = timezone.now()\n        membership.save()\n    return resp\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubOldMembersView","title":"<code>ClubOldMembersView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Old members of a club.</p>"},{"location":"reference/club/views/#club.views.ClubSellingView","title":"<code>ClubSellingView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanEditMixin</code>, <code>DetailFormView</code></p> <p>Sellings of a club.</p>"},{"location":"reference/club/views/#club.views.ClubSellingCSVView","title":"<code>ClubSellingCSVView</code>","text":"<p>               Bases: <code>ClubSellingView</code></p> <p>Generate sellings in csv for a given period.</p>"},{"location":"reference/club/views/#club.views.ClubSellingCSVView.StreamWriter","title":"<code>StreamWriter</code>","text":"<p>Implements a file-like interface for streaming the CSV.</p>"},{"location":"reference/club/views/#club.views.ClubSellingCSVView.StreamWriter.write","title":"<code>write(value)</code>","text":"<p>Write the value by returning it, instead of storing in a buffer.</p> Source code in <code>club/views.py</code> <pre><code>def write(self, value):\n    \"\"\"Write the value by returning it, instead of storing in a buffer.\"\"\"\n    return value\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubEditView","title":"<code>ClubEditView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanEditMixin</code>, <code>UpdateView</code></p> <p>Edit a Club.</p> <p>Regular club board members will be able to edit the main infos (like the logo and the description). Admins will also be able to edit the club properties (like the name and the parent club).</p>"},{"location":"reference/club/views/#club.views.ClubCreateView","title":"<code>ClubCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>Create a club (for the Sith admin).</p>"},{"location":"reference/club/views/#club.views.MembershipSetOldView","title":"<code>MembershipSetOldView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DetailView</code></p> <p>Set a membership as beeing old.</p>"},{"location":"reference/club/views/#club.views.MembershipDeleteView","title":"<code>MembershipDeleteView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>Delete a membership (for admins only).</p>"},{"location":"reference/club/views/#club.views.ClubMailingView","title":"<code>ClubMailingView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>CanEditMixin</code>, <code>DetailFormView</code></p> <p>A list of mailing for a given club.</p>"},{"location":"reference/club/views/#club.views.ClubMailingView.add_new_mailing","title":"<code>add_new_mailing(cleaned_data)</code>","text":"<p>Create a new mailing list from the form.</p> Source code in <code>club/views.py</code> <pre><code>def add_new_mailing(self, cleaned_data) -&gt; ValidationError | None:\n    \"\"\"Create a new mailing list from the form.\"\"\"\n    mailing = Mailing(\n        club=self.object,\n        email=cleaned_data[\"mailing_email\"],\n        moderator=self.request.user,\n        is_moderated=False,\n    )\n    try:\n        mailing.clean()\n    except ValidationError as validation_error:\n        return validation_error\n    mailing.save()\n    return None\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubMailingView.add_new_subscription","title":"<code>add_new_subscription(cleaned_data)</code>","text":"<p>Add mailing subscriptions for each user given and/or for the specified email in form.</p> Source code in <code>club/views.py</code> <pre><code>def add_new_subscription(self, cleaned_data) -&gt; ValidationError | None:\n    \"\"\"Add mailing subscriptions for each user given and/or for the specified email in form.\"\"\"\n    users_to_save = []\n\n    for user in cleaned_data[\"subscription_users\"]:\n        sub = MailingSubscription(\n            mailing=cleaned_data[\"subscription_mailing\"], user=user\n        )\n        try:\n            sub.clean()\n        except ValidationError as validation_error:\n            return validation_error\n\n        sub.save()\n        users_to_save.append(sub)\n\n    if cleaned_data[\"subscription_email\"]:\n        sub = MailingSubscription(\n            mailing=cleaned_data[\"subscription_mailing\"],\n            email=cleaned_data[\"subscription_email\"],\n        )\n\n    try:\n        sub.clean()\n    except ValidationError as validation_error:\n        return validation_error\n    sub.save()\n\n    # Save users after we are sure there is no error\n    for user in users_to_save:\n        user.save()\n\n    return None\n</code></pre>"},{"location":"reference/club/views/#club.views.ClubMailingView.remove_subscription","title":"<code>remove_subscription(cleaned_data)</code>","text":"<p>Remove specified users from a mailing list.</p> Source code in <code>club/views.py</code> <pre><code>def remove_subscription(self, cleaned_data):\n    \"\"\"Remove specified users from a mailing list.\"\"\"\n    fields = [\n        val for key, val in cleaned_data.items() if key.startswith(\"removal_\")\n    ]\n    for field in fields:\n        for sub in field:\n            sub.delete()\n</code></pre>"},{"location":"reference/club/views/#club.views.MailingDeleteView","title":"<code>MailingDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/club/views/#club.views.MailingSubscriptionDeleteView","title":"<code>MailingSubscriptionDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/club/views/#club.views.MailingAutoGenerationView","title":"<code>MailingAutoGenerationView</code>","text":"<p>               Bases: <code>View</code></p>"},{"location":"reference/club/views/#club.views.PosterListView","title":"<code>PosterListView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>PosterListBaseView</code></p> <p>List communication posters.</p>"},{"location":"reference/club/views/#club.views.PosterCreateView","title":"<code>PosterCreateView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>PosterCreateBaseView</code></p> <p>Create communication poster.</p>"},{"location":"reference/club/views/#club.views.PosterEditView","title":"<code>PosterEditView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>PosterEditBaseView</code></p> <p>Edit communication poster.</p>"},{"location":"reference/club/views/#club.views.PosterDeleteView","title":"<code>PosterDeleteView</code>","text":"<p>               Bases: <code>ClubTabsMixin</code>, <code>PosterDeleteBaseView</code></p> <p>Delete communication poster.</p>"},{"location":"reference/com/models/","title":"Models","text":""},{"location":"reference/com/models/#com.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/com/models/#com.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/com/models/#com.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/com/models/#com.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/com/models/#com.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/com/models/#com.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/com/models/#com.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/com/models/#com.models.Sith","title":"<code>Sith</code>","text":"<p>               Bases: <code>Model</code></p> <p>A one instance class storing all the modifiable infos.</p>"},{"location":"reference/com/models/#com.models.NewsQuerySet","title":"<code>NewsQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/com/models/#com.models.NewsQuerySet.waiting_moderation","title":"<code>waiting_moderation()</code>","text":"<p>Filter all non-finished non-published news</p> Source code in <code>com/models.py</code> <pre><code>def waiting_moderation(self) -&gt; Self:\n    \"\"\"Filter all non-finished non-published news\"\"\"\n    # Because of the way News and NewsDates are created,\n    # there may be some cases where this method is called before\n    # the NewsDates linked to a Date are actually persisted in db.\n    # Thus, it's important to filter by \"not past date\" rather than by \"future date\"\n    return self.filter(~Q(dates__start_date__lt=timezone.now()), is_published=False)\n</code></pre>"},{"location":"reference/com/models/#com.models.NewsQuerySet.viewable_by","title":"<code>viewable_by(user)</code>","text":"<p>Filter news that the given user can view.</p> <p>If the user has the <code>com.view_unmoderated_news</code> permission, all news are viewable. Else the viewable news are those that are either moderated or authored by the user.</p> Source code in <code>com/models.py</code> <pre><code>def viewable_by(self, user: User) -&gt; Self:\n    \"\"\"Filter news that the given user can view.\n\n    If the user has the `com.view_unmoderated_news` permission,\n    all news are viewable.\n    Else the viewable news are those that are either moderated\n    or authored by the user.\n    \"\"\"\n    if user.has_perm(\"com.view_unmoderated_news\"):\n        return self\n    q_filter = Q(is_published=True)\n    if user.is_authenticated:\n        q_filter |= Q(author_id=user.id)\n    return self.filter(q_filter)\n</code></pre>"},{"location":"reference/com/models/#com.models.News","title":"<code>News</code>","text":"<p>               Bases: <code>Model</code></p> <p>News about club events.</p>"},{"location":"reference/com/models/#com.models.NewsDateQuerySet","title":"<code>NewsDateQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/com/models/#com.models.NewsDateQuerySet.viewable_by","title":"<code>viewable_by(user)</code>","text":"<p>Filter the event dates that the given user can view.</p> <ul> <li>If the can view non moderated news, he can view all news dates</li> <li>else, he can view the dates of news that are either   authored by him or moderated.</li> </ul> Source code in <code>com/models.py</code> <pre><code>def viewable_by(self, user: User) -&gt; Self:\n    \"\"\"Filter the event dates that the given user can view.\n\n    - If the can view non moderated news, he can view all news dates\n    - else, he can view the dates of news that are either\n      authored by him or moderated.\n    \"\"\"\n    if user.has_perm(\"com.view_unmoderated_news\"):\n        return self\n    q_filter = Q(news__is_published=True)\n    if user.is_authenticated:\n        q_filter |= Q(news__author_id=user.id)\n    return self.filter(q_filter)\n</code></pre>"},{"location":"reference/com/models/#com.models.NewsDate","title":"<code>NewsDate</code>","text":"<p>               Bases: <code>Model</code></p> <p>A date associated with news.</p> <p>A News can have multiple dates, for example if it is a recurring event.</p>"},{"location":"reference/com/models/#com.models.Weekmail","title":"<code>Weekmail</code>","text":"<p>               Bases: <code>Model</code></p> <p>The weekmail class.</p> <p>:ivar title: Title of the weekmail :ivar intro: Introduction of the weekmail :ivar joke: Joke of the week :ivar protip: Tip of the week :ivar conclusion: Conclusion of the weekmail :ivar sent: Track if the weekmail has been sent</p>"},{"location":"reference/com/models/#com.models.Weekmail.send","title":"<code>send()</code>","text":"<p>Send the weekmail to all users with the receive weekmail option opt-in.</p> <p>Also send the weekmail to the mailing list in settings.SITH_COM_EMAIL.</p> Source code in <code>com/models.py</code> <pre><code>def send(self):\n    \"\"\"Send the weekmail to all users with the receive weekmail option opt-in.\n\n    Also send the weekmail to the mailing list in settings.SITH_COM_EMAIL.\n    \"\"\"\n    dest = [\n        i[0]\n        for i in Preferences.objects.filter(receive_weekmail=True).values_list(\n            \"user__email\"\n        )\n    ]\n    with transaction.atomic():\n        email = EmailMultiAlternatives(\n            subject=self.title,\n            body=self.render_text(),\n            from_email=settings.SITH_COM_EMAIL,\n            to=Sith.objects.first().weekmail_destinations.split(\" \"),\n            bcc=dest,\n        )\n        email.attach_alternative(self.render_html(), \"text/html\")\n        email.send()\n        self.sent = True\n        self.save()\n        Weekmail().save()\n</code></pre>"},{"location":"reference/com/models/#com.models.Weekmail.render_text","title":"<code>render_text()</code>","text":"<p>Renders a pure text version of the mail for readers without HTML support.</p> Source code in <code>com/models.py</code> <pre><code>def render_text(self):\n    \"\"\"Renders a pure text version of the mail for readers without HTML support.\"\"\"\n    return render(\n        None, \"com/weekmail_renderer_text.jinja\", context={\"weekmail\": self}\n    ).content.decode(\"utf-8\")\n</code></pre>"},{"location":"reference/com/models/#com.models.Weekmail.render_html","title":"<code>render_html()</code>","text":"<p>Renders an HTML version of the mail with images and fancy CSS.</p> Source code in <code>com/models.py</code> <pre><code>def render_html(self):\n    \"\"\"Renders an HTML version of the mail with images and fancy CSS.\"\"\"\n    return render(\n        None, \"com/weekmail_renderer_html.jinja\", context={\"weekmail\": self}\n    ).content.decode(\"utf-8\")\n</code></pre>"},{"location":"reference/com/models/#com.models.Weekmail.get_banner","title":"<code>get_banner()</code>","text":"<p>Return an absolute link to the banner.</p> Source code in <code>com/models.py</code> <pre><code>def get_banner(self):\n    \"\"\"Return an absolute link to the banner.\"\"\"\n    return (\n        \"http://\" + settings.SITH_URL + static(\"com/img/weekmail_bannerV2P22.png\")\n    )\n</code></pre>"},{"location":"reference/com/models/#com.models.Weekmail.get_footer","title":"<code>get_footer()</code>","text":"<p>Return an absolute link to the footer.</p> Source code in <code>com/models.py</code> <pre><code>def get_footer(self):\n    \"\"\"Return an absolute link to the footer.\"\"\"\n    return \"http://\" + settings.SITH_URL + static(\"com/img/weekmail_footerP22.png\")\n</code></pre>"},{"location":"reference/com/models/#com.models.WeekmailArticle","title":"<code>WeekmailArticle</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/models/#com.models.Screen","title":"<code>Screen</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/models/#com.models.Poster","title":"<code>Poster</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/views/","title":"Views","text":""},{"location":"reference/com/views/#com.views.sith","title":"<code>sith = Sith.objects.first</code>  <code>module-attribute</code>","text":""},{"location":"reference/com/views/#com.views.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/com/views/#com.views.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/com/views/#com.views.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/com/views/#com.views.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/com/views/#com.views.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/com/views/#com.views.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/com/views/#com.views.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/com/views/#com.views.Mailing","title":"<code>Mailing</code>","text":"<p>               Bases: <code>Model</code></p> <p>A Mailing list for a club.</p> Warning <p>Remember that mailing lists should be validated by UTBM.</p>"},{"location":"reference/com/views/#com.views.NewsDateForm","title":"<code>NewsDateForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form to select the dates of an event.</p> Source code in <code>com/forms.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.label_suffix = \"\"\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsDateForm.get_occurrences","title":"<code>get_occurrences(number)</code>  <code>classmethod</code>","text":"<p>Find the occurrence choice corresponding to numeric number of occurrences.</p> Source code in <code>com/forms.py</code> <pre><code>@classmethod\ndef get_occurrences(cls, number: int) -&gt; tuple[str, str] | None:\n    \"\"\"Find the occurrence choice corresponding to numeric number of occurrences.\"\"\"\n    if number &lt; 2:\n        # If only 0 or 1 date, there cannot be weekly events\n        return None\n    # occurrences have all a numeric value, except \"SEMESTER_END\"\n    str_num = str(number)\n    occurrences = next((c for c in cls.occurrence_choices if c[0] == str_num), None)\n    if occurrences:\n        return occurrences\n    return next((c for c in cls.occurrence_choices if c[0] == \"SEMESTER_END\"), None)\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsForm","title":"<code>NewsForm(*args, author, date_form, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form to create or edit news.</p> Source code in <code>com/forms.py</code> <pre><code>def __init__(self, *args, author: User, date_form: NewsDateForm, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.author = author\n    self.date_form = date_form\n    self.label_suffix = \"\"\n    # if the author is an admin, he/she can choose any club,\n    # otherwise, only clubs for which he/she is a board member can be selected\n    if author.is_root or author.is_com_admin:\n        self.fields[\"club\"].widget = AutoCompleteSelectClub()\n    else:\n        self.fields[\"club\"].queryset = Club.objects.having_board_member(author)\n</code></pre>"},{"location":"reference/com/views/#com.views.PosterForm","title":"<code>PosterForm(*args, user, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> Source code in <code>com/forms.py</code> <pre><code>def __init__(self, *args, user: User, **kwargs):\n    super().__init__(*args, **kwargs)\n    if user.is_root or user.is_com_admin:\n        self.fields[\"club\"].widget = AutoCompleteSelectClub()\n    else:\n        self.fields[\"club\"].queryset = Club.objects.having_board_member(user)\n</code></pre>"},{"location":"reference/com/views/#com.views.IcsCalendar","title":"<code>IcsCalendar</code>","text":""},{"location":"reference/com/views/#com.views.News","title":"<code>News</code>","text":"<p>               Bases: <code>Model</code></p> <p>News about club events.</p>"},{"location":"reference/com/views/#com.views.NewsDate","title":"<code>NewsDate</code>","text":"<p>               Bases: <code>Model</code></p> <p>A date associated with news.</p> <p>A News can have multiple dates, for example if it is a recurring event.</p>"},{"location":"reference/com/views/#com.views.Poster","title":"<code>Poster</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/views/#com.views.Screen","title":"<code>Screen</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/views/#com.views.Sith","title":"<code>Sith</code>","text":"<p>               Bases: <code>Model</code></p> <p>A one instance class storing all the modifiable infos.</p>"},{"location":"reference/com/views/#com.views.Weekmail","title":"<code>Weekmail</code>","text":"<p>               Bases: <code>Model</code></p> <p>The weekmail class.</p> <p>:ivar title: Title of the weekmail :ivar intro: Introduction of the weekmail :ivar joke: Joke of the week :ivar protip: Tip of the week :ivar conclusion: Conclusion of the weekmail :ivar sent: Track if the weekmail has been sent</p>"},{"location":"reference/com/views/#com.views.Weekmail.send","title":"<code>send()</code>","text":"<p>Send the weekmail to all users with the receive weekmail option opt-in.</p> <p>Also send the weekmail to the mailing list in settings.SITH_COM_EMAIL.</p> Source code in <code>com/models.py</code> <pre><code>def send(self):\n    \"\"\"Send the weekmail to all users with the receive weekmail option opt-in.\n\n    Also send the weekmail to the mailing list in settings.SITH_COM_EMAIL.\n    \"\"\"\n    dest = [\n        i[0]\n        for i in Preferences.objects.filter(receive_weekmail=True).values_list(\n            \"user__email\"\n        )\n    ]\n    with transaction.atomic():\n        email = EmailMultiAlternatives(\n            subject=self.title,\n            body=self.render_text(),\n            from_email=settings.SITH_COM_EMAIL,\n            to=Sith.objects.first().weekmail_destinations.split(\" \"),\n            bcc=dest,\n        )\n        email.attach_alternative(self.render_html(), \"text/html\")\n        email.send()\n        self.sent = True\n        self.save()\n        Weekmail().save()\n</code></pre>"},{"location":"reference/com/views/#com.views.Weekmail.render_text","title":"<code>render_text()</code>","text":"<p>Renders a pure text version of the mail for readers without HTML support.</p> Source code in <code>com/models.py</code> <pre><code>def render_text(self):\n    \"\"\"Renders a pure text version of the mail for readers without HTML support.\"\"\"\n    return render(\n        None, \"com/weekmail_renderer_text.jinja\", context={\"weekmail\": self}\n    ).content.decode(\"utf-8\")\n</code></pre>"},{"location":"reference/com/views/#com.views.Weekmail.render_html","title":"<code>render_html()</code>","text":"<p>Renders an HTML version of the mail with images and fancy CSS.</p> Source code in <code>com/models.py</code> <pre><code>def render_html(self):\n    \"\"\"Renders an HTML version of the mail with images and fancy CSS.\"\"\"\n    return render(\n        None, \"com/weekmail_renderer_html.jinja\", context={\"weekmail\": self}\n    ).content.decode(\"utf-8\")\n</code></pre>"},{"location":"reference/com/views/#com.views.Weekmail.get_banner","title":"<code>get_banner()</code>","text":"<p>Return an absolute link to the banner.</p> Source code in <code>com/models.py</code> <pre><code>def get_banner(self):\n    \"\"\"Return an absolute link to the banner.\"\"\"\n    return (\n        \"http://\" + settings.SITH_URL + static(\"com/img/weekmail_bannerV2P22.png\")\n    )\n</code></pre>"},{"location":"reference/com/views/#com.views.Weekmail.get_footer","title":"<code>get_footer()</code>","text":"<p>Return an absolute link to the footer.</p> Source code in <code>com/models.py</code> <pre><code>def get_footer(self):\n    \"\"\"Return an absolute link to the footer.\"\"\"\n    return \"http://\" + settings.SITH_URL + static(\"com/img/weekmail_footerP22.png\")\n</code></pre>"},{"location":"reference/com/views/#com.views.WeekmailArticle","title":"<code>WeekmailArticle</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/com/views/#com.views.ComTabsMixin","title":"<code>ComTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/com/views/#com.views.ComEditView","title":"<code>ComEditView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>CanEditPropMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/com/views/#com.views.AlertMsgEditView","title":"<code>AlertMsgEditView</code>","text":"<p>               Bases: <code>ComEditView</code></p>"},{"location":"reference/com/views/#com.views.InfoMsgEditView","title":"<code>InfoMsgEditView</code>","text":"<p>               Bases: <code>ComEditView</code></p>"},{"location":"reference/com/views/#com.views.WeekmailDestinationEditView","title":"<code>WeekmailDestinationEditView</code>","text":"<p>               Bases: <code>ComEditView</code></p>"},{"location":"reference/com/views/#com.views.NewsCreateView","title":"<code>NewsCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>View to either create or update News.</p>"},{"location":"reference/com/views/#com.views.NewsCreateView.get_date_form_kwargs","title":"<code>get_date_form_kwargs()</code>","text":"<p>Get initial data for NewsDateForm</p> Source code in <code>com/views.py</code> <pre><code>def get_date_form_kwargs(self) -&gt; dict[str, Any]:\n    \"\"\"Get initial data for NewsDateForm\"\"\"\n    if self.request.method == \"POST\":\n        return {\"data\": self.request.POST}\n    return {}\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsUpdateView","title":"<code>NewsUpdateView</code>","text":"<p>               Bases: <code>PermissionOrAuthorRequiredMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/com/views/#com.views.NewsUpdateView.get_date_form_kwargs","title":"<code>get_date_form_kwargs()</code>","text":"<p>Get initial data for NewsDateForm</p> Source code in <code>com/views.py</code> <pre><code>def get_date_form_kwargs(self) -&gt; dict[str, Any]:\n    \"\"\"Get initial data for NewsDateForm\"\"\"\n    response = {}\n    if self.request.method == \"POST\":\n        response[\"data\"] = self.request.POST\n    dates = list(self.object.dates.order_by(\"id\"))\n    if len(dates) == 0:\n        return {}\n    response[\"instance\"] = dates[0]\n    occurrences = NewsDateForm.get_occurrences(len(dates))\n    if occurrences is not None:\n        response[\"initial\"] = {\"is_weekly\": True, \"occurrences\": occurrences}\n    return response\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsDeleteView","title":"<code>NewsDeleteView</code>","text":"<p>               Bases: <code>PermissionOrAuthorRequiredMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/com/views/#com.views.NewsModerateView","title":"<code>NewsModerateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DetailView</code></p>"},{"location":"reference/com/views/#com.views.NewsAdminListView","title":"<code>NewsAdminListView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ListView</code></p>"},{"location":"reference/com/views/#com.views.NewsListView","title":"<code>NewsListView</code>","text":"<p>               Bases: <code>TemplateView</code></p>"},{"location":"reference/com/views/#com.views.NewsListView.get_last_day","title":"<code>get_last_day()</code>","text":"<p>Get the last day when news will be displayed</p> <p>The returned day is the third one where something happen. For example, if there are 6 events : A on 15/03, B and C on 17/03, D on 20/03, E on 21/03 and F on 22/03 ; then the result is 20/03.</p> Source code in <code>com/views.py</code> <pre><code>def get_last_day(self) -&gt; date | None:\n    \"\"\"Get the last day when news will be displayed\n\n    The returned day is the third one where something happen.\n    For example, if there are 6 events : A on 15/03, B and C on 17/03,\n    D on 20/03, E on 21/03 and F on 22/03 ;\n    then the result is 20/03.\n    \"\"\"\n    dates = list(\n        NewsDate.objects.filter(end_date__gt=now())\n        .order_by(\"start_date\")\n        .values_list(\"start_date__date\", flat=True)\n        .distinct()[:4]\n    )\n    return dates[-1] if len(dates) &gt; 0 else None\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsListView.get_news_dates","title":"<code>get_news_dates(until)</code>","text":"<p>Return the event dates to display.</p> <p>The selected events are the ones that happens between right now and the given day (included).</p> Source code in <code>com/views.py</code> <pre><code>def get_news_dates(self, until: date) -&gt; dict[date, list[date]]:\n    \"\"\"Return the event dates to display.\n\n    The selected events are the ones that happens between\n    right now and the given day (included).\n    \"\"\"\n    return {\n        date: list(dates)\n        for date, dates in itertools.groupby(\n            NewsDate.objects.viewable_by(self.request.user)\n            .filter(end_date__gt=now(), start_date__date__lte=until)\n            .order_by(\"start_date\")\n            .select_related(\"news\", \"news__club\"),\n            key=lambda d: d.start_date.date(),\n        )\n    }\n</code></pre>"},{"location":"reference/com/views/#com.views.NewsDetailView","title":"<code>NewsDetailView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/com/views/#com.views.NewsFeed","title":"<code>NewsFeed</code>","text":"<p>               Bases: <code>Feed</code></p>"},{"location":"reference/com/views/#com.views.WeekmailPreviewView","title":"<code>WeekmailPreviewView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>QuickNotifMixin</code>, <code>CanEditPropMixin</code>, <code>DetailView</code></p>"},{"location":"reference/com/views/#com.views.WeekmailPreviewView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add rendered weekmail.</p> Source code in <code>com/views.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add rendered weekmail.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"weekmail_rendered\"] = self.object.render_html()\n    kwargs[\"bad_recipients\"] = self.bad_recipients\n    return kwargs\n</code></pre>"},{"location":"reference/com/views/#com.views.WeekmailEditView","title":"<code>WeekmailEditView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>QuickNotifMixin</code>, <code>CanEditPropMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/com/views/#com.views.WeekmailEditView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add orphan articles.</p> Source code in <code>com/views.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add orphan articles.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"orphans\"] = WeekmailArticle.objects.filter(weekmail=None)\n    return kwargs\n</code></pre>"},{"location":"reference/com/views/#com.views.WeekmailArticleEditView","title":"<code>WeekmailArticleEditView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>QuickNotifMixin</code>, <code>CanEditPropMixin</code>, <code>UpdateView</code></p> <p>Edit an article.</p>"},{"location":"reference/com/views/#com.views.WeekmailArticleCreateView","title":"<code>WeekmailArticleCreateView</code>","text":"<p>               Bases: <code>QuickNotifMixin</code>, <code>CreateView</code></p> <p>Post an article.</p>"},{"location":"reference/com/views/#com.views.WeekmailArticleDeleteView","title":"<code>WeekmailArticleDeleteView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>DeleteView</code></p> <p>Delete an article.</p>"},{"location":"reference/com/views/#com.views.MailingListAdminView","title":"<code>MailingListAdminView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>ListView</code></p>"},{"location":"reference/com/views/#com.views.MailingModerateView","title":"<code>MailingModerateView</code>","text":"<p>               Bases: <code>View</code></p>"},{"location":"reference/com/views/#com.views.PosterListBaseView","title":"<code>PosterListBaseView</code>","text":"<p>               Bases: <code>PermissionOrClubBoardRequiredMixin</code>, <code>ListView</code></p> <p>List communication posters.</p>"},{"location":"reference/com/views/#com.views.PosterCreateBaseView","title":"<code>PosterCreateBaseView</code>","text":"<p>               Bases: <code>PermissionOrClubBoardRequiredMixin</code>, <code>CreateView</code></p> <p>Create communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterEditBaseView","title":"<code>PosterEditBaseView</code>","text":"<p>               Bases: <code>PermissionOrClubBoardRequiredMixin</code>, <code>UpdateView</code></p> <p>Edit communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterDeleteBaseView","title":"<code>PosterDeleteBaseView</code>","text":"<p>               Bases: <code>PermissionOrClubBoardRequiredMixin</code>, <code>ComTabsMixin</code>, <code>DeleteView</code></p> <p>Edit communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterListView","title":"<code>PosterListView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>PosterListBaseView</code></p> <p>List communication posters.</p>"},{"location":"reference/com/views/#com.views.PosterCreateView","title":"<code>PosterCreateView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>PosterCreateBaseView</code></p> <p>Create communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterEditView","title":"<code>PosterEditView</code>","text":"<p>               Bases: <code>ComTabsMixin</code>, <code>PosterEditBaseView</code></p> <p>Edit communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterDeleteView","title":"<code>PosterDeleteView</code>","text":"<p>               Bases: <code>PosterDeleteBaseView</code></p> <p>Delete communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterModerateListView","title":"<code>PosterModerateListView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>ListView</code></p> <p>Moderate list communication poster.</p>"},{"location":"reference/com/views/#com.views.PosterModerateView","title":"<code>PosterModerateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>View</code></p> <p>Moderate communication poster.</p>"},{"location":"reference/com/views/#com.views.ScreenListView","title":"<code>ScreenListView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>ListView</code></p> <p>List communication screens.</p>"},{"location":"reference/com/views/#com.views.ScreenSlideshowView","title":"<code>ScreenSlideshowView</code>","text":"<p>               Bases: <code>DetailView</code></p> <p>Slideshow of actives posters.</p>"},{"location":"reference/com/views/#com.views.ScreenCreateView","title":"<code>ScreenCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>CreateView</code></p> <p>Create communication screen.</p>"},{"location":"reference/com/views/#com.views.ScreenEditView","title":"<code>ScreenEditView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>UpdateView</code></p> <p>Edit communication screen.</p>"},{"location":"reference/com/views/#com.views.ScreenDeleteView","title":"<code>ScreenDeleteView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ComTabsMixin</code>, <code>DeleteView</code></p> <p>Delete communication screen.</p>"},{"location":"reference/core/auth/","title":"Auth","text":""},{"location":"reference/core/auth/#backend","title":"Backend","text":""},{"location":"reference/core/auth/#core.auth.backends.SithModelBackend","title":"<code>SithModelBackend</code>","text":"<p>               Bases: <code>ModelBackend</code></p> <p>Custom auth backend for the Sith.</p> <p>In fact, it's the exact same backend as <code>django.contrib.auth.backend.ModelBackend</code>, with the exception that group permissions are fetched slightly differently. Indeed, django tries by default to fetch the permissions associated with all the <code>django.contrib.auth.models.Group</code> of a user ; however, our User model overrides that, so the actual linked group model is core.models.Group. Instead of having the relation <code>auth_perm --&gt; auth_group &lt;-- core_user</code>, we have <code>auth_perm --&gt; auth_group &lt;-- core_group &lt;-- core_user</code>.</p> <p>Thus, this backend make the small tweaks necessary to make our custom models interact with the django auth.</p>"},{"location":"reference/core/auth/#mixins","title":"Mixins","text":""},{"location":"reference/core/auth/#core.auth.mixins.CanCreateMixin","title":"<code>CanCreateMixin(*args, **kwargs)</code>","text":"<p>               Bases: <code>View</code></p> <p>Protect any child view that would create an object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user has not the necessary permission to create the object of the view.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/core/auth/#core.auth.mixins.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/core/auth/#core.auth.mixins.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/core/auth/#core.auth.mixins.CanEditPropMixin","title":"<code>CanEditPropMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has owner permissions on the child view object.</p> <p>In other word, you can make a view with this view as parent, and it will be retricted to the users that are in the object's owner_group or that pass the <code>obj.can_be_viewed_by</code> test.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user cannot see the object</p>"},{"location":"reference/core/auth/#core.auth.mixins.FormerSubscriberMixin","title":"<code>FormerSubscriberMixin</code>","text":"<p>               Bases: <code>AccessMixin</code></p> <p>Check if the user was at least an old subscriber.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user never subscribed.</p>"},{"location":"reference/core/auth/#core.auth.mixins.PermissionOrAuthorRequiredMixin","title":"<code>PermissionOrAuthorRequiredMixin</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code></p> <p>Require that the user has the required perm or is the object author.</p> <p>This mixin can be used in combination with <code>DetailView</code>, or another base class that implements the <code>get_object</code> method.</p> Example <p>In the following code, a user will be able to edit news if he has the <code>com.change_news</code> permission or if he tries to edit his own news :</p> <pre><code>class NewsEditView(PermissionOrAuthorRequiredMixin, DetailView):\n    model = News\n    author_field = \"author\"\n    permission_required = \"com.change_news\"\n</code></pre> <p>This is more or less equivalent to :</p> <pre><code>class NewsEditView(PermissionOrAuthorRequiredMixin, DetailView):\n    model = News\n\n    def dispatch(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        if not (\n            user.has_perm(\"com.change_news\")\n            or self.object.author == request.user\n        ):\n            raise PermissionDenied\n        return super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"reference/core/auth/#core.auth.mixins.can_edit_prop","title":"<code>can_edit_prop(obj, user)</code>","text":"<p>Can the user edit the properties of the object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to test for permission</p> required <code>user</code> <code>User</code> <p>core.models.User to test permissions against</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if user is authorized to edit object properties else False</p> Example <pre><code>if not can_edit_prop(self.object ,request.user):\n    raise PermissionDenied\n</code></pre> Source code in <code>core/auth/mixins.py</code> <pre><code>def can_edit_prop(obj: Any, user: User) -&gt; bool:\n    \"\"\"Can the user edit the properties of the object.\n\n    Args:\n        obj: Object to test for permission\n        user: core.models.User to test permissions against\n\n    Returns:\n        True if user is authorized to edit object properties else False\n\n    Example:\n        ```python\n        if not can_edit_prop(self.object ,request.user):\n            raise PermissionDenied\n        ```\n    \"\"\"\n    return obj is None or user.is_owner(obj)\n</code></pre>"},{"location":"reference/core/auth/#core.auth.mixins.can_edit","title":"<code>can_edit(obj, user)</code>","text":"<p>Can the user edit the object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to test for permission</p> required <code>user</code> <code>User</code> <p>core.models.User to test permissions against</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if user is authorized to edit object else False</p> Example <pre><code>if not can_edit(self.object, request.user):\n    raise PermissionDenied\n</code></pre> Source code in <code>core/auth/mixins.py</code> <pre><code>def can_edit(obj: Any, user: User) -&gt; bool:\n    \"\"\"Can the user edit the object.\n\n    Args:\n        obj: Object to test for permission\n        user: core.models.User to test permissions against\n\n    Returns:\n        True if user is authorized to edit object else False\n\n    Example:\n        ```python\n        if not can_edit(self.object, request.user):\n            raise PermissionDenied\n        ```\n    \"\"\"\n    if obj is None or user.can_edit(obj):\n        return True\n    return can_edit_prop(obj, user)\n</code></pre>"},{"location":"reference/core/auth/#core.auth.mixins.can_view","title":"<code>can_view(obj, user)</code>","text":"<p>Can the user see the object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to test for permission</p> required <code>user</code> <code>User</code> <p>core.models.User to test permissions against</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if user is authorized to see object else False</p> Example <pre><code>if not can_view(self.object ,request.user):\n    raise PermissionDenied\n</code></pre> Source code in <code>core/auth/mixins.py</code> <pre><code>def can_view(obj: Any, user: User) -&gt; bool:\n    \"\"\"Can the user see the object.\n\n    Args:\n        obj: Object to test for permission\n        user: core.models.User to test permissions against\n\n    Returns:\n        True if user is authorized to see object else False\n\n    Example:\n        ```python\n        if not can_view(self.object ,request.user):\n            raise PermissionDenied\n        ```\n    \"\"\"\n    if obj is None or user.can_view(obj):\n        return True\n    return can_edit(obj, user)\n</code></pre>"},{"location":"reference/core/mixins/","title":"Mixins","text":""},{"location":"reference/core/mixins/#core.views.mixins.TabedViewMixin","title":"<code>TabedViewMixin</code>","text":"<p>               Bases: <code>View</code></p> <p>Basic functions for displaying tabs in the template.</p>"},{"location":"reference/core/mixins/#core.views.mixins.QuickNotifMixin","title":"<code>QuickNotifMixin</code>","text":""},{"location":"reference/core/mixins/#core.views.mixins.QuickNotifMixin.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add quick notifications to context.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add quick notifications to context.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"quick_notifs\"] = []\n    for n in self.quick_notif_list:\n        kwargs[\"quick_notifs\"].append(settings.SITH_QUICK_NOTIF[n])\n    for key, val in settings.SITH_QUICK_NOTIF.items():\n        for gk in self.request.GET:\n            if key == gk:\n                kwargs[\"quick_notifs\"].append(val)\n    return kwargs\n</code></pre>"},{"location":"reference/core/mixins/#core.views.mixins.AllowFragment","title":"<code>AllowFragment</code>","text":"<p>Add <code>is_fragment</code> to templates. It's only True if the request is emitted by htmx</p>"},{"location":"reference/core/mixins/#core.views.mixins.FragmentMixin","title":"<code>FragmentMixin</code>","text":"<p>               Bases: <code>TemplateResponseMixin</code>, <code>ContextMixin</code></p> <p>Make a view buildable as a fragment that can be embedded in a template.</p> <p>Most fragments are used in two different ways : - in the request/response cycle, like any regular view - in templates, where the rendering is done in another view</p> <p>This mixin aims to simplify the initial fragment rendering. The rendered fragment will then be able to re-render itself through the request/response cycle if it uses HTMX.</p> <p>Example</p> <pre><code>class MyFragment(FragmentMixin, FormView):\n    template_name = \"app/fragment.jinja\"\n    form_class = MyForm\n    success_url = reverse_lazy(\"foo:bar\")\n\n# in another view :\ndef some_view(request):\n    fragment = MyFragment.as_fragment()\n    return render(\n        request,\n        \"app/template.jinja\",\n        context={\"fragment\": fragment(request)\n    }\n\n# in urls.py\nurlpatterns = [\n    path(\"foo/view\", some_view),\n    path(\"foo/fragment\", MyFragment.as_view()),\n]\n</code></pre>"},{"location":"reference/core/mixins/#core.views.mixins.FragmentMixin.reload_on_redirect","title":"<code>reload_on_redirect = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If True, this fragment will trigger a full page reload on redirect.</p>"},{"location":"reference/core/mixins/#core.views.mixins.UseFragmentsMixin","title":"<code>UseFragmentsMixin</code>","text":"<p>               Bases: <code>ContextMixin</code></p> <p>Mark a view as using fragments.</p> <p>This mixin is not mandatory (you may as well render manually your fragments in the <code>get_context_data</code> method). However, the interface of this class bring some distinction between fragments and other context data, which may reduce boilerplate.</p> <p>Example</p> <pre><code>class FooFragment(FragmentMixin, FormView): ...\n\nclass BarFragment(FragmentMixin, FormView): ...\n\nclass AdminFragment(FragmentMixin, FormView): ...\n\nclass MyView(UseFragmentsMixin, TemplateView)\n    template_name = \"app/view.jinja\"\n    fragments = {\n        \"foo\": FooFragment\n        \"bar\": BarFragment(template_name=\"some_template.jinja\")\n    }\n    fragments_data = {\n        \"foo\": {\"some\": \"data\"}  # this will be passed to the FooFragment renderer\n    }\n\n    def get_fragments(self):\n        res = super().get_fragments()\n        if self.request.user.is_superuser:\n            res[\"admin_fragment\"] = AdminFragment\n        return res\n</code></pre>"},{"location":"reference/core/mixins/#core.views.mixins.UseFragmentsMixin.get_fragment_data","title":"<code>get_fragment_data()</code>","text":"<p>Return eventual data used to initialize the fragments.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_data(self) -&gt; dict[str, dict[str, Any]]:\n    \"\"\"Return eventual data used to initialize the fragments.\"\"\"\n    return self.fragment_data if self.fragment_data is not None else {}\n</code></pre>"},{"location":"reference/core/mixins/#core.views.mixins.UseFragmentsMixin.get_fragment_context_data","title":"<code>get_fragment_context_data()</code>","text":"<p>Return the rendered fragments as context data.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_context_data(self) -&gt; dict[str, SafeString]:\n    \"\"\"Return the rendered fragments as context data.\"\"\"\n    res = {}\n    data = self.get_fragment_data()\n    for name, fragment in self.get_fragments().items():\n        is_cls = inspect.isclass(fragment) and issubclass(fragment, FragmentMixin)\n        _fragment = fragment.as_fragment() if is_cls else fragment\n        fragment_data = data.get(name, {})\n        res[name] = _fragment(self.request, **fragment_data)\n    return res\n</code></pre>"},{"location":"reference/core/model_fields/","title":"Champs de mod\u00e8le","text":""},{"location":"reference/core/model_fields/#core.fields.ResizedImageFieldFile","title":"<code>ResizedImageFieldFile</code>","text":"<p>               Bases: <code>ImageFieldFile</code></p>"},{"location":"reference/core/model_fields/#core.fields.ResizedImageFieldFile.get_resized_dimensions","title":"<code>get_resized_dimensions(image)</code>","text":"<p>Get the dimensions of the resized image.</p> <p>If the width and height are given, they are used. If only one is given, the other is calculated to keep the same ratio.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>Tuple of width and height</p> Source code in <code>core/fields.py</code> <pre><code>def get_resized_dimensions(self, image: Image.Image) -&gt; tuple[int, int]:\n    \"\"\"Get the dimensions of the resized image.\n\n    If the width and height are given, they are used.\n    If only one is given, the other is calculated to keep the same ratio.\n\n    Returns:\n        Tuple of width and height\n    \"\"\"\n    width = self.field.width\n    height = self.field.height\n    if width is not None and height is not None:\n        return self.field.width, self.field.height\n    if width is None:\n        width = int(image.width * height / image.height)\n    elif height is None:\n        height = int(image.height * width / image.width)\n    return width, height\n</code></pre>"},{"location":"reference/core/model_fields/#core.fields.ResizedImageFieldFile.get_name","title":"<code>get_name()</code>","text":"<p>Get the name of the resized image.</p> <p>If the field has a force_format attribute, the extension of the file will be changed to match it. Otherwise, the name is left unchanged.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the image format is unknown</p> Source code in <code>core/fields.py</code> <pre><code>def get_name(self) -&gt; str:\n    \"\"\"Get the name of the resized image.\n\n    If the field has a force_format attribute,\n    the extension of the file will be changed to match it.\n    Otherwise, the name is left unchanged.\n\n    Raises:\n        ValueError: If the image format is unknown\n    \"\"\"\n    if not self.field.force_format:\n        return self.name\n    formats = {val: key for key, val in Image.registered_extensions().items()}\n    new_format = self.field.force_format\n    if new_format in formats:\n        extension = formats[new_format]\n    else:\n        raise ValueError(f\"Unknown format {new_format}\")\n    return str(Path(self.file.name).with_suffix(extension))\n</code></pre>"},{"location":"reference/core/model_fields/#core.fields.ResizedImageField","title":"<code>ResizedImageField(width=None, height=None, force_format=None, **kwargs)</code>","text":"<p>               Bases: <code>ImageField</code></p> <p>A field that automatically resizes images to a given size.</p> <p>This field is useful for profile pictures or product icons, for example.</p> <p>The final size of the image is determined by the width and height parameters :</p> <ul> <li>If both are given, the image will be resized   to fit in a rectangle of width x height</li> <li>If only one is given, the other will be calculated to keep the same ratio</li> </ul> <p>If the force_format parameter is given, the image will be converted to this format.</p> <p>Examples:</p> <p>To resize an image with a height of 100px, without changing the ratio, and a format of WEBP :</p> <pre><code>class Product(models.Model):\n    icon = ResizedImageField(height=100, force_format=\"WEBP\")\n</code></pre> <p>To explicitly resize an image to 100x100px (but possibly change the ratio) :</p> <pre><code>class Product(models.Model):\n    icon = ResizedImageField(width=100, height=100)\n</code></pre> <p>Raises:</p> Type Description <code>FieldError</code> <p>If neither width nor height is given</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int | None</code> <p>If given, the width of the resized image</p> <code>None</code> <code>height</code> <code>int | None</code> <p>If given, the height of the resized image</p> <code>None</code> <code>force_format</code> <code>str | None</code> <p>If given, the image will be converted to this format</p> <code>None</code> Source code in <code>core/fields.py</code> <pre><code>def __init__(\n    self,\n    width: int | None = None,\n    height: int | None = None,\n    force_format: str | None = None,\n    **kwargs,\n):\n    if width is None and height is None:\n        raise FieldError(\n            f\"{self.__class__.__name__} requires \"\n            \"width, height or both, but got neither\"\n        )\n    self.width = width\n    self.height = height\n    self.force_format = force_format\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/core/models/","title":"Models","text":""},{"location":"reference/core/models/#core.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/core/models/#core.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/core/models/#core.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/core/models/#core.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/core/models/#core.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/core/models/#core.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/core/models/#core.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/core/models/#core.models.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/core/models/#core.models.BanGroup","title":"<code>BanGroup</code>","text":"<p>               Bases: <code>Group</code></p> <p>An anti-group, that removes permissions instead of giving them.</p> <p>Users are linked to BanGroups through UserBan objects.</p> Example <pre><code>user = User.objects.get(username=\"...\")\nban_group = BanGroup.objects.first()\nUserBan.objects.create(user=user, ban_group=ban_group, reason=\"...\")\n\nassert user.ban_groups.contains(ban_group)\n</code></pre>"},{"location":"reference/core/models/#core.models.UserQuerySet","title":"<code>UserQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/core/models/#core.models.CustomUserManager","title":"<code>CustomUserManager</code>","text":"<p>               Bases: <code>from_queryset(UserQuerySet)</code></p>"},{"location":"reference/core/models/#core.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/core/models/#core.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/core/models/#core.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/core/models/#core.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/core/models/#core.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/core/models/#core.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/core/models/#core.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/core/models/#core.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/core/models/#core.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/core/models/#core.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/core/models/#core.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/core/models/#core.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/core/models/#core.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/core/models/#core.models.AnonymousUser","title":"<code>AnonymousUser()</code>","text":"<p>               Bases: <code>AnonymousUser</code></p> Source code in <code>core/models.py</code> <pre><code>def __init__(self):\n    super().__init__()\n</code></pre>"},{"location":"reference/core/models/#core.models.AnonymousUser.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>The anonymous user is only in the public group.</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"The anonymous user is only in the public group.\"\"\"\n    allowed_id = settings.SITH_GROUP_PUBLIC_ID\n    if pk is not None:\n        return pk == allowed_id\n    elif name is not None:\n        group = get_group(name=name)\n        return group is not None and group.id == allowed_id\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n</code></pre>"},{"location":"reference/core/models/#core.models.UserBan","title":"<code>UserBan</code>","text":"<p>               Bases: <code>Model</code></p> <p>A ban of a user.</p> <p>A user can be banned for a specific reason, for a specific duration. The expiration date is indicative, and the ban should be removed manually.</p>"},{"location":"reference/core/models/#core.models.GlobalPermissionRights","title":"<code>GlobalPermissionRights</code>","text":"<p>               Bases: <code>Model</code></p> <p>Little hack to have permissions not linked to a specific db table.</p>"},{"location":"reference/core/models/#core.models.Preferences","title":"<code>Preferences</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/models/#core.models.SithFile","title":"<code>SithFile</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/models/#core.models.SithFile.clean","title":"<code>clean()</code>","text":"<p>Cleans up the file.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up the file.\"\"\"\n    super().clean()\n    if \"/\" in self.name:\n        raise ValidationError(_(\"Character '/' not authorized in name\"))\n    if self == self.parent:\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self == self.parent or (\n        self.parent is not None and self in self.get_parent_list()\n    ):\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self.parent and self.parent.is_file:\n        raise ValidationError(\n            _(\"You can not make a file be a children of a non folder file\")\n        )\n    if (\n        self.parent is None\n        and SithFile.objects.exclude(id=self.id)\n        .filter(parent=None, name=self.name)\n        .exists()\n    ) or (\n        self.parent\n        and self.parent.children.exclude(id=self.id).filter(name=self.name).exists()\n    ):\n        raise ValidationError(_(\"Duplicate file\"), code=\"duplicate\")\n    if self.is_folder:\n        if self.file:\n            try:\n                Image.open(BytesIO(self.file.read()))\n            except Image.UnidentifiedImageError as e:\n                raise ValidationError(\n                    _(\"This is not a valid folder thumbnail\")\n                ) from e\n        self.mime_type = \"inode/directory\"\n    if self.is_file and (self.file is None or self.file == \"\"):\n        raise ValidationError(_(\"You must provide a file\"))\n</code></pre>"},{"location":"reference/core/models/#core.models.SithFile.apply_rights_recursively","title":"<code>apply_rights_recursively(*, only_folders=False)</code>","text":"<p>Apply the rights of this file to all children recursively.</p> <p>Parameters:</p> Name Type Description Default <code>only_folders</code> <code>bool</code> <p>If True, only apply the rights to SithFiles that are folders.</p> <code>False</code> Source code in <code>core/models.py</code> <pre><code>def apply_rights_recursively(self, *, only_folders: bool = False) -&gt; None:\n    \"\"\"Apply the rights of this file to all children recursively.\n\n    Args:\n        only_folders: If True, only apply the rights to SithFiles that are folders.\n    \"\"\"\n    file_ids = []\n    explored_ids = [self.id]\n    while len(explored_ids) &gt; 0:  # find all children recursively\n        file_ids.extend(explored_ids)\n        next_level = SithFile.objects.filter(parent_id__in=explored_ids)\n        if only_folders:\n            next_level = next_level.filter(is_folder=True)\n        explored_ids = list(next_level.values_list(\"id\", flat=True))\n    for through in (SithFile.view_groups.through, SithFile.edit_groups.through):\n        # force evaluation. Without this, the iterator yields nothing\n        groups = list(\n            through.objects.filter(sithfile_id=self.id).values_list(\n                \"group_id\", flat=True\n            )\n        )\n        # delete previous rights\n        through.objects.filter(sithfile_id__in=file_ids).delete()\n        through.objects.bulk_create(  # create new rights\n            [through(sithfile_id=f, group_id=g) for f in file_ids for g in groups]\n        )\n</code></pre>"},{"location":"reference/core/models/#core.models.SithFile.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>core/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n</code></pre>"},{"location":"reference/core/models/#core.models.SithFile.move_to","title":"<code>move_to(parent)</code>","text":"<p>Move a file to a new parent. <code>parent</code> must be a SithFile with the <code>is_folder=True</code> property. Otherwise, this function doesn't change anything. This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify SithFiles recursively, so it stays efficient even with top-level folders.</p> Source code in <code>core/models.py</code> <pre><code>def move_to(self, parent):\n    \"\"\"Move a file to a new parent.\n    `parent` must be a SithFile with the `is_folder=True` property. Otherwise, this function doesn't change\n    anything.\n    This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify\n    SithFiles recursively, so it stays efficient even with top-level folders.\n    \"\"\"\n    if not parent.is_folder:\n        return\n    self.parent = parent\n    self.clean()\n    self.save()\n</code></pre>"},{"location":"reference/core/models/#core.models.QuickUploadImage","title":"<code>QuickUploadImage</code>","text":"<p>               Bases: <code>Model</code></p> <p>Images uploaded by user outside of the SithFile mechanism</p>"},{"location":"reference/core/models/#core.models.LockError","title":"<code>LockError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>There was a lock error on the object.</p>"},{"location":"reference/core/models/#core.models.AlreadyLocked","title":"<code>AlreadyLocked</code>","text":"<p>               Bases: <code>LockError</code></p> <p>The object is already locked.</p>"},{"location":"reference/core/models/#core.models.NotLocked","title":"<code>NotLocked</code>","text":"<p>               Bases: <code>LockError</code></p> <p>The object is not locked.</p>"},{"location":"reference/core/models/#core.models.Page","title":"<code>Page</code>","text":"<p>               Bases: <code>Model</code></p> <p>The page class to build a Wiki Each page may have a parent and it's URL is of the form my.site/page/// It has an ID field, but don't use it, since it's only there for DB part, and because compound primary key is awkward! Prefere querying pages with Page.get_page_by_full_name(). <p>Be careful with the _full_name attribute: this field may not be valid until you call save(). It's made for fast query, but don't rely on it when playing with a Page object, use get_full_name() instead!</p>"},{"location":"reference/core/models/#core.models.Page.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Performs some needed actions before and after saving a page in database.</p> Source code in <code>core/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Performs some needed actions before and after saving a page in database.\"\"\"\n    locked = kwargs.pop(\"force_lock\", False)\n    if not locked:\n        locked = self.is_locked()\n    if not locked:\n        raise NotLocked(\"The page is not locked and thus can not be saved\")\n    self.full_clean()\n    if not self.id:\n        super().save(\n            *args, **kwargs\n        )  # Save a first time to correctly set _full_name\n    # This reset the _full_name just before saving to maintain a coherent field quicker for queries than the\n    # recursive method\n    # It also update all the children to maintain correct names\n    self._full_name = self.get_full_name()\n    for c in self.children.all():\n        c.save()\n    super().save(*args, **kwargs)\n    self.unset_lock()\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.get_page_by_full_name","title":"<code>get_page_by_full_name(name)</code>  <code>staticmethod</code>","text":"<p>Quicker to get a page with that method rather than building the request every time.</p> Source code in <code>core/models.py</code> <pre><code>@staticmethod\ndef get_page_by_full_name(name):\n    \"\"\"Quicker to get a page with that method rather than building the request every time.\"\"\"\n    return Page.objects.filter(_full_name=name).first()\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.clean","title":"<code>clean()</code>","text":"<p>Cleans up only the name for the moment, but this can be used to make any treatment before saving the object.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up only the name for the moment, but this can be used to make any treatment before saving the object.\"\"\"\n    if \"/\" in self.name:\n        self.name = self.name.split(\"/\")[-1]\n    if (\n        Page.objects.exclude(pk=self.pk)\n        .filter(_full_name=self.get_full_name())\n        .exists()\n    ):\n        raise ValidationError(_(\"Duplicate page\"), code=\"duplicate\")\n    super().clean()\n    if self.parent is not None and self in self.get_parent_list():\n        raise ValidationError(_(\"Loop in page tree\"), code=\"loop\")\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.is_locked","title":"<code>is_locked()</code>","text":"<p>Is True if the page is locked, False otherwise.</p> <p>This is where the timeout is handled, so a locked page for which the timeout is reach will be unlocked and this function will return False.</p> Source code in <code>core/models.py</code> <pre><code>def is_locked(self):\n    \"\"\"Is True if the page is locked, False otherwise.\n\n    This is where the timeout is handled,\n    so a locked page for which the timeout is reach will be unlocked and this\n    function will return False.\n    \"\"\"\n    if self.lock_timeout and (\n        timezone.now() - self.lock_timeout &gt; timedelta(minutes=5)\n    ):\n        self.unset_lock()\n    return (\n        self.lock_user\n        and self.lock_timeout\n        and (timezone.now() - self.lock_timeout &lt; timedelta(minutes=5))\n    )\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.set_lock","title":"<code>set_lock(user)</code>","text":"<p>Sets a lock on the current page or raise an AlreadyLocked exception.</p> Source code in <code>core/models.py</code> <pre><code>def set_lock(self, user):\n    \"\"\"Sets a lock on the current page or raise an AlreadyLocked exception.\"\"\"\n    if self.is_locked() and self.get_lock() != user:\n        raise AlreadyLocked(\"The page is already locked by someone else\")\n    self.lock_user = user\n    self.lock_timeout = timezone.now()\n    super().save()\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.set_lock_recursive","title":"<code>set_lock_recursive(user)</code>","text":"<p>Locks recursively all the child pages for editing properties.</p> Source code in <code>core/models.py</code> <pre><code>def set_lock_recursive(self, user):\n    \"\"\"Locks recursively all the child pages for editing properties.\"\"\"\n    for p in self.children.all():\n        p.set_lock_recursive(user)\n    self.set_lock(user)\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.unset_lock_recursive","title":"<code>unset_lock_recursive()</code>","text":"<p>Unlocks recursively all the child pages.</p> Source code in <code>core/models.py</code> <pre><code>def unset_lock_recursive(self):\n    \"\"\"Unlocks recursively all the child pages.\"\"\"\n    for p in self.children.all():\n        p.unset_lock_recursive()\n    self.unset_lock()\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.unset_lock","title":"<code>unset_lock()</code>","text":"<p>Always try to unlock, even if there is no lock.</p> Source code in <code>core/models.py</code> <pre><code>def unset_lock(self):\n    \"\"\"Always try to unlock, even if there is no lock.\"\"\"\n    self.lock_user = None\n    self.lock_timeout = None\n    super().save()\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.get_lock","title":"<code>get_lock()</code>","text":"<p>Returns the page's mutex containing the time and the user in a dict.</p> Source code in <code>core/models.py</code> <pre><code>def get_lock(self):\n    \"\"\"Returns the page's mutex containing the time and the user in a dict.\"\"\"\n    if self.lock_user:\n        return self.lock_user\n    raise NotLocked(\"The page is not locked and thus can not return its user\")\n</code></pre>"},{"location":"reference/core/models/#core.models.Page.get_full_name","title":"<code>get_full_name()</code>","text":"<p>Computes the real full_name of the page based on its name and its parent's name You can and must rely on this function when working on a page object that is not freshly fetched from the DB (For example when treating a Page object coming from a form).</p> Source code in <code>core/models.py</code> <pre><code>def get_full_name(self):\n    \"\"\"Computes the real full_name of the page based on its name and its parent's name\n    You can and must rely on this function when working on a page object that is not freshly fetched from the DB\n    (For example when treating a Page object coming from a form).\n    \"\"\"\n    if self.parent is None:\n        return self.name\n    return f\"{self.parent.get_full_name()}/{self.name}\"\n</code></pre>"},{"location":"reference/core/models/#core.models.PageRev","title":"<code>PageRev</code>","text":"<p>               Bases: <code>Model</code></p> <p>True content of the page.</p> <p>Each page object has a revisions field that is a list of PageRev, ordered by date. my_page.revisions.last() gives the PageRev object that is the most up-to-date, and thus, is the real content of the page. The content is in PageRev.title and PageRev.content .</p>"},{"location":"reference/core/models/#core.models.Notification","title":"<code>Notification</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/models/#core.models.Gift","title":"<code>Gift</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/models/#core.models.OperationLog","title":"<code>OperationLog</code>","text":"<p>               Bases: <code>Model</code></p> <p>General purpose log object to register operations.</p>"},{"location":"reference/core/models/#core.models.validate_promo","title":"<code>validate_promo(value)</code>","text":"Source code in <code>core/models.py</code> <pre><code>def validate_promo(value: int) -&gt; None:\n    start_year = settings.SITH_SCHOOL_START_YEAR\n    delta = (localdate() + timedelta(days=180)).year - start_year\n    if value &lt; 0 or delta &lt; value:\n        raise ValidationError(\n            _(\"%(value)s is not a valid promo (between 0 and %(end)s)\"),\n            params={\"value\": value, \"end\": delta},\n        )\n</code></pre>"},{"location":"reference/core/models/#core.models.get_group","title":"<code>get_group(*, pk=None, name=None)</code>","text":"<p>Search for a group by its primary key or its name. Either one of the two must be set.</p> <p>The result is cached for the default duration (should be 5 minutes).</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>int | None</code> <p>The primary key of the group</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the group</p> <code>None</code> <p>Returns:</p> Type Description <code>Group | None</code> <p>The group if it exists, else None</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no group matches the criteria</p> Source code in <code>core/models.py</code> <pre><code>def get_group(*, pk: int | None = None, name: str | None = None) -&gt; Group | None:\n    \"\"\"Search for a group by its primary key or its name.\n    Either one of the two must be set.\n\n    The result is cached for the default duration (should be 5 minutes).\n\n    Args:\n        pk: The primary key of the group\n        name: The name of the group\n\n    Returns:\n        The group if it exists, else None\n\n    Raises:\n        ValueError: If no group matches the criteria\n    \"\"\"\n    if pk is None and name is None:\n        raise ValueError(\"Either pk or name must be set\")\n\n    # replace space characters to hide warnings with memcached backend\n    pk_or_name: str | int = pk if pk is not None else name.replace(\" \", \"_\")\n    group = cache.get(f\"sith_group_{pk_or_name}\")\n\n    if group == \"not_found\":\n        # Using None as a cache value is a little bit tricky,\n        # so we use a special string to represent None\n        return None\n    elif group is not None:\n        return group\n    # if this point is reached, the group is not in cache\n    if pk is not None:\n        group = Group.objects.filter(pk=pk).first()\n    else:\n        group = Group.objects.filter(name=name).first()\n    if group is not None:\n        name = group.name.replace(\" \", \"_\")\n        cache.set_many({f\"sith_group_{group.id}\": group, f\"sith_group_{name}\": group})\n    else:\n        cache.set(f\"sith_group_{pk_or_name}\", \"not_found\")\n    return group\n</code></pre>"},{"location":"reference/core/models/#core.models.get_directory","title":"<code>get_directory(instance, filename)</code>","text":"Source code in <code>core/models.py</code> <pre><code>def get_directory(instance, filename):\n    return \".{0}/{1}\".format(instance.get_parent_path(), filename)\n</code></pre>"},{"location":"reference/core/models/#core.models.get_compressed_directory","title":"<code>get_compressed_directory(instance, filename)</code>","text":"Source code in <code>core/models.py</code> <pre><code>def get_compressed_directory(instance, filename):\n    return \"./.compressed/{0}/{1}\".format(instance.get_parent_path(), filename)\n</code></pre>"},{"location":"reference/core/models/#core.models.get_thumbnail_directory","title":"<code>get_thumbnail_directory(instance, filename)</code>","text":"Source code in <code>core/models.py</code> <pre><code>def get_thumbnail_directory(instance, filename):\n    return \"./.thumbnails/{0}/{1}\".format(instance.get_parent_path(), filename)\n</code></pre>"},{"location":"reference/core/models/#core.models.get_default_owner_group","title":"<code>get_default_owner_group()</code>","text":"Source code in <code>core/models.py</code> <pre><code>def get_default_owner_group():\n    return settings.SITH_GROUP_ROOT_ID\n</code></pre>"},{"location":"reference/core/models/#core.models.get_notification_types","title":"<code>get_notification_types()</code>","text":"Source code in <code>core/models.py</code> <pre><code>def get_notification_types():\n    return settings.SITH_NOTIFICATIONS\n</code></pre>"},{"location":"reference/core/schemas/","title":"Schemas","text":""},{"location":"reference/core/schemas/#core.schemas.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/core/schemas/#core.schemas.QuickUploadImage","title":"<code>QuickUploadImage</code>","text":"<p>               Bases: <code>Model</code></p> <p>Images uploaded by user outside of the SithFile mechanism</p>"},{"location":"reference/core/schemas/#core.schemas.SithFile","title":"<code>SithFile</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/schemas/#core.schemas.SithFile.clean","title":"<code>clean()</code>","text":"<p>Cleans up the file.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up the file.\"\"\"\n    super().clean()\n    if \"/\" in self.name:\n        raise ValidationError(_(\"Character '/' not authorized in name\"))\n    if self == self.parent:\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self == self.parent or (\n        self.parent is not None and self in self.get_parent_list()\n    ):\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self.parent and self.parent.is_file:\n        raise ValidationError(\n            _(\"You can not make a file be a children of a non folder file\")\n        )\n    if (\n        self.parent is None\n        and SithFile.objects.exclude(id=self.id)\n        .filter(parent=None, name=self.name)\n        .exists()\n    ) or (\n        self.parent\n        and self.parent.children.exclude(id=self.id).filter(name=self.name).exists()\n    ):\n        raise ValidationError(_(\"Duplicate file\"), code=\"duplicate\")\n    if self.is_folder:\n        if self.file:\n            try:\n                Image.open(BytesIO(self.file.read()))\n            except Image.UnidentifiedImageError as e:\n                raise ValidationError(\n                    _(\"This is not a valid folder thumbnail\")\n                ) from e\n        self.mime_type = \"inode/directory\"\n    if self.is_file and (self.file is None or self.file == \"\"):\n        raise ValidationError(_(\"You must provide a file\"))\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.SithFile.apply_rights_recursively","title":"<code>apply_rights_recursively(*, only_folders=False)</code>","text":"<p>Apply the rights of this file to all children recursively.</p> <p>Parameters:</p> Name Type Description Default <code>only_folders</code> <code>bool</code> <p>If True, only apply the rights to SithFiles that are folders.</p> <code>False</code> Source code in <code>core/models.py</code> <pre><code>def apply_rights_recursively(self, *, only_folders: bool = False) -&gt; None:\n    \"\"\"Apply the rights of this file to all children recursively.\n\n    Args:\n        only_folders: If True, only apply the rights to SithFiles that are folders.\n    \"\"\"\n    file_ids = []\n    explored_ids = [self.id]\n    while len(explored_ids) &gt; 0:  # find all children recursively\n        file_ids.extend(explored_ids)\n        next_level = SithFile.objects.filter(parent_id__in=explored_ids)\n        if only_folders:\n            next_level = next_level.filter(is_folder=True)\n        explored_ids = list(next_level.values_list(\"id\", flat=True))\n    for through in (SithFile.view_groups.through, SithFile.edit_groups.through):\n        # force evaluation. Without this, the iterator yields nothing\n        groups = list(\n            through.objects.filter(sithfile_id=self.id).values_list(\n                \"group_id\", flat=True\n            )\n        )\n        # delete previous rights\n        through.objects.filter(sithfile_id__in=file_ids).delete()\n        through.objects.bulk_create(  # create new rights\n            [through(sithfile_id=f, group_id=g) for f in file_ids for g in groups]\n        )\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.SithFile.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>core/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.SithFile.move_to","title":"<code>move_to(parent)</code>","text":"<p>Move a file to a new parent. <code>parent</code> must be a SithFile with the <code>is_folder=True</code> property. Otherwise, this function doesn't change anything. This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify SithFiles recursively, so it stays efficient even with top-level folders.</p> Source code in <code>core/models.py</code> <pre><code>def move_to(self, parent):\n    \"\"\"Move a file to a new parent.\n    `parent` must be a SithFile with the `is_folder=True` property. Otherwise, this function doesn't change\n    anything.\n    This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify\n    SithFiles recursively, so it stays efficient even with top-level folders.\n    \"\"\"\n    if not parent.is_folder:\n        return\n    self.parent = parent\n    self.clean()\n    self.save()\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/core/schemas/#core.schemas.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/core/schemas/#core.schemas.UploadedImage","title":"<code>UploadedImage</code>","text":"<p>               Bases: <code>UploadedFile</code></p>"},{"location":"reference/core/schemas/#core.schemas.SimpleUserSchema","title":"<code>SimpleUserSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>A schema with the minimum amount of information to represent a user.</p>"},{"location":"reference/core/schemas/#core.schemas.UserSchema","title":"<code>UserSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/core/schemas/#core.schemas.UserProfileSchema","title":"<code>UserProfileSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>The necessary information to show a user profile</p>"},{"location":"reference/core/schemas/#core.schemas.UploadedFileSchema","title":"<code>UploadedFileSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/core/schemas/#core.schemas.SithFileSchema","title":"<code>SithFileSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/core/schemas/#core.schemas.GroupSchema","title":"<code>GroupSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/core/schemas/#core.schemas.UserFilterSchema","title":"<code>UserFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/core/schemas/#core.schemas.MarkdownSchema","title":"<code>MarkdownSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/core/schemas/#core.schemas.FamilyGodfatherSchema","title":"<code>FamilyGodfatherSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/core/schemas/#core.schemas.UserFamilySchema","title":"<code>UserFamilySchema</code>","text":"<p>               Bases: <code>Schema</code></p> <p>Represent a graph of a user's family</p>"},{"location":"reference/core/schemas/#core.schemas.is_image","title":"<code>is_image(file)</code>","text":"Source code in <code>core/utils.py</code> <pre><code>def is_image(file: UploadedFile):\n    try:\n        im = PIL.Image.open(file.file)\n        im.verify()\n        # go back to the start of the file, without closing it.\n        # Otherwise, further checks on django side will fail\n        file.seek(0)\n    except PIL.UnidentifiedImageError:\n        return False\n    return True\n</code></pre>"},{"location":"reference/core/views/","title":"Views","text":""},{"location":"reference/core/views/#core.views.DetailFormView","title":"<code>DetailFormView</code>","text":"<p>               Bases: <code>FormView</code>, <code>BaseDetailView</code></p> <p>Class that allow both a detail view and a form view.</p>"},{"location":"reference/core/views/#core.views.SithFile","title":"<code>SithFile</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/views/#core.views.SithFile.clean","title":"<code>clean()</code>","text":"<p>Cleans up the file.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up the file.\"\"\"\n    super().clean()\n    if \"/\" in self.name:\n        raise ValidationError(_(\"Character '/' not authorized in name\"))\n    if self == self.parent:\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self == self.parent or (\n        self.parent is not None and self in self.get_parent_list()\n    ):\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self.parent and self.parent.is_file:\n        raise ValidationError(\n            _(\"You can not make a file be a children of a non folder file\")\n        )\n    if (\n        self.parent is None\n        and SithFile.objects.exclude(id=self.id)\n        .filter(parent=None, name=self.name)\n        .exists()\n    ) or (\n        self.parent\n        and self.parent.children.exclude(id=self.id).filter(name=self.name).exists()\n    ):\n        raise ValidationError(_(\"Duplicate file\"), code=\"duplicate\")\n    if self.is_folder:\n        if self.file:\n            try:\n                Image.open(BytesIO(self.file.read()))\n            except Image.UnidentifiedImageError as e:\n                raise ValidationError(\n                    _(\"This is not a valid folder thumbnail\")\n                ) from e\n        self.mime_type = \"inode/directory\"\n    if self.is_file and (self.file is None or self.file == \"\"):\n        raise ValidationError(_(\"You must provide a file\"))\n</code></pre>"},{"location":"reference/core/views/#core.views.SithFile.apply_rights_recursively","title":"<code>apply_rights_recursively(*, only_folders=False)</code>","text":"<p>Apply the rights of this file to all children recursively.</p> <p>Parameters:</p> Name Type Description Default <code>only_folders</code> <code>bool</code> <p>If True, only apply the rights to SithFiles that are folders.</p> <code>False</code> Source code in <code>core/models.py</code> <pre><code>def apply_rights_recursively(self, *, only_folders: bool = False) -&gt; None:\n    \"\"\"Apply the rights of this file to all children recursively.\n\n    Args:\n        only_folders: If True, only apply the rights to SithFiles that are folders.\n    \"\"\"\n    file_ids = []\n    explored_ids = [self.id]\n    while len(explored_ids) &gt; 0:  # find all children recursively\n        file_ids.extend(explored_ids)\n        next_level = SithFile.objects.filter(parent_id__in=explored_ids)\n        if only_folders:\n            next_level = next_level.filter(is_folder=True)\n        explored_ids = list(next_level.values_list(\"id\", flat=True))\n    for through in (SithFile.view_groups.through, SithFile.edit_groups.through):\n        # force evaluation. Without this, the iterator yields nothing\n        groups = list(\n            through.objects.filter(sithfile_id=self.id).values_list(\n                \"group_id\", flat=True\n            )\n        )\n        # delete previous rights\n        through.objects.filter(sithfile_id__in=file_ids).delete()\n        through.objects.bulk_create(  # create new rights\n            [through(sithfile_id=f, group_id=g) for f in file_ids for g in groups]\n        )\n</code></pre>"},{"location":"reference/core/views/#core.views.SithFile.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>core/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n</code></pre>"},{"location":"reference/core/views/#core.views.SithFile.move_to","title":"<code>move_to(parent)</code>","text":"<p>Move a file to a new parent. <code>parent</code> must be a SithFile with the <code>is_folder=True</code> property. Otherwise, this function doesn't change anything. This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify SithFiles recursively, so it stays efficient even with top-level folders.</p> Source code in <code>core/models.py</code> <pre><code>def move_to(self, parent):\n    \"\"\"Move a file to a new parent.\n    `parent` must be a SithFile with the `is_folder=True` property. Otherwise, this function doesn't change\n    anything.\n    This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify\n    SithFiles recursively, so it stays efficient even with top-level folders.\n    \"\"\"\n    if not parent.is_folder:\n        return\n    self.parent = parent\n    self.clean()\n    self.save()\n</code></pre>"},{"location":"reference/core/views/#core.views.AllowFragment","title":"<code>AllowFragment</code>","text":"<p>Add <code>is_fragment</code> to templates. It's only True if the request is emitted by htmx</p>"},{"location":"reference/core/views/#core.views.MultipleFileInput","title":"<code>MultipleFileInput</code>","text":"<p>               Bases: <code>ClearableFileInput</code></p>"},{"location":"reference/core/views/#core.views.MultipleFileField","title":"<code>MultipleFileField(*args, **kwargs)</code>","text":"<p>               Bases: <code>_MultipleFieldMixin</code>, <code>FileField</code></p> Source code in <code>core/views/files.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    kwargs.setdefault(\"widget\", MultipleFileInput())\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/core/views/#core.views.MultipleImageField","title":"<code>MultipleImageField(*args, **kwargs)</code>","text":"<p>               Bases: <code>_MultipleFieldMixin</code>, <code>ImageField</code></p> Source code in <code>core/views/files.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    kwargs.setdefault(\"widget\", MultipleFileInput())\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/core/views/#core.views.AddFilesForm","title":"<code>AddFilesForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/core/views/#core.views.FileListView","title":"<code>FileListView</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/core/views/#core.views.FileEditView","title":"<code>FileEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/core/views/#core.views.FileEditPropForm","title":"<code>FileEditPropForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/core/views/#core.views.FileEditPropView","title":"<code>FileEditPropView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/core/views/#core.views.FileView","title":"<code>FileView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code>, <code>FormMixin</code></p> <p>Handle the upload of new files into a folder.</p>"},{"location":"reference/core/views/#core.views.FileView.handle_clipboard","title":"<code>handle_clipboard(request, obj)</code>  <code>staticmethod</code>","text":"<p>Handle the clipboard in the view.</p> <p>This method can fail, since it does not catch the exceptions coming from below, allowing proper handling in the calling view. Use this method like this:</p> <pre><code>FileView.handle_clipboard(request, self.object)\n</code></pre> <p><code>request</code> is usually the self.request obj in your view <code>obj</code> is the SithFile object you want to put in the clipboard, or          where you want to paste the clipboard</p> Source code in <code>core/views/files.py</code> <pre><code>@staticmethod\ndef handle_clipboard(request, obj):\n    \"\"\"Handle the clipboard in the view.\n\n    This method can fail, since it does not catch the exceptions coming from\n    below, allowing proper handling in the calling view.\n    Use this method like this:\n\n        FileView.handle_clipboard(request, self.object)\n\n    `request` is usually the self.request obj in your view\n    `obj` is the SithFile object you want to put in the clipboard, or\n             where you want to paste the clipboard\n    \"\"\"\n    if \"delete\" in request.POST:\n        for f_id in request.POST.getlist(\"file_list\"):\n            file = SithFile.objects.filter(id=f_id).first()\n            if file:\n                file.delete()\n    if \"clear\" in request.POST:\n        request.session[\"clipboard\"] = []\n    if \"cut\" in request.POST:\n        for f_id_str in request.POST.getlist(\"file_list\"):\n            f_id = int(f_id_str)\n            if (\n                f_id in [c.id for c in obj.children.all()]\n                and f_id not in request.session[\"clipboard\"]\n            ):\n                request.session[\"clipboard\"].append(f_id)\n    if \"paste\" in request.POST:\n        for f_id in request.session[\"clipboard\"]:\n            file = SithFile.objects.filter(id=f_id).first()\n            if file:\n                file.move_to(obj)\n        request.session[\"clipboard\"] = []\n    request.session.modified = True\n</code></pre>"},{"location":"reference/core/views/#core.views.FileDeleteView","title":"<code>FileDeleteView</code>","text":"<p>               Bases: <code>AllowFragment</code>, <code>CanEditPropMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/core/views/#core.views.FileModerationView","title":"<code>FileModerationView</code>","text":"<p>               Bases: <code>AllowFragment</code>, <code>ListView</code></p>"},{"location":"reference/core/views/#core.views.FileModerateView","title":"<code>FileModerateView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>SingleObjectMixin</code></p>"},{"location":"reference/core/views/#core.views.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/core/views/#core.views.EditMembersForm","title":"<code>EditMembersForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> <p>Add and remove members from a Group.</p> Source code in <code>core/views/group.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    self.current_users = kwargs.pop(\"users\", [])\n    super().__init__(*args, **kwargs)\n\n    self.fields[\"users_added\"] = forms.ModelMultipleChoiceField(\n        label=_(\"Users to add to group\"),\n        help_text=_(\"Search users to add (one or more).\"),\n        required=False,\n        widget=AutoCompleteSelectMultipleUser,\n        queryset=User.objects.exclude(id__in=self.current_users).all(),\n    )\n\n    self.fields[\"users_removed\"] = forms.ModelMultipleChoiceField(\n        User.objects.filter(id__in=self.current_users).all(),\n        label=_(\"Users to remove from group\"),\n        required=False,\n        widget=forms.CheckboxSelectMultiple,\n    )\n</code></pre>"},{"location":"reference/core/views/#core.views.GroupListView","title":"<code>GroupListView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>ListView</code></p> <p>Displays the Group list.</p>"},{"location":"reference/core/views/#core.views.GroupEditView","title":"<code>GroupEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p> <p>Edit infos of a Group.</p>"},{"location":"reference/core/views/#core.views.GroupCreateView","title":"<code>GroupCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>Add a new Group.</p>"},{"location":"reference/core/views/#core.views.GroupTemplateView","title":"<code>GroupTemplateView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DetailFormView</code></p> <p>Display all users in a given Group Allow adding and removing users from it.</p>"},{"location":"reference/core/views/#core.views.GroupDeleteView","title":"<code>GroupDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p> <p>Delete a Group.</p>"},{"location":"reference/core/views/#core.views.PermissionGroupsUpdateView","title":"<code>PermissionGroupsUpdateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>SuccessMessageMixin</code>, <code>UpdateView</code></p> <p>Manage the groups that have a specific permission.</p> Notes <p>This is an <code>UpdateView</code>, but unlike typical <code>UpdateView</code>, it doesn't accept url arguments to retrieve the object to update. As such, a <code>PermissionGroupsUpdateView</code> can only deal with a single hardcoded permission.</p> <p>This is not a limitation, but an on-purpose design, mainly for security matters.</p> Example <pre><code>class SubscriptionPermissionView(PermissionGroupsUpdateView):\n    permission = \"subscription.add_subscription\"\n</code></pre>"},{"location":"reference/core/views/#core.views.Notification","title":"<code>Notification</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/views/#core.views.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/core/views/#core.views.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/core/views/#core.views.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/core/views/#core.views.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/core/views/#core.views.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/core/views/#core.views.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/core/views/#core.views.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/core/views/#core.views.NotificationList","title":"<code>NotificationList</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/core/views/#core.views.LockError","title":"<code>LockError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>There was a lock error on the object.</p>"},{"location":"reference/core/views/#core.views.Page","title":"<code>Page</code>","text":"<p>               Bases: <code>Model</code></p> <p>The page class to build a Wiki Each page may have a parent and it's URL is of the form my.site/page/// It has an ID field, but don't use it, since it's only there for DB part, and because compound primary key is awkward! Prefere querying pages with Page.get_page_by_full_name(). <p>Be careful with the _full_name attribute: this field may not be valid until you call save(). It's made for fast query, but don't rely on it when playing with a Page object, use get_full_name() instead!</p>"},{"location":"reference/core/views/#core.views.Page.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Performs some needed actions before and after saving a page in database.</p> Source code in <code>core/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"Performs some needed actions before and after saving a page in database.\"\"\"\n    locked = kwargs.pop(\"force_lock\", False)\n    if not locked:\n        locked = self.is_locked()\n    if not locked:\n        raise NotLocked(\"The page is not locked and thus can not be saved\")\n    self.full_clean()\n    if not self.id:\n        super().save(\n            *args, **kwargs\n        )  # Save a first time to correctly set _full_name\n    # This reset the _full_name just before saving to maintain a coherent field quicker for queries than the\n    # recursive method\n    # It also update all the children to maintain correct names\n    self._full_name = self.get_full_name()\n    for c in self.children.all():\n        c.save()\n    super().save(*args, **kwargs)\n    self.unset_lock()\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.get_page_by_full_name","title":"<code>get_page_by_full_name(name)</code>  <code>staticmethod</code>","text":"<p>Quicker to get a page with that method rather than building the request every time.</p> Source code in <code>core/models.py</code> <pre><code>@staticmethod\ndef get_page_by_full_name(name):\n    \"\"\"Quicker to get a page with that method rather than building the request every time.\"\"\"\n    return Page.objects.filter(_full_name=name).first()\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.clean","title":"<code>clean()</code>","text":"<p>Cleans up only the name for the moment, but this can be used to make any treatment before saving the object.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up only the name for the moment, but this can be used to make any treatment before saving the object.\"\"\"\n    if \"/\" in self.name:\n        self.name = self.name.split(\"/\")[-1]\n    if (\n        Page.objects.exclude(pk=self.pk)\n        .filter(_full_name=self.get_full_name())\n        .exists()\n    ):\n        raise ValidationError(_(\"Duplicate page\"), code=\"duplicate\")\n    super().clean()\n    if self.parent is not None and self in self.get_parent_list():\n        raise ValidationError(_(\"Loop in page tree\"), code=\"loop\")\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.is_locked","title":"<code>is_locked()</code>","text":"<p>Is True if the page is locked, False otherwise.</p> <p>This is where the timeout is handled, so a locked page for which the timeout is reach will be unlocked and this function will return False.</p> Source code in <code>core/models.py</code> <pre><code>def is_locked(self):\n    \"\"\"Is True if the page is locked, False otherwise.\n\n    This is where the timeout is handled,\n    so a locked page for which the timeout is reach will be unlocked and this\n    function will return False.\n    \"\"\"\n    if self.lock_timeout and (\n        timezone.now() - self.lock_timeout &gt; timedelta(minutes=5)\n    ):\n        self.unset_lock()\n    return (\n        self.lock_user\n        and self.lock_timeout\n        and (timezone.now() - self.lock_timeout &lt; timedelta(minutes=5))\n    )\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.set_lock","title":"<code>set_lock(user)</code>","text":"<p>Sets a lock on the current page or raise an AlreadyLocked exception.</p> Source code in <code>core/models.py</code> <pre><code>def set_lock(self, user):\n    \"\"\"Sets a lock on the current page or raise an AlreadyLocked exception.\"\"\"\n    if self.is_locked() and self.get_lock() != user:\n        raise AlreadyLocked(\"The page is already locked by someone else\")\n    self.lock_user = user\n    self.lock_timeout = timezone.now()\n    super().save()\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.set_lock_recursive","title":"<code>set_lock_recursive(user)</code>","text":"<p>Locks recursively all the child pages for editing properties.</p> Source code in <code>core/models.py</code> <pre><code>def set_lock_recursive(self, user):\n    \"\"\"Locks recursively all the child pages for editing properties.\"\"\"\n    for p in self.children.all():\n        p.set_lock_recursive(user)\n    self.set_lock(user)\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.unset_lock_recursive","title":"<code>unset_lock_recursive()</code>","text":"<p>Unlocks recursively all the child pages.</p> Source code in <code>core/models.py</code> <pre><code>def unset_lock_recursive(self):\n    \"\"\"Unlocks recursively all the child pages.\"\"\"\n    for p in self.children.all():\n        p.unset_lock_recursive()\n    self.unset_lock()\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.unset_lock","title":"<code>unset_lock()</code>","text":"<p>Always try to unlock, even if there is no lock.</p> Source code in <code>core/models.py</code> <pre><code>def unset_lock(self):\n    \"\"\"Always try to unlock, even if there is no lock.\"\"\"\n    self.lock_user = None\n    self.lock_timeout = None\n    super().save()\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.get_lock","title":"<code>get_lock()</code>","text":"<p>Returns the page's mutex containing the time and the user in a dict.</p> Source code in <code>core/models.py</code> <pre><code>def get_lock(self):\n    \"\"\"Returns the page's mutex containing the time and the user in a dict.\"\"\"\n    if self.lock_user:\n        return self.lock_user\n    raise NotLocked(\"The page is not locked and thus can not return its user\")\n</code></pre>"},{"location":"reference/core/views/#core.views.Page.get_full_name","title":"<code>get_full_name()</code>","text":"<p>Computes the real full_name of the page based on its name and its parent's name You can and must rely on this function when working on a page object that is not freshly fetched from the DB (For example when treating a Page object coming from a form).</p> Source code in <code>core/models.py</code> <pre><code>def get_full_name(self):\n    \"\"\"Computes the real full_name of the page based on its name and its parent's name\n    You can and must rely on this function when working on a page object that is not freshly fetched from the DB\n    (For example when treating a Page object coming from a form).\n    \"\"\"\n    if self.parent is None:\n        return self.name\n    return f\"{self.parent.get_full_name()}/{self.name}\"\n</code></pre>"},{"location":"reference/core/views/#core.views.PageRev","title":"<code>PageRev</code>","text":"<p>               Bases: <code>Model</code></p> <p>True content of the page.</p> <p>Each page object has a revisions field that is a list of PageRev, ordered by date. my_page.revisions.last() gives the PageRev object that is the most up-to-date, and thus, is the real content of the page. The content is in PageRev.title and PageRev.content .</p>"},{"location":"reference/core/views/#core.views.CanEditPagePropMixin","title":"<code>CanEditPagePropMixin</code>","text":"<p>               Bases: <code>CanEditPropMixin</code></p>"},{"location":"reference/core/views/#core.views.PageListView","title":"<code>PageListView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>ListView</code></p>"},{"location":"reference/core/views/#core.views.PageView","title":"<code>PageView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/core/views/#core.views.PageHistView","title":"<code>PageHistView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/core/views/#core.views.PageRevView","title":"<code>PageRevView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/core/views/#core.views.PageCreateView","title":"<code>PageCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p>"},{"location":"reference/core/views/#core.views.PagePropView","title":"<code>PagePropView</code>","text":"<p>               Bases: <code>CanEditPagePropMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/core/views/#core.views.PageEditViewBase","title":"<code>PageEditViewBase</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/core/views/#core.views.PageEditView","title":"<code>PageEditView</code>","text":"<p>               Bases: <code>PageEditViewBase</code></p>"},{"location":"reference/core/views/#core.views.PageDeleteView","title":"<code>PageDeleteView</code>","text":"<p>               Bases: <code>CanEditPagePropMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/core/views/#core.views.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/core/views/#core.views.CanEditPropMixin","title":"<code>CanEditPropMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has owner permissions on the child view object.</p> <p>In other word, you can make a view with this view as parent, and it will be retricted to the users that are in the object's owner_group or that pass the <code>obj.can_be_viewed_by</code> test.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user cannot see the object</p>"},{"location":"reference/core/views/#core.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/core/views/#core.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/core/views/#core.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/core/views/#core.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/core/views/#core.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/core/views/#core.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/core/views/#core.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/core/views/#core.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/core/views/#core.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/core/views/#core.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/core/views/#core.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/core/views/#core.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/core/views/#core.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/core/views/#core.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/core/views/#core.views.Gift","title":"<code>Gift</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/views/#core.views.Preferences","title":"<code>Preferences</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/core/views/#core.views.QuickNotifMixin","title":"<code>QuickNotifMixin</code>","text":""},{"location":"reference/core/views/#core.views.QuickNotifMixin.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add quick notifications to context.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add quick notifications to context.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"quick_notifs\"] = []\n    for n in self.quick_notif_list:\n        kwargs[\"quick_notifs\"].append(settings.SITH_QUICK_NOTIF[n])\n    for key, val in settings.SITH_QUICK_NOTIF.items():\n        for gk in self.request.GET:\n            if key == gk:\n                kwargs[\"quick_notifs\"].append(val)\n    return kwargs\n</code></pre>"},{"location":"reference/core/views/#core.views.TabedViewMixin","title":"<code>TabedViewMixin</code>","text":"<p>               Bases: <code>View</code></p> <p>Basic functions for displaying tabs in the template.</p>"},{"location":"reference/core/views/#core.views.UseFragmentsMixin","title":"<code>UseFragmentsMixin</code>","text":"<p>               Bases: <code>ContextMixin</code></p> <p>Mark a view as using fragments.</p> <p>This mixin is not mandatory (you may as well render manually your fragments in the <code>get_context_data</code> method). However, the interface of this class bring some distinction between fragments and other context data, which may reduce boilerplate.</p> <p>Example</p> <pre><code>class FooFragment(FragmentMixin, FormView): ...\n\nclass BarFragment(FragmentMixin, FormView): ...\n\nclass AdminFragment(FragmentMixin, FormView): ...\n\nclass MyView(UseFragmentsMixin, TemplateView)\n    template_name = \"app/view.jinja\"\n    fragments = {\n        \"foo\": FooFragment\n        \"bar\": BarFragment(template_name=\"some_template.jinja\")\n    }\n    fragments_data = {\n        \"foo\": {\"some\": \"data\"}  # this will be passed to the FooFragment renderer\n    }\n\n    def get_fragments(self):\n        res = super().get_fragments()\n        if self.request.user.is_superuser:\n            res[\"admin_fragment\"] = AdminFragment\n        return res\n</code></pre>"},{"location":"reference/core/views/#core.views.UseFragmentsMixin.get_fragment_data","title":"<code>get_fragment_data()</code>","text":"<p>Return eventual data used to initialize the fragments.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_data(self) -&gt; dict[str, dict[str, Any]]:\n    \"\"\"Return eventual data used to initialize the fragments.\"\"\"\n    return self.fragment_data if self.fragment_data is not None else {}\n</code></pre>"},{"location":"reference/core/views/#core.views.UseFragmentsMixin.get_fragment_context_data","title":"<code>get_fragment_context_data()</code>","text":"<p>Return the rendered fragments as context data.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_context_data(self) -&gt; dict[str, SafeString]:\n    \"\"\"Return the rendered fragments as context data.\"\"\"\n    res = {}\n    data = self.get_fragment_data()\n    for name, fragment in self.get_fragments().items():\n        is_cls = inspect.isclass(fragment) and issubclass(fragment, FragmentMixin)\n        _fragment = fragment.as_fragment() if is_cls else fragment\n        fragment_data = data.get(name, {})\n        res[name] = _fragment(self.request, **fragment_data)\n    return res\n</code></pre>"},{"location":"reference/core/views/#core.views.SithLoginView","title":"<code>SithLoginView</code>","text":"<p>               Bases: <code>LoginView</code></p> <p>The login View.</p>"},{"location":"reference/core/views/#core.views.SithPasswordChangeView","title":"<code>SithPasswordChangeView</code>","text":"<p>               Bases: <code>PasswordChangeView</code></p> <p>Allows a user to change its password.</p>"},{"location":"reference/core/views/#core.views.SithPasswordChangeDoneView","title":"<code>SithPasswordChangeDoneView</code>","text":"<p>               Bases: <code>PasswordChangeDoneView</code></p> <p>Allows a user to change its password.</p>"},{"location":"reference/core/views/#core.views.SithPasswordResetView","title":"<code>SithPasswordResetView</code>","text":"<p>               Bases: <code>PasswordResetView</code></p> <p>Allows someone to enter an email address for resetting password.</p>"},{"location":"reference/core/views/#core.views.SithPasswordResetDoneView","title":"<code>SithPasswordResetDoneView</code>","text":"<p>               Bases: <code>PasswordResetDoneView</code></p> <p>Confirm that the reset email has been sent.</p>"},{"location":"reference/core/views/#core.views.SithPasswordResetConfirmView","title":"<code>SithPasswordResetConfirmView</code>","text":"<p>               Bases: <code>PasswordResetConfirmView</code></p> <p>Provide a reset password form.</p>"},{"location":"reference/core/views/#core.views.SithPasswordResetCompleteView","title":"<code>SithPasswordResetCompleteView</code>","text":"<p>               Bases: <code>PasswordResetCompleteView</code></p> <p>Confirm the password has successfully been reset.</p>"},{"location":"reference/core/views/#core.views.UserCreationView","title":"<code>UserCreationView</code>","text":"<p>               Bases: <code>FormView</code></p>"},{"location":"reference/core/views/#core.views.UserMeRedirect","title":"<code>UserMeRedirect</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/core/views/#core.views.UserTabsMixin","title":"<code>UserTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/core/views/#core.views.UserView","title":"<code>UserView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display a user's profile.</p>"},{"location":"reference/core/views/#core.views.UserGodfathersView","title":"<code>UserGodfathersView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code>, <code>FormView</code></p> <p>Display a user's godfathers.</p>"},{"location":"reference/core/views/#core.views.UserGodfathersTreeView","title":"<code>UserGodfathersTreeView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display a user's family tree.</p>"},{"location":"reference/core/views/#core.views.UserStatsView","title":"<code>UserStatsView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display a user's stats.</p>"},{"location":"reference/core/views/#core.views.UserMiniView","title":"<code>UserMiniView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display a user's profile.</p>"},{"location":"reference/core/views/#core.views.UserListView","title":"<code>UserListView</code>","text":"<p>               Bases: <code>ListView</code>, <code>CanEditPropMixin</code></p> <p>Displays the user list.</p>"},{"location":"reference/core/views/#core.views.UserUpdateProfileView","title":"<code>UserUpdateProfileView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanEditMixin</code>, <code>UpdateView</code></p> <p>Edit a user's profile.</p>"},{"location":"reference/core/views/#core.views.UserUpdateProfileView.remove_restricted_fields","title":"<code>remove_restricted_fields(request)</code>","text":"<p>Removes edit_once and board_only fields.</p> Source code in <code>core/views/user.py</code> <pre><code>def remove_restricted_fields(self, request):\n    \"\"\"Removes edit_once and board_only fields.\"\"\"\n    for i in self.edit_once:\n        if getattr(self.form.instance, i) and not (\n            request.user.is_board_member or request.user.is_root\n        ):\n            self.form.fields.pop(i, None)\n    for i in self.board_only:\n        if not (request.user.is_board_member or request.user.is_root):\n            self.form.fields.pop(i, None)\n</code></pre>"},{"location":"reference/core/views/#core.views.UserClubView","title":"<code>UserClubView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display the user's club(s).</p>"},{"location":"reference/core/views/#core.views.UserPreferencesView","title":"<code>UserPreferencesView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>UseFragmentsMixin</code>, <code>CanEditMixin</code>, <code>UpdateView</code></p> <p>Edit a user's preferences.</p>"},{"location":"reference/core/views/#core.views.UserUpdateGroupView","title":"<code>UserUpdateGroupView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanEditPropMixin</code>, <code>UpdateView</code></p> <p>Edit a user's groups.</p>"},{"location":"reference/core/views/#core.views.UserToolsView","title":"<code>UserToolsView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>QuickNotifMixin</code>, <code>UserTabsMixin</code>, <code>TemplateView</code></p> <p>Displays the logged user's tools.</p>"},{"location":"reference/core/views/#core.views.UserAccountBase","title":"<code>UserAccountBase</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>DetailView</code></p> <p>Base class for UserAccount.</p>"},{"location":"reference/core/views/#core.views.UserAccountView","title":"<code>UserAccountView</code>","text":"<p>               Bases: <code>UserAccountBase</code></p> <p>Display a user's account.</p>"},{"location":"reference/core/views/#core.views.UserAccountDetailView","title":"<code>UserAccountDetailView</code>","text":"<p>               Bases: <code>UserAccountBase</code>, <code>YearMixin</code>, <code>MonthMixin</code></p> <p>Display a user's account for month.</p>"},{"location":"reference/core/views/#core.views.GiftCreateView","title":"<code>GiftCreateView</code>","text":"<p>               Bases: <code>CreateView</code></p>"},{"location":"reference/core/views/#core.views.GiftDeleteView","title":"<code>GiftDeleteView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/core/views/#core.views.forbidden","title":"<code>forbidden(request, exception)</code>","text":"Source code in <code>core/views/__init__.py</code> <pre><code>def forbidden(request, exception):\n    context = {\"next\": request.path, \"form\": LoginForm()}\n    return HttpResponseForbidden(render(request, \"core/403.jinja\", context=context))\n</code></pre>"},{"location":"reference/core/views/#core.views.not_found","title":"<code>not_found(request, exception)</code>","text":"Source code in <code>core/views/__init__.py</code> <pre><code>def not_found(request, exception):\n    return HttpResponseNotFound(\n        render(request, \"core/404.jinja\", context={\"exception\": exception})\n    )\n</code></pre>"},{"location":"reference/core/views/#core.views.internal_servor_error","title":"<code>internal_servor_error(request)</code>","text":"Source code in <code>core/views/__init__.py</code> <pre><code>def internal_servor_error(request):\n    request.sentry_last_event_id = last_event_id\n    return HttpResponseServerError(render(request, \"core/500.jinja\"))\n</code></pre>"},{"location":"reference/core/views/#core.views.can_view","title":"<code>can_view(obj, user)</code>","text":"<p>Can the user see the object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to test for permission</p> required <code>user</code> <code>User</code> <p>core.models.User to test permissions against</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if user is authorized to see object else False</p> Example <pre><code>if not can_view(self.object ,request.user):\n    raise PermissionDenied\n</code></pre> Source code in <code>core/auth/mixins.py</code> <pre><code>def can_view(obj: Any, user: User) -&gt; bool:\n    \"\"\"Can the user see the object.\n\n    Args:\n        obj: Object to test for permission\n        user: core.models.User to test permissions against\n\n    Returns:\n        True if user is authorized to see object else False\n\n    Example:\n        ```python\n        if not can_view(self.object ,request.user):\n            raise PermissionDenied\n        ```\n    \"\"\"\n    if obj is None or user.can_view(obj):\n        return True\n    return can_edit(obj, user)\n</code></pre>"},{"location":"reference/core/views/#core.views.send_raw_file","title":"<code>send_raw_file(path)</code>","text":"<p>Send a file located in the MEDIA_ROOT</p> <p>This handles all the logic of using production reverse proxy or debug server.</p> <p>THIS DOESN'T CHECK ANY PERMISSIONS !</p> Source code in <code>core/views/files.py</code> <pre><code>def send_raw_file(path: Path) -&gt; HttpResponse:\n    \"\"\"Send a file located in the MEDIA_ROOT\n\n    This handles all the logic of using production reverse proxy or debug server.\n\n    THIS DOESN'T CHECK ANY PERMISSIONS !\n    \"\"\"\n    if not path.is_relative_to(settings.MEDIA_ROOT):\n        raise Http404\n\n    if not path.is_file() or not path.exists():\n        raise Http404\n\n    response = HttpResponse(\n        headers={\"Content-Disposition\": f'inline; filename=\"{quote(path.name)}\"'}\n    )\n    if not settings.DEBUG:\n        # When receiving a response with the Accel-Redirect header,\n        # the reverse proxy will automatically handle the file sending.\n        # This is really hard to test (thus isn't tested)\n        # so please do not mess with this.\n        response[\"Content-Type\"] = \"\"  # automatically set by nginx\n        response[\"X-Accel-Redirect\"] = quote(\n            urljoin(settings.MEDIA_URL, str(path.relative_to(settings.MEDIA_ROOT)))\n        )\n        return response\n\n    with open(path, \"rb\") as filename:\n        response.content = FileWrapper(filename)\n        response[\"Content-Type\"] = mimetypes.guess_type(path)[0]\n        response[\"Last-Modified\"] = http_date(path.stat().st_mtime)\n        response[\"Content-Length\"] = path.stat().st_size\n        return response\n</code></pre>"},{"location":"reference/core/views/#core.views.send_file","title":"<code>send_file(request, file_id, file_class=SithFile, file_attr='file')</code>","text":"<p>Send a protected file, if the user can see it.</p> <p>In prod, the server won't handle the download itself, but set the appropriate headers in the response to make the reverse-proxy deal with it. In debug mode, the server will directly send the file.</p> Source code in <code>core/views/files.py</code> <pre><code>def send_file(\n    request: HttpRequest,\n    file_id: int | str,\n    file_class: type[SithFile] = SithFile,\n    file_attr: str = \"file\",\n) -&gt; HttpResponse:\n    \"\"\"Send a protected file, if the user can see it.\n\n    In prod, the server won't handle the download itself,\n    but set the appropriate headers in the response to make the reverse-proxy\n    deal with it.\n    In debug mode, the server will directly send the file.\n    \"\"\"\n    f = get_object_or_404(file_class, pk=file_id)\n    if not can_view(f, request.user) and not is_logged_in_counter(request):\n        raise PermissionDenied\n    name = getattr(f, file_attr).name\n\n    return send_raw_file(settings.MEDIA_ROOT / name)\n</code></pre>"},{"location":"reference/core/views/#core.views.index","title":"<code>index(request, context=None)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>def index(request, context=None):\n    from com.views import NewsListView\n\n    return NewsListView.as_view()(request)\n</code></pre>"},{"location":"reference/core/views/#core.views.notification","title":"<code>notification(request, notif_id)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>def notification(request, notif_id):\n    notif = Notification.objects.filter(id=notif_id).first()\n    if notif:\n        if notif.type not in settings.SITH_PERMANENT_NOTIFICATIONS:\n            notif.viewed = True\n        else:\n            notif.callback()\n        notif.save()\n        return redirect(notif.url)\n    return redirect(\"/\")\n</code></pre>"},{"location":"reference/core/views/#core.views.search_user","title":"<code>search_user(query)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>def search_user(query):\n    try:\n        # slugify turns everything into ascii and every whitespace into -\n        # it ends by removing duplicate - (so ' - ' will turn into '-')\n        # replace('-', ' ') because search is whitespace based\n        query = slugify(query).replace(\"-\", \" \")\n        # TODO: is this necessary?\n        query = html.escape(query)\n        res = (\n            SearchQuerySet()\n            .models(User)\n            .autocomplete(auto=query)\n            .order_by(\"-last_login\")\n            .load_all()[:20]\n        )\n        return [r.object for r in res]\n    except TypeError:\n        return []\n</code></pre>"},{"location":"reference/core/views/#core.views.search_club","title":"<code>search_club(query, *, as_json=False)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>def search_club(query, *, as_json=False):\n    clubs = []\n    if query:\n        clubs = Club.objects.filter(name__icontains=query).all()\n        clubs = clubs[:5]\n        if as_json:\n            # Re-loads json to avoid double encoding by JsonResponse, but still benefit from serializers\n            clubs = json.loads(serializers.serialize(\"json\", clubs, fields=(\"name\")))\n        else:\n            clubs = list(clubs)\n    return clubs\n</code></pre>"},{"location":"reference/core/views/#core.views.search_view","title":"<code>search_view(request)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>@login_required\ndef search_view(request):\n    result = {\n        \"users\": search_user(request.GET.get(\"query\", \"\")),\n        \"clubs\": search_club(request.GET.get(\"query\", \"\")),\n    }\n    return render(request, \"core/search.jinja\", context={\"result\": result})\n</code></pre>"},{"location":"reference/core/views/#core.views.search_user_json","title":"<code>search_user_json(request)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>@login_required\ndef search_user_json(request):\n    result = {\"users\": search_user(request.GET.get(\"query\", \"\"))}\n    return JsonResponse(result)\n</code></pre>"},{"location":"reference/core/views/#core.views.search_json","title":"<code>search_json(request)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>@login_required\ndef search_json(request):\n    result = {\n        \"users\": search_user(request.GET.get(\"query\", \"\")),\n        \"clubs\": search_club(request.GET.get(\"query\", \"\"), as_json=True),\n    }\n    return JsonResponse(result)\n</code></pre>"},{"location":"reference/core/views/#core.views.logout","title":"<code>logout(request)</code>","text":"<p>The logout view.</p> Source code in <code>core/views/user.py</code> <pre><code>def logout(request):\n    \"\"\"The logout view.\"\"\"\n    return views.logout_then_login(request)\n</code></pre>"},{"location":"reference/core/views/#core.views.password_root_change","title":"<code>password_root_change(request, user_id)</code>","text":"<p>Allows a root user to change someone's password.</p> Source code in <code>core/views/user.py</code> <pre><code>def password_root_change(request, user_id):\n    \"\"\"Allows a root user to change someone's password.\"\"\"\n    if not request.user.is_root:\n        raise PermissionDenied\n    user = User.objects.filter(id=user_id).first()\n    if not user:\n        raise Http404(\"User not found\")\n    if request.method == \"POST\":\n        form = views.SetPasswordForm(user=user, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect(\"core:password_change_done\")\n    else:\n        form = views.SetPasswordForm(user=user)\n    return TemplateResponse(\n        request, \"core/password_change.jinja\", {\"form\": form, \"target\": user}\n    )\n</code></pre>"},{"location":"reference/core/views/#core.views.delete_user_godfather","title":"<code>delete_user_godfather(request, user_id, godfather_id, is_father)</code>","text":"Source code in <code>core/views/user.py</code> <pre><code>def delete_user_godfather(request, user_id, godfather_id, is_father):\n    user_is_admin = request.user.is_root or request.user.is_board_member\n    if user_id != request.user.id and not user_is_admin:\n        raise PermissionDenied()\n    user = get_object_or_404(User, id=user_id)\n    to_remove = get_object_or_404(User, id=godfather_id)\n    if is_father:\n        user.godfathers.remove(to_remove)\n    else:\n        user.godchildren.remove(to_remove)\n    return redirect(\"core:user_godfathers\", user_id=user_id)\n</code></pre>"},{"location":"reference/counter/models/","title":"Models","text":""},{"location":"reference/counter/models/#counter.models.PAYMENT_METHOD","title":"<code>PAYMENT_METHOD = [('CHECK', _('Check')), ('CASH', _('Cash')), ('CARD', _('Credit card'))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/counter/models/#counter.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/counter/models/#counter.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/counter/models/#counter.models.ResizedImageField","title":"<code>ResizedImageField(width=None, height=None, force_format=None, **kwargs)</code>","text":"<p>               Bases: <code>ImageField</code></p> <p>A field that automatically resizes images to a given size.</p> <p>This field is useful for profile pictures or product icons, for example.</p> <p>The final size of the image is determined by the width and height parameters :</p> <ul> <li>If both are given, the image will be resized   to fit in a rectangle of width x height</li> <li>If only one is given, the other will be calculated to keep the same ratio</li> </ul> <p>If the force_format parameter is given, the image will be converted to this format.</p> <p>Examples:</p> <p>To resize an image with a height of 100px, without changing the ratio, and a format of WEBP :</p> <pre><code>class Product(models.Model):\n    icon = ResizedImageField(height=100, force_format=\"WEBP\")\n</code></pre> <p>To explicitly resize an image to 100x100px (but possibly change the ratio) :</p> <pre><code>class Product(models.Model):\n    icon = ResizedImageField(width=100, height=100)\n</code></pre> <p>Raises:</p> Type Description <code>FieldError</code> <p>If neither width nor height is given</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int | None</code> <p>If given, the width of the resized image</p> <code>None</code> <code>height</code> <code>int | None</code> <p>If given, the height of the resized image</p> <code>None</code> <code>force_format</code> <code>str | None</code> <p>If given, the image will be converted to this format</p> <code>None</code> Source code in <code>core/fields.py</code> <pre><code>def __init__(\n    self,\n    width: int | None = None,\n    height: int | None = None,\n    force_format: str | None = None,\n    **kwargs,\n):\n    if width is None and height is None:\n        raise FieldError(\n            f\"{self.__class__.__name__} requires \"\n            \"width, height or both, but got neither\"\n        )\n    self.width = width\n    self.height = height\n    self.force_format = force_format\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/counter/models/#counter.models.Notification","title":"<code>Notification</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/counter/models/#counter.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/counter/models/#counter.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CurrencyField","title":"<code>CurrencyField(*args, **kwargs)</code>","text":"<p>               Bases: <code>DecimalField</code></p> <p>Custom database field used for currency.</p> Source code in <code>counter/fields.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    kwargs[\"max_digits\"] = 12\n    kwargs[\"decimal_places\"] = 2\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CustomerQuerySet","title":"<code>CustomerQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.CustomerQuerySet.update_amount","title":"<code>update_amount()</code>","text":"<p>Update the amount of all customers selected by this queryset.</p> <p>The result is given as the sum of all refills minus the sum of all purchases paid with the AE account.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of updated rows.</p> Warning <p>The execution time of this query grows really quickly. When updating 500 customers, it may take around a second. If you try to update all customers at once, the execution time goes up to tens of seconds. Use this either on a small subset of the <code>Customer</code> table, or execute it inside an independent task (like a Celery task or a management command).</p> Source code in <code>counter/models.py</code> <pre><code>def update_amount(self) -&gt; int:\n    \"\"\"Update the amount of all customers selected by this queryset.\n\n    The result is given as the sum of all refills\n    minus the sum of all purchases paid with the AE account.\n\n    Returns:\n        The number of updated rows.\n\n    Warning:\n        The execution time of this query grows really quickly.\n        When updating 500 customers, it may take around a second.\n        If you try to update all customers at once, the execution time\n        goes up to tens of seconds.\n        Use this either on a small subset of the `Customer` table,\n        or execute it inside an independent task\n        (like a Celery task or a management command).\n    \"\"\"\n    money_in = Subquery(\n        Refilling.objects.filter(customer=OuterRef(\"pk\"))\n        .values(\"customer_id\")  # group by customer\n        .annotate(res=Sum(F(\"amount\"), default=0))\n        .values(\"res\")\n    )\n    money_out = Subquery(\n        Selling.objects.filter(\n            customer=OuterRef(\"pk\"), payment_method=\"SITH_ACCOUNT\"\n        )\n        .values(\"customer_id\")\n        .annotate(res=Sum(F(\"unit_price\") * F(\"quantity\"), default=0))\n        .values(\"res\")\n    )\n    return self.update(amount=Coalesce(money_in - money_out, Decimal(\"0\")))\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Customer","title":"<code>Customer</code>","text":"<p>               Bases: <code>Model</code></p> <p>Customer data of a User.</p> <p>It adds some basic customers' information, such as the account ID, and is used by other accounting classes as reference to the customer, rather than using User.</p>"},{"location":"reference/counter/models/#counter.models.Customer.can_buy","title":"<code>can_buy</code>  <code>property</code>","text":"<p>Check if whether this customer has the right to purchase any item.</p> <p>This must be not confused with the Product.can_be_sold_to(user) method as the present method returns an information about a customer whereas the other tells something about the relation between a User (not a Customer, don't mix them) and a Product.</p>"},{"location":"reference/counter/models/#counter.models.Customer.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>is_selling : tell if the current action is a selling allow_negative : ignored if not a selling. Allow a selling to put the account in negative Those two parameters avoid blocking the save method of a customer if his account is negative.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"is_selling : tell if the current action is a selling\n    allow_negative : ignored if not a selling. Allow a selling to put the account in negative\n    Those two parameters avoid blocking the save method of a customer if his account is negative.\n    \"\"\"\n    if self.amount &lt; 0 and not allow_negative:\n        raise ValidationError(_(\"Not enough money\"))\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Customer.update_returnable_balance","title":"<code>update_returnable_balance()</code>","text":"<p>Update all returnable balances of this user to their real amount.</p> Source code in <code>counter/models.py</code> <pre><code>def update_returnable_balance(self):\n    \"\"\"Update all returnable balances of this user to their real amount.\"\"\"\n\n    def purchases_qs(outer_ref: Literal[\"product_id\", \"returned_product_id\"]):\n        return (\n            Selling.objects.filter(customer=self, product=OuterRef(outer_ref))\n            .values(\"product\")\n            .annotate(quantity=Sum(\"quantity\", default=0))\n            .values(\"quantity\")\n        )\n\n    balances = (\n        ReturnableProduct.objects.annotate_balance_for(self)\n        .annotate(\n            nb_cons=Coalesce(Subquery(purchases_qs(\"product_id\")), 0),\n            nb_dcons=Coalesce(Subquery(purchases_qs(\"returned_product_id\")), 0),\n        )\n        .annotate(new_balance=F(\"nb_cons\") - F(\"nb_dcons\"))\n        .values(\"id\", \"new_balance\")\n    )\n    updated_balances = [\n        ReturnableProductBalance(\n            customer=self, returnable_id=b[\"id\"], balance=b[\"new_balance\"]\n        )\n        for b in balances\n    ]\n    ReturnableProductBalance.objects.bulk_create(\n        updated_balances,\n        update_conflicts=True,\n        update_fields=[\"balance\"],\n        unique_fields=[\"customer\", \"returnable\"],\n    )\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Customer.get_or_create","title":"<code>get_or_create(user)</code>  <code>classmethod</code>","text":"<p>Work in pretty much the same way as the usual get_or_create method, but with the default field replaced by some under the hood.</p> <p>If the user has an account, return it as is. Else create a new account with no money on it and a new unique account id</p> <p>Example : ::</p> <pre><code>user = User.objects.get(pk=1)\naccount, created = Customer.get_or_create(user)\nif created:\n    print(f\"created a new account with id {account.id}\")\nelse:\n    print(f\"user has already an account, with {account.id} \u20ac on it\"\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>@classmethod\ndef get_or_create(cls, user: User) -&gt; tuple[Customer, bool]:\n    \"\"\"Work in pretty much the same way as the usual get_or_create method,\n    but with the default field replaced by some under the hood.\n\n    If the user has an account, return it as is.\n    Else create a new account with no money on it and a new unique account id\n\n    Example : ::\n\n        user = User.objects.get(pk=1)\n        account, created = Customer.get_or_create(user)\n        if created:\n            print(f\"created a new account with id {account.id}\")\n        else:\n            print(f\"user has already an account, with {account.id} \u20ac on it\"\n    \"\"\"\n    if hasattr(user, \"customer\"):\n        return user.customer, False\n\n    # account_id are always a number with a letter appended\n    account_id = (\n        Customer.objects.order_by(Length(\"account_id\"), \"account_id\")\n        .values(\"account_id\")\n        .last()\n    )\n    if account_id is None:\n        # legacy from the old site\n        account = cls.objects.create(user=user, account_id=\"1504a\")\n        return account, True\n\n    account_id = account_id[\"account_id\"]\n    account_num = int(account_id[:-1])\n    while Customer.objects.filter(account_id=account_id).exists():\n        # when entering the first iteration, we are using an already existing account id\n        # so the loop should always execute at least one time\n        account_num += 1\n        account_id = f\"{account_num}{random.choice(string.ascii_lowercase)}\"\n\n    account = cls.objects.create(user=user, account_id=account_id)\n    return account, True\n</code></pre>"},{"location":"reference/counter/models/#counter.models.BillingInfo","title":"<code>BillingInfo</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represent the billing information of a user, which are required by the 3D-Secure v2 system used by the etransaction module.</p>"},{"location":"reference/counter/models/#counter.models.BillingInfo.to_3dsv2_xml","title":"<code>to_3dsv2_xml()</code>","text":"<p>Convert the data from this model into a xml usable by the online paying service of the Cr\u00e9dit Agricole bank. see : <code>https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster</code>.</p> Source code in <code>counter/models.py</code> <pre><code>def to_3dsv2_xml(self) -&gt; str:\n    \"\"\"Convert the data from this model into a xml usable\n    by the online paying service of the Cr\u00e9dit Agricole bank.\n    see : `https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster`.\n    \"\"\"\n    data = {\n        \"Address\": {\n            \"FirstName\": self.first_name,\n            \"LastName\": self.last_name,\n            \"Address1\": self.address_1,\n            \"ZipCode\": self.zip_code,\n            \"City\": self.city,\n            \"CountryCode\": self.country.numeric,  # ISO-3166-1 numeric code\n            \"MobilePhone\": self.phone_number.as_national.replace(\" \", \"\"),\n            \"CountryCodeMobilePhone\": f\"+{self.phone_number.country_code}\",\n        }\n    }\n    if self.address_2:\n        data[\"Address\"][\"Address2\"] = self.address_2\n    xml = dict2xml(data, wrap=\"Billing\", newlines=False)\n    return '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;' + xml\n</code></pre>"},{"location":"reference/counter/models/#counter.models.AccountDumpQuerySet","title":"<code>AccountDumpQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.AccountDumpQuerySet.ongoing","title":"<code>ongoing()</code>","text":"<p>Filter dump operations that are not completed yet.</p> Source code in <code>counter/models.py</code> <pre><code>def ongoing(self) -&gt; Self:\n    \"\"\"Filter dump operations that are not completed yet.\"\"\"\n    return self.filter(dump_operation=None)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.AccountDump","title":"<code>AccountDump</code>","text":"<p>               Bases: <code>Model</code></p> <p>The process of dumping an account.</p>"},{"location":"reference/counter/models/#counter.models.ProductType","title":"<code>ProductType</code>","text":"<p>               Bases: <code>OrderedModel</code></p> <p>A product type.</p> <p>Useful only for categorizing.</p>"},{"location":"reference/counter/models/#counter.models.ProductType.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Product","title":"<code>Product</code>","text":"<p>               Bases: <code>Model</code></p> <p>A product, with all its related information.</p>"},{"location":"reference/counter/models/#counter.models.Product.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(\n        pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID\n    ) or user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Product.can_be_sold_to","title":"<code>can_be_sold_to(user)</code>","text":"<p>Check if whether the user given in parameter has the right to buy this product or not.</p> <p>This must be not confused with the Customer.can_buy() method as the present method returns an information about the relation between a User and a Product, whereas the other tells something about a Customer (and not a user, they are not the same model).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user can buy this product else False</p> Warning <p>This performs a db query, thus you can quickly have a N+1 queries problem if you call it in a loop. Hopefully, you can avoid that if you prefetch the buying_groups :</p> <pre><code>user = User.objects.get(username=\"foobar\")\nproducts = [\n    p\n    for p in Product.objects.prefetch_related(\"buying_groups\")\n    if p.can_be_sold_to(user)\n]\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>def can_be_sold_to(self, user: User) -&gt; bool:\n    \"\"\"Check if whether the user given in parameter has the right to buy\n    this product or not.\n\n    This must be not confused with the Customer.can_buy()\n    method as the present method returns an information\n    about the relation between a User and a Product,\n    whereas the other tells something about a Customer\n    (and not a user, they are not the same model).\n\n    Returns:\n        True if the user can buy this product else False\n\n    Warning:\n        This performs a db query, thus you can quickly have\n        a N+1 queries problem if you call it in a loop.\n        Hopefully, you can avoid that if you prefetch the buying_groups :\n\n        ```python\n        user = User.objects.get(username=\"foobar\")\n        products = [\n            p\n            for p in Product.objects.prefetch_related(\"buying_groups\")\n            if p.can_be_sold_to(user)\n        ]\n        ```\n    \"\"\"\n    buying_groups = list(self.buying_groups.all())\n    if not buying_groups:\n        return True\n    return any(user.is_in_group(pk=group.id) for group in buying_groups)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CounterQuerySet","title":"<code>CounterQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.CounterQuerySet.annotate_has_barman","title":"<code>annotate_has_barman(user)</code>","text":"<p>Annotate the queryset with the <code>user_is_barman</code> field.</p> <p>For each counter, this field has value True if the user is a barman of this counter, else False.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>the user we want to check if he is a barman</p> required <p>Examples:</p> <pre><code>sli = User.objects.get(username=\"sli\")\ncounters = (\n    Counter.objects\n    .annotate_has_barman(sli)  # add the user_has_barman boolean field\n    .filter(has_annotated_barman=True)  # keep only counters where this user is barman\n)\nprint(\"Sli est barman dans les comptoirs suivants :\")\nfor counter in counters:\n    print(f\"- {counter.name}\")\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>def annotate_has_barman(self, user: User) -&gt; Self:\n    \"\"\"Annotate the queryset with the `user_is_barman` field.\n\n    For each counter, this field has value True if the user\n    is a barman of this counter, else False.\n\n    Args:\n        user: the user we want to check if he is a barman\n\n    Examples:\n        ```python\n        sli = User.objects.get(username=\"sli\")\n        counters = (\n            Counter.objects\n            .annotate_has_barman(sli)  # add the user_has_barman boolean field\n            .filter(has_annotated_barman=True)  # keep only counters where this user is barman\n        )\n        print(\"Sli est barman dans les comptoirs suivants :\")\n        for counter in counters:\n            print(f\"- {counter.name}\")\n        ```\n    \"\"\"\n    subquery = user.counters.filter(pk=OuterRef(\"pk\"))\n    return self.annotate(has_annotated_barman=Exists(subquery))\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CounterQuerySet.annotate_is_open","title":"<code>annotate_is_open()</code>","text":"<p>Annotate tue queryset with the <code>is_open</code> field.</p> <p>For each counter, if <code>is_open=True</code>, then the counter is currently opened. Else the counter is closed.</p> Source code in <code>counter/models.py</code> <pre><code>def annotate_is_open(self) -&gt; Self:\n    \"\"\"Annotate tue queryset with the `is_open` field.\n\n    For each counter, if `is_open=True`, then the counter is currently opened.\n    Else the counter is closed.\n    \"\"\"\n    return self.annotate(\n        is_open=Exists(\n            Permanency.objects.filter(counter_id=OuterRef(\"pk\"), end=None)\n        )\n    )\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CounterQuerySet.handle_timeout","title":"<code>handle_timeout()</code>","text":"<p>Disconnect the barmen who are inactive in the given counters.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of affected rows (ie, the number of timeouted permanences)</p> Source code in <code>counter/models.py</code> <pre><code>def handle_timeout(self) -&gt; int:\n    \"\"\"Disconnect the barmen who are inactive in the given counters.\n\n    Returns:\n        The number of affected rows (ie, the number of timeouted permanences)\n    \"\"\"\n    timeout = timezone.now() - timedelta(minutes=settings.SITH_BARMAN_TIMEOUT)\n    return Permanency.objects.filter(\n        counter__in=self, end=None, activity__lt=timeout\n    ).update(end=F(\"activity\"))\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter","title":"<code>Counter</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/counter/models/#counter.models.Counter.gen_token","title":"<code>gen_token()</code>","text":"<p>Generate a new token for this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def gen_token(self) -&gt; None:\n    \"\"\"Generate a new token for this counter.\"\"\"\n    self.token = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(30)\n    )\n    self.save()\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.barmen_list","title":"<code>barmen_list()</code>","text":"<p>Returns the barman list as list of User.</p> Source code in <code>counter/models.py</code> <pre><code>@cached_property\ndef barmen_list(self) -&gt; list[User]:\n    \"\"\"Returns the barman list as list of User.\"\"\"\n    return [\n        p.user for p in self.permanencies.filter(end=None).select_related(\"user\")\n    ]\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.get_random_barman","title":"<code>get_random_barman()</code>","text":"<p>Return a random user being currently a barman.</p> Source code in <code>counter/models.py</code> <pre><code>def get_random_barman(self) -&gt; User:\n    \"\"\"Return a random user being currently a barman.\"\"\"\n    return random.choice(self.barmen_list)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.update_activity","title":"<code>update_activity()</code>","text":"<p>Update the barman activity to prevent timeout.</p> Source code in <code>counter/models.py</code> <pre><code>def update_activity(self) -&gt; None:\n    \"\"\"Update the barman activity to prevent timeout.\"\"\"\n    self.permanencies.filter(end=None).update(activity=timezone.now())\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.can_refill","title":"<code>can_refill()</code>","text":"<p>Show if the counter authorize the refilling with physic money.</p> Source code in <code>counter/models.py</code> <pre><code>def can_refill(self) -&gt; bool:\n    \"\"\"Show if the counter authorize the refilling with physic money.\"\"\"\n    if self.type != \"BAR\":\n        return False\n    # at least one of the barmen is in the AE board\n    ae = Club.objects.get(id=settings.SITH_MAIN_CLUB_ID)\n    return any(ae.get_membership_for(barman) for barman in self.barmen_list)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.get_top_barmen","title":"<code>get_top_barmen()</code>","text":"<p>Return a QuerySet querying the office hours stats of all the barmen of all time of this counter, ordered by descending number of hours.</p> Each element of the QuerySet corresponds to a barman and has the following data <ul> <li>the full name (first name + last name) of the barman</li> <li>the nickname of the barman</li> <li>the promo of the barman</li> <li>the total number of office hours the barman did attend</li> </ul> Source code in <code>counter/models.py</code> <pre><code>def get_top_barmen(self) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the office hours stats of all the barmen of all time\n    of this counter, ordered by descending number of hours.\n\n    Each element of the QuerySet corresponds to a barman and has the following data :\n        - the full name (first name + last name) of the barman\n        - the nickname of the barman\n        - the promo of the barman\n        - the total number of office hours the barman did attend\n    \"\"\"\n    name_expr = Concat(F(\"user__first_name\"), Value(\" \"), F(\"user__last_name\"))\n    return (\n        self.permanencies.exclude(end=None)\n        .annotate(\n            name=name_expr, nickname=F(\"user__nick_name\"), promo=F(\"user__promo\")\n        )\n        .values(\"user\", \"name\", \"nickname\", \"promo\")\n        .annotate(perm_sum=Sum(F(\"end\") - F(\"start\")))\n        .exclude(perm_sum=None)\n        .order_by(\"-perm_sum\")\n    )\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.get_top_customers","title":"<code>get_top_customers(since=None)</code>","text":"<p>Return a QuerySet querying the money spent by customers of this counter since the specified date, ordered by descending amount of money spent.</p> <p>Each element of the QuerySet corresponds to a customer and has the following data :</p> <ul> <li>the full name (first name + last name) of the customer</li> <li>the nickname of the customer</li> <li>the amount of money spent by the customer</li> </ul> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> Source code in <code>counter/models.py</code> <pre><code>def get_top_customers(self, since: datetime | date | None = None) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the money spent by customers of this counter\n    since the specified date, ordered by descending amount of money spent.\n\n    Each element of the QuerySet corresponds to a customer and has the following data :\n\n    - the full name (first name + last name) of the customer\n    - the nickname of the customer\n    - the amount of money spent by the customer\n\n    Args:\n        since: timestamp from which to perform the calculation\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    name_expr = Concat(\n        F(\"customer__user__first_name\"), Value(\" \"), F(\"customer__user__last_name\")\n    )\n    return (\n        self.sellings.filter(date__gte=since)\n        .annotate(\n            name=name_expr,\n            nickname=F(\"customer__user__nick_name\"),\n            promo=F(\"customer__user__promo\"),\n            user=F(\"customer__user\"),\n        )\n        .values(\"user\", \"promo\", \"name\", \"nickname\")\n        .annotate(\n            selling_sum=Sum(\n                F(\"unit_price\") * F(\"quantity\"), output_field=CurrencyField()\n            )\n        )\n        .filter(selling_sum__gt=0)\n        .order_by(\"-selling_sum\")\n    )\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.get_total_sales","title":"<code>get_total_sales(since=None)</code>","text":"<p>Compute and return the total turnover of this counter since the given date.</p> <p>By default, the date is the start of the current semester.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> <p>Returns:</p> Type Description <code>CurrencyField</code> <p>Total revenue earned at this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def get_total_sales(self, since: datetime | date | None = None) -&gt; CurrencyField:\n    \"\"\"Compute and return the total turnover of this counter since the given date.\n\n    By default, the date is the start of the current semester.\n\n    Args:\n        since: timestamp from which to perform the calculation\n\n    Returns:\n        Total revenue earned at this counter.\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    return self.sellings.filter(date__gte=since).aggregate(\n        total=Sum(\n            F(\"quantity\") * F(\"unit_price\"),\n            default=0,\n            output_field=CurrencyField(),\n        )\n    )[\"total\"]\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.customer_is_barman","title":"<code>customer_is_barman(customer)</code>","text":"<p>Check if this counter is a <code>bar</code> and if the customer is currently logged in. This is useful to compute special prices.</p> Source code in <code>counter/models.py</code> <pre><code>def customer_is_barman(self, customer: Customer | User) -&gt; bool:\n    \"\"\"Check if this counter is a `bar` and if the customer is currently logged in.\n    This is useful to compute special prices.\"\"\"\n\n    # Customer and User are two different tables,\n    # but they share the same primary key\n    return self.type == \"BAR\" and any(b.pk == customer.pk for b in self.barmen_list)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Counter.get_products_for","title":"<code>get_products_for(customer)</code>","text":"<p>Get all allowed products for the provided customer on this counter Prices will be annotated</p> Source code in <code>counter/models.py</code> <pre><code>def get_products_for(self, customer: Customer) -&gt; list[Product]:\n    \"\"\"\n    Get all allowed products for the provided customer on this counter\n    Prices will be annotated\n    \"\"\"\n\n    products = (\n        self.products.filter(archived=False)\n        .select_related(\"product_type\")\n        .prefetch_related(\"buying_groups\")\n    )\n\n    # Only include age appropriate products\n    age = customer.user.age\n    if customer.user.is_banned_alcohol:\n        age = min(age, 17)\n    products = products.filter(limit_age__lte=age)\n\n    # Compute special price for customer if he is a barmen on that bar\n    if self.customer_is_barman(customer):\n        products = products.annotate(price=F(\"special_selling_price\"))\n    else:\n        products = products.annotate(price=F(\"selling_price\"))\n\n    return [\n        product\n        for product in products.all()\n        if product.can_be_sold_to(customer.user)\n    ]\n</code></pre>"},{"location":"reference/counter/models/#counter.models.RefillingQuerySet","title":"<code>RefillingQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.RefillingQuerySet.annotate_total","title":"<code>annotate_total()</code>","text":"<p>Annotate the Queryset with the total amount.</p> <p>The total is just the sum of the amounts for each row. If no grouping is involved (like in most queries), this is just the same as doing nothing and fetching the <code>amount</code> attribute.</p> <p>However, it may be useful when there is a <code>group by</code> clause in the query, or when other models are queried and having a common interface is helpful (e.g. <code>Selling.objects.annotate_total()</code> and <code>Refilling.objects.annotate_total()</code> will both have the <code>total</code> field).</p> Source code in <code>counter/models.py</code> <pre><code>def annotate_total(self) -&gt; Self:\n    \"\"\"Annotate the Queryset with the total amount.\n\n    The total is just the sum of the amounts for each row.\n    If no grouping is involved (like in most queries),\n    this is just the same as doing nothing and fetching the\n    `amount` attribute.\n\n    However, it may be useful when there is a `group by` clause\n    in the query, or when other models are queried and having\n    a common interface is helpful (e.g. `Selling.objects.annotate_total()`\n    and `Refilling.objects.annotate_total()` will both have the `total` field).\n    \"\"\"\n    return self.annotate(total=Sum(\"amount\"))\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Refilling","title":"<code>Refilling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the refilling.</p>"},{"location":"reference/counter/models/#counter.models.SellingQuerySet","title":"<code>SellingQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.SellingQuerySet.annotate_total","title":"<code>annotate_total()</code>","text":"<p>Annotate the Queryset with the total amount of the sales.</p> <p>The total is considered as the sum of (unit_price * quantity).</p> Source code in <code>counter/models.py</code> <pre><code>def annotate_total(self) -&gt; Self:\n    \"\"\"Annotate the Queryset with the total amount of the sales.\n\n    The total is considered as the sum of (unit_price * quantity).\n    \"\"\"\n    return self.annotate(total=Sum(F(\"unit_price\") * F(\"quantity\")))\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Selling","title":"<code>Selling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the sellings.</p>"},{"location":"reference/counter/models/#counter.models.Selling.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>allow_negative : Allow this selling to use more money than available for this user.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"allow_negative : Allow this selling to use more money than available for this user.\"\"\"\n    if not self.date:\n        self.date = timezone.now()\n    self.full_clean()\n    if not self.is_validated:\n        self.customer.amount -= self.quantity * self.unit_price\n        self.customer.save(allow_negative=allow_negative)\n        self.is_validated = True\n    user = self.customer.user\n    if user.was_subscribed:\n        if (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_ONE_SEMESTER\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"un-semestre\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n        elif (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_TWO_SEMESTERS\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"deux-semestres\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n    if user.preferences.notify_on_click:\n        Notification(\n            user=user,\n            url=reverse(\n                \"core:user_account_detail\",\n                kwargs={\n                    \"user_id\": user.id,\n                    \"year\": self.date.year,\n                    \"month\": self.date.month,\n                },\n            ),\n            param=\"%d x %s\" % (self.quantity, self.label),\n            type=\"SELLING\",\n        ).save()\n    super().save(*args, **kwargs)\n    if hasattr(self.product, \"eticket\"):\n        self.send_mail_customer()\n</code></pre>"},{"location":"reference/counter/models/#counter.models.Permanency","title":"<code>Permanency</code>","text":"<p>               Bases: <code>Model</code></p> <p>A permanency of a barman, on a counter.</p> <p>This aims at storing a traceability of who was barman where and when. Mainly for dick size contest establishing the top 10 barmen of the semester.</p>"},{"location":"reference/counter/models/#counter.models.CashRegisterSummary","title":"<code>CashRegisterSummary</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/counter/models/#counter.models.CashRegisterSummary.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.CashRegisterSummaryItem","title":"<code>CashRegisterSummaryItem</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/counter/models/#counter.models.Eticket","title":"<code>Eticket</code>","text":"<p>               Bases: <code>Model</code></p> <p>Eticket can be linked to a product an allows PDF generation.</p>"},{"location":"reference/counter/models/#counter.models.Eticket.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.StudentCard","title":"<code>StudentCard</code>","text":"<p>               Bases: <code>Model</code></p> <p>Alternative way to connect a customer into a counter.</p> <p>We are using Mifare DESFire EV1 specs since it's used for izly cards https://www.nxp.com/docs/en/application-note/AN10927.pdf UID is 7 byte long that means 14 hexa characters.</p>"},{"location":"reference/counter/models/#counter.models.ReturnableProductQuerySet","title":"<code>ReturnableProductQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/counter/models/#counter.models.ReturnableProduct","title":"<code>ReturnableProduct</code>","text":"<p>               Bases: <code>Model</code></p> <p>A returnable relation between two products (consigne/d\u00e9consigne).</p>"},{"location":"reference/counter/models/#counter.models.ReturnableProduct.update_balances","title":"<code>update_balances()</code>","text":"<p>Update all returnable balances linked to this object.</p> <p>Call this when a ReturnableProduct is created or updated.</p> Warning <p>This function is expensive (around a few seconds), so try not to run it outside a management command or a task.</p> Source code in <code>counter/models.py</code> <pre><code>def update_balances(self):\n    \"\"\"Update all returnable balances linked to this object.\n\n    Call this when a ReturnableProduct is created or updated.\n\n    Warning:\n        This function is expensive (around a few seconds),\n        so try not to run it outside a management command\n        or a task.\n    \"\"\"\n\n    def product_balance_subquery(product_id: int):\n        return Subquery(\n            Selling.objects.filter(customer=OuterRef(\"pk\"), product_id=product_id)\n            .values(\"customer\")\n            .annotate(res=Sum(\"quantity\"))\n            .values(\"res\")\n        )\n\n    old_balance_subquery = Subquery(\n        ReturnableProductBalance.objects.filter(\n            customer=OuterRef(\"pk\"), returnable=self\n        ).values(\"balance\")\n    )\n    new_balances = (\n        Customer.objects.annotate(\n            nb_cons=Coalesce(product_balance_subquery(self.product_id), 0),\n            nb_dcons=Coalesce(\n                product_balance_subquery(self.returned_product_id), 0\n            ),\n        )\n        .annotate(new_balance=F(\"nb_cons\") - F(\"nb_dcons\"))\n        .exclude(new_balance=Coalesce(old_balance_subquery, 0))\n        .values(\"pk\", \"new_balance\")\n    )\n    updates = [\n        ReturnableProductBalance(\n            customer_id=c[\"pk\"], returnable=self, balance=c[\"new_balance\"]\n        )\n        for c in new_balances\n    ]\n    ReturnableProductBalance.objects.bulk_create(\n        updates,\n        update_conflicts=True,\n        update_fields=[\"balance\"],\n        unique_fields=[\"customer_id\", \"returnable\"],\n    )\n</code></pre>"},{"location":"reference/counter/models/#counter.models.ReturnableProductBalance","title":"<code>ReturnableProductBalance</code>","text":"<p>               Bases: <code>Model</code></p> <p>The returnable products balances of a customer</p>"},{"location":"reference/counter/models/#counter.models.get_start_of_semester","title":"<code>get_start_of_semester(today=None)</code>","text":"<p>Return the date of the start of the semester of the given date. If no date is given, return the start date of the current semester.</p> <p>The current semester is computed as follows:</p> <ul> <li>If the date is between 15/08 and 31/12  =&gt; Autumn semester.</li> <li>If the date is between 01/01 and 15/02  =&gt; Autumn semester of the previous year.</li> <li>If the date is between 15/02 and 15/08  =&gt; Spring semester</li> </ul> <p>Parameters:</p> Name Type Description Default <code>today</code> <code>date | None</code> <p>the date to use to compute the semester. If None, use today's date.</p> <code>None</code> <p>Returns:</p> Type Description <code>date</code> <p>the date of the start of the semester</p> Source code in <code>core/utils.py</code> <pre><code>def get_start_of_semester(today: date | None = None) -&gt; date:\n    \"\"\"Return the date of the start of the semester of the given date.\n    If no date is given, return the start date of the current semester.\n\n    The current semester is computed as follows:\n\n    - If the date is between 15/08 and 31/12  =&gt; Autumn semester.\n    - If the date is between 01/01 and 15/02  =&gt; Autumn semester of the previous year.\n    - If the date is between 15/02 and 15/08  =&gt; Spring semester\n\n    Args:\n        today: the date to use to compute the semester. If None, use today's date.\n\n    Returns:\n        the date of the start of the semester\n    \"\"\"\n    if today is None:\n        today = localdate()\n\n    autumn = date(today.year, *settings.SITH_SEMESTER_START_AUTUMN)\n    spring = date(today.year, *settings.SITH_SEMESTER_START_SPRING)\n\n    if today &gt;= autumn:  # between 15/08 (included) and 31/12 -&gt; autumn semester\n        return autumn\n    if today &gt;= spring:  # between 15/02 (included) and 15/08 -&gt; spring semester\n        return spring\n    # between 01/01 and 15/02 -&gt; autumn semester of the previous year\n    return autumn.replace(year=autumn.year - 1)\n</code></pre>"},{"location":"reference/counter/models/#counter.models.get_eboutic","title":"<code>get_eboutic()</code>","text":"Source code in <code>counter/models.py</code> <pre><code>def get_eboutic() -&gt; Counter:\n    return Counter.objects.filter(type=\"EBOUTIC\").order_by(\"id\").first()\n</code></pre>"},{"location":"reference/counter/schemas/","title":"Schemas","text":""},{"location":"reference/counter/schemas/#counter.schemas.SimpleClubSchema","title":"<code>SimpleClubSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.GroupSchema","title":"<code>GroupSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.SimpleUserSchema","title":"<code>SimpleUserSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>A schema with the minimum amount of information to represent a user.</p>"},{"location":"reference/counter/schemas/#counter.schemas.Counter","title":"<code>Counter</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.gen_token","title":"<code>gen_token()</code>","text":"<p>Generate a new token for this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def gen_token(self) -&gt; None:\n    \"\"\"Generate a new token for this counter.\"\"\"\n    self.token = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(30)\n    )\n    self.save()\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.barmen_list","title":"<code>barmen_list()</code>","text":"<p>Returns the barman list as list of User.</p> Source code in <code>counter/models.py</code> <pre><code>@cached_property\ndef barmen_list(self) -&gt; list[User]:\n    \"\"\"Returns the barman list as list of User.\"\"\"\n    return [\n        p.user for p in self.permanencies.filter(end=None).select_related(\"user\")\n    ]\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.get_random_barman","title":"<code>get_random_barman()</code>","text":"<p>Return a random user being currently a barman.</p> Source code in <code>counter/models.py</code> <pre><code>def get_random_barman(self) -&gt; User:\n    \"\"\"Return a random user being currently a barman.\"\"\"\n    return random.choice(self.barmen_list)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.update_activity","title":"<code>update_activity()</code>","text":"<p>Update the barman activity to prevent timeout.</p> Source code in <code>counter/models.py</code> <pre><code>def update_activity(self) -&gt; None:\n    \"\"\"Update the barman activity to prevent timeout.\"\"\"\n    self.permanencies.filter(end=None).update(activity=timezone.now())\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.can_refill","title":"<code>can_refill()</code>","text":"<p>Show if the counter authorize the refilling with physic money.</p> Source code in <code>counter/models.py</code> <pre><code>def can_refill(self) -&gt; bool:\n    \"\"\"Show if the counter authorize the refilling with physic money.\"\"\"\n    if self.type != \"BAR\":\n        return False\n    # at least one of the barmen is in the AE board\n    ae = Club.objects.get(id=settings.SITH_MAIN_CLUB_ID)\n    return any(ae.get_membership_for(barman) for barman in self.barmen_list)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.get_top_barmen","title":"<code>get_top_barmen()</code>","text":"<p>Return a QuerySet querying the office hours stats of all the barmen of all time of this counter, ordered by descending number of hours.</p> Each element of the QuerySet corresponds to a barman and has the following data <ul> <li>the full name (first name + last name) of the barman</li> <li>the nickname of the barman</li> <li>the promo of the barman</li> <li>the total number of office hours the barman did attend</li> </ul> Source code in <code>counter/models.py</code> <pre><code>def get_top_barmen(self) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the office hours stats of all the barmen of all time\n    of this counter, ordered by descending number of hours.\n\n    Each element of the QuerySet corresponds to a barman and has the following data :\n        - the full name (first name + last name) of the barman\n        - the nickname of the barman\n        - the promo of the barman\n        - the total number of office hours the barman did attend\n    \"\"\"\n    name_expr = Concat(F(\"user__first_name\"), Value(\" \"), F(\"user__last_name\"))\n    return (\n        self.permanencies.exclude(end=None)\n        .annotate(\n            name=name_expr, nickname=F(\"user__nick_name\"), promo=F(\"user__promo\")\n        )\n        .values(\"user\", \"name\", \"nickname\", \"promo\")\n        .annotate(perm_sum=Sum(F(\"end\") - F(\"start\")))\n        .exclude(perm_sum=None)\n        .order_by(\"-perm_sum\")\n    )\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.get_top_customers","title":"<code>get_top_customers(since=None)</code>","text":"<p>Return a QuerySet querying the money spent by customers of this counter since the specified date, ordered by descending amount of money spent.</p> <p>Each element of the QuerySet corresponds to a customer and has the following data :</p> <ul> <li>the full name (first name + last name) of the customer</li> <li>the nickname of the customer</li> <li>the amount of money spent by the customer</li> </ul> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> Source code in <code>counter/models.py</code> <pre><code>def get_top_customers(self, since: datetime | date | None = None) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the money spent by customers of this counter\n    since the specified date, ordered by descending amount of money spent.\n\n    Each element of the QuerySet corresponds to a customer and has the following data :\n\n    - the full name (first name + last name) of the customer\n    - the nickname of the customer\n    - the amount of money spent by the customer\n\n    Args:\n        since: timestamp from which to perform the calculation\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    name_expr = Concat(\n        F(\"customer__user__first_name\"), Value(\" \"), F(\"customer__user__last_name\")\n    )\n    return (\n        self.sellings.filter(date__gte=since)\n        .annotate(\n            name=name_expr,\n            nickname=F(\"customer__user__nick_name\"),\n            promo=F(\"customer__user__promo\"),\n            user=F(\"customer__user\"),\n        )\n        .values(\"user\", \"promo\", \"name\", \"nickname\")\n        .annotate(\n            selling_sum=Sum(\n                F(\"unit_price\") * F(\"quantity\"), output_field=CurrencyField()\n            )\n        )\n        .filter(selling_sum__gt=0)\n        .order_by(\"-selling_sum\")\n    )\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.get_total_sales","title":"<code>get_total_sales(since=None)</code>","text":"<p>Compute and return the total turnover of this counter since the given date.</p> <p>By default, the date is the start of the current semester.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> <p>Returns:</p> Type Description <code>CurrencyField</code> <p>Total revenue earned at this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def get_total_sales(self, since: datetime | date | None = None) -&gt; CurrencyField:\n    \"\"\"Compute and return the total turnover of this counter since the given date.\n\n    By default, the date is the start of the current semester.\n\n    Args:\n        since: timestamp from which to perform the calculation\n\n    Returns:\n        Total revenue earned at this counter.\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    return self.sellings.filter(date__gte=since).aggregate(\n        total=Sum(\n            F(\"quantity\") * F(\"unit_price\"),\n            default=0,\n            output_field=CurrencyField(),\n        )\n    )[\"total\"]\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.customer_is_barman","title":"<code>customer_is_barman(customer)</code>","text":"<p>Check if this counter is a <code>bar</code> and if the customer is currently logged in. This is useful to compute special prices.</p> Source code in <code>counter/models.py</code> <pre><code>def customer_is_barman(self, customer: Customer | User) -&gt; bool:\n    \"\"\"Check if this counter is a `bar` and if the customer is currently logged in.\n    This is useful to compute special prices.\"\"\"\n\n    # Customer and User are two different tables,\n    # but they share the same primary key\n    return self.type == \"BAR\" and any(b.pk == customer.pk for b in self.barmen_list)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Counter.get_products_for","title":"<code>get_products_for(customer)</code>","text":"<p>Get all allowed products for the provided customer on this counter Prices will be annotated</p> Source code in <code>counter/models.py</code> <pre><code>def get_products_for(self, customer: Customer) -&gt; list[Product]:\n    \"\"\"\n    Get all allowed products for the provided customer on this counter\n    Prices will be annotated\n    \"\"\"\n\n    products = (\n        self.products.filter(archived=False)\n        .select_related(\"product_type\")\n        .prefetch_related(\"buying_groups\")\n    )\n\n    # Only include age appropriate products\n    age = customer.user.age\n    if customer.user.is_banned_alcohol:\n        age = min(age, 17)\n    products = products.filter(limit_age__lte=age)\n\n    # Compute special price for customer if he is a barmen on that bar\n    if self.customer_is_barman(customer):\n        products = products.annotate(price=F(\"special_selling_price\"))\n    else:\n        products = products.annotate(price=F(\"selling_price\"))\n\n    return [\n        product\n        for product in products.all()\n        if product.can_be_sold_to(customer.user)\n    ]\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Product","title":"<code>Product</code>","text":"<p>               Bases: <code>Model</code></p> <p>A product, with all its related information.</p>"},{"location":"reference/counter/schemas/#counter.schemas.Product.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(\n        pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID\n    ) or user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.Product.can_be_sold_to","title":"<code>can_be_sold_to(user)</code>","text":"<p>Check if whether the user given in parameter has the right to buy this product or not.</p> <p>This must be not confused with the Customer.can_buy() method as the present method returns an information about the relation between a User and a Product, whereas the other tells something about a Customer (and not a user, they are not the same model).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user can buy this product else False</p> Warning <p>This performs a db query, thus you can quickly have a N+1 queries problem if you call it in a loop. Hopefully, you can avoid that if you prefetch the buying_groups :</p> <pre><code>user = User.objects.get(username=\"foobar\")\nproducts = [\n    p\n    for p in Product.objects.prefetch_related(\"buying_groups\")\n    if p.can_be_sold_to(user)\n]\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>def can_be_sold_to(self, user: User) -&gt; bool:\n    \"\"\"Check if whether the user given in parameter has the right to buy\n    this product or not.\n\n    This must be not confused with the Customer.can_buy()\n    method as the present method returns an information\n    about the relation between a User and a Product,\n    whereas the other tells something about a Customer\n    (and not a user, they are not the same model).\n\n    Returns:\n        True if the user can buy this product else False\n\n    Warning:\n        This performs a db query, thus you can quickly have\n        a N+1 queries problem if you call it in a loop.\n        Hopefully, you can avoid that if you prefetch the buying_groups :\n\n        ```python\n        user = User.objects.get(username=\"foobar\")\n        products = [\n            p\n            for p in Product.objects.prefetch_related(\"buying_groups\")\n            if p.can_be_sold_to(user)\n        ]\n        ```\n    \"\"\"\n    buying_groups = list(self.buying_groups.all())\n    if not buying_groups:\n        return True\n    return any(user.is_in_group(pk=group.id) for group in buying_groups)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.ProductType","title":"<code>ProductType</code>","text":"<p>               Bases: <code>OrderedModel</code></p> <p>A product type.</p> <p>Useful only for categorizing.</p>"},{"location":"reference/counter/schemas/#counter.schemas.ProductType.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID)\n</code></pre>"},{"location":"reference/counter/schemas/#counter.schemas.CounterSchema","title":"<code>CounterSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.CounterFilterSchema","title":"<code>CounterFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.SimplifiedCounterSchema","title":"<code>SimplifiedCounterSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.ProductTypeSchema","title":"<code>ProductTypeSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.SimpleProductTypeSchema","title":"<code>SimpleProductTypeSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.ReorderProductTypeSchema","title":"<code>ReorderProductTypeSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.SimpleProductSchema","title":"<code>SimpleProductSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.ProductSchema","title":"<code>ProductSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/counter/schemas/#counter.schemas.ProductFilterSchema","title":"<code>ProductFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/counter/views/","title":"Views","text":""},{"location":"reference/eboutic/models/","title":"Models","text":""},{"location":"reference/eboutic/models/#eboutic.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/eboutic/models/#eboutic.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.CurrencyField","title":"<code>CurrencyField(*args, **kwargs)</code>","text":"<p>               Bases: <code>DecimalField</code></p> <p>Custom database field used for currency.</p> Source code in <code>counter/fields.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    kwargs[\"max_digits\"] = 12\n    kwargs[\"decimal_places\"] = 2\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.BillingInfo","title":"<code>BillingInfo</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represent the billing information of a user, which are required by the 3D-Secure v2 system used by the etransaction module.</p>"},{"location":"reference/eboutic/models/#eboutic.models.BillingInfo.to_3dsv2_xml","title":"<code>to_3dsv2_xml()</code>","text":"<p>Convert the data from this model into a xml usable by the online paying service of the Cr\u00e9dit Agricole bank. see : <code>https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster</code>.</p> Source code in <code>counter/models.py</code> <pre><code>def to_3dsv2_xml(self) -&gt; str:\n    \"\"\"Convert the data from this model into a xml usable\n    by the online paying service of the Cr\u00e9dit Agricole bank.\n    see : `https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster`.\n    \"\"\"\n    data = {\n        \"Address\": {\n            \"FirstName\": self.first_name,\n            \"LastName\": self.last_name,\n            \"Address1\": self.address_1,\n            \"ZipCode\": self.zip_code,\n            \"City\": self.city,\n            \"CountryCode\": self.country.numeric,  # ISO-3166-1 numeric code\n            \"MobilePhone\": self.phone_number.as_national.replace(\" \", \"\"),\n            \"CountryCodeMobilePhone\": f\"+{self.phone_number.country_code}\",\n        }\n    }\n    if self.address_2:\n        data[\"Address\"][\"Address2\"] = self.address_2\n    xml = dict2xml(data, wrap=\"Billing\", newlines=False)\n    return '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;' + xml\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter","title":"<code>Counter</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.gen_token","title":"<code>gen_token()</code>","text":"<p>Generate a new token for this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def gen_token(self) -&gt; None:\n    \"\"\"Generate a new token for this counter.\"\"\"\n    self.token = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(30)\n    )\n    self.save()\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.barmen_list","title":"<code>barmen_list()</code>","text":"<p>Returns the barman list as list of User.</p> Source code in <code>counter/models.py</code> <pre><code>@cached_property\ndef barmen_list(self) -&gt; list[User]:\n    \"\"\"Returns the barman list as list of User.\"\"\"\n    return [\n        p.user for p in self.permanencies.filter(end=None).select_related(\"user\")\n    ]\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.get_random_barman","title":"<code>get_random_barman()</code>","text":"<p>Return a random user being currently a barman.</p> Source code in <code>counter/models.py</code> <pre><code>def get_random_barman(self) -&gt; User:\n    \"\"\"Return a random user being currently a barman.\"\"\"\n    return random.choice(self.barmen_list)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.update_activity","title":"<code>update_activity()</code>","text":"<p>Update the barman activity to prevent timeout.</p> Source code in <code>counter/models.py</code> <pre><code>def update_activity(self) -&gt; None:\n    \"\"\"Update the barman activity to prevent timeout.\"\"\"\n    self.permanencies.filter(end=None).update(activity=timezone.now())\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.can_refill","title":"<code>can_refill()</code>","text":"<p>Show if the counter authorize the refilling with physic money.</p> Source code in <code>counter/models.py</code> <pre><code>def can_refill(self) -&gt; bool:\n    \"\"\"Show if the counter authorize the refilling with physic money.\"\"\"\n    if self.type != \"BAR\":\n        return False\n    # at least one of the barmen is in the AE board\n    ae = Club.objects.get(id=settings.SITH_MAIN_CLUB_ID)\n    return any(ae.get_membership_for(barman) for barman in self.barmen_list)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.get_top_barmen","title":"<code>get_top_barmen()</code>","text":"<p>Return a QuerySet querying the office hours stats of all the barmen of all time of this counter, ordered by descending number of hours.</p> Each element of the QuerySet corresponds to a barman and has the following data <ul> <li>the full name (first name + last name) of the barman</li> <li>the nickname of the barman</li> <li>the promo of the barman</li> <li>the total number of office hours the barman did attend</li> </ul> Source code in <code>counter/models.py</code> <pre><code>def get_top_barmen(self) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the office hours stats of all the barmen of all time\n    of this counter, ordered by descending number of hours.\n\n    Each element of the QuerySet corresponds to a barman and has the following data :\n        - the full name (first name + last name) of the barman\n        - the nickname of the barman\n        - the promo of the barman\n        - the total number of office hours the barman did attend\n    \"\"\"\n    name_expr = Concat(F(\"user__first_name\"), Value(\" \"), F(\"user__last_name\"))\n    return (\n        self.permanencies.exclude(end=None)\n        .annotate(\n            name=name_expr, nickname=F(\"user__nick_name\"), promo=F(\"user__promo\")\n        )\n        .values(\"user\", \"name\", \"nickname\", \"promo\")\n        .annotate(perm_sum=Sum(F(\"end\") - F(\"start\")))\n        .exclude(perm_sum=None)\n        .order_by(\"-perm_sum\")\n    )\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.get_top_customers","title":"<code>get_top_customers(since=None)</code>","text":"<p>Return a QuerySet querying the money spent by customers of this counter since the specified date, ordered by descending amount of money spent.</p> <p>Each element of the QuerySet corresponds to a customer and has the following data :</p> <ul> <li>the full name (first name + last name) of the customer</li> <li>the nickname of the customer</li> <li>the amount of money spent by the customer</li> </ul> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> Source code in <code>counter/models.py</code> <pre><code>def get_top_customers(self, since: datetime | date | None = None) -&gt; QuerySet:\n    \"\"\"Return a QuerySet querying the money spent by customers of this counter\n    since the specified date, ordered by descending amount of money spent.\n\n    Each element of the QuerySet corresponds to a customer and has the following data :\n\n    - the full name (first name + last name) of the customer\n    - the nickname of the customer\n    - the amount of money spent by the customer\n\n    Args:\n        since: timestamp from which to perform the calculation\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    name_expr = Concat(\n        F(\"customer__user__first_name\"), Value(\" \"), F(\"customer__user__last_name\")\n    )\n    return (\n        self.sellings.filter(date__gte=since)\n        .annotate(\n            name=name_expr,\n            nickname=F(\"customer__user__nick_name\"),\n            promo=F(\"customer__user__promo\"),\n            user=F(\"customer__user\"),\n        )\n        .values(\"user\", \"promo\", \"name\", \"nickname\")\n        .annotate(\n            selling_sum=Sum(\n                F(\"unit_price\") * F(\"quantity\"), output_field=CurrencyField()\n            )\n        )\n        .filter(selling_sum__gt=0)\n        .order_by(\"-selling_sum\")\n    )\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.get_total_sales","title":"<code>get_total_sales(since=None)</code>","text":"<p>Compute and return the total turnover of this counter since the given date.</p> <p>By default, the date is the start of the current semester.</p> <p>Parameters:</p> Name Type Description Default <code>since</code> <code>datetime | date | None</code> <p>timestamp from which to perform the calculation</p> <code>None</code> <p>Returns:</p> Type Description <code>CurrencyField</code> <p>Total revenue earned at this counter.</p> Source code in <code>counter/models.py</code> <pre><code>def get_total_sales(self, since: datetime | date | None = None) -&gt; CurrencyField:\n    \"\"\"Compute and return the total turnover of this counter since the given date.\n\n    By default, the date is the start of the current semester.\n\n    Args:\n        since: timestamp from which to perform the calculation\n\n    Returns:\n        Total revenue earned at this counter.\n    \"\"\"\n    if since is None:\n        since = get_start_of_semester()\n    if isinstance(since, date):\n        since = datetime(since.year, since.month, since.day, tzinfo=tz.utc)\n    return self.sellings.filter(date__gte=since).aggregate(\n        total=Sum(\n            F(\"quantity\") * F(\"unit_price\"),\n            default=0,\n            output_field=CurrencyField(),\n        )\n    )[\"total\"]\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.customer_is_barman","title":"<code>customer_is_barman(customer)</code>","text":"<p>Check if this counter is a <code>bar</code> and if the customer is currently logged in. This is useful to compute special prices.</p> Source code in <code>counter/models.py</code> <pre><code>def customer_is_barman(self, customer: Customer | User) -&gt; bool:\n    \"\"\"Check if this counter is a `bar` and if the customer is currently logged in.\n    This is useful to compute special prices.\"\"\"\n\n    # Customer and User are two different tables,\n    # but they share the same primary key\n    return self.type == \"BAR\" and any(b.pk == customer.pk for b in self.barmen_list)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Counter.get_products_for","title":"<code>get_products_for(customer)</code>","text":"<p>Get all allowed products for the provided customer on this counter Prices will be annotated</p> Source code in <code>counter/models.py</code> <pre><code>def get_products_for(self, customer: Customer) -&gt; list[Product]:\n    \"\"\"\n    Get all allowed products for the provided customer on this counter\n    Prices will be annotated\n    \"\"\"\n\n    products = (\n        self.products.filter(archived=False)\n        .select_related(\"product_type\")\n        .prefetch_related(\"buying_groups\")\n    )\n\n    # Only include age appropriate products\n    age = customer.user.age\n    if customer.user.is_banned_alcohol:\n        age = min(age, 17)\n    products = products.filter(limit_age__lte=age)\n\n    # Compute special price for customer if he is a barmen on that bar\n    if self.customer_is_barman(customer):\n        products = products.annotate(price=F(\"special_selling_price\"))\n    else:\n        products = products.annotate(price=F(\"selling_price\"))\n\n    return [\n        product\n        for product in products.all()\n        if product.can_be_sold_to(customer.user)\n    ]\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Customer","title":"<code>Customer</code>","text":"<p>               Bases: <code>Model</code></p> <p>Customer data of a User.</p> <p>It adds some basic customers' information, such as the account ID, and is used by other accounting classes as reference to the customer, rather than using User.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Customer.can_buy","title":"<code>can_buy</code>  <code>property</code>","text":"<p>Check if whether this customer has the right to purchase any item.</p> <p>This must be not confused with the Product.can_be_sold_to(user) method as the present method returns an information about a customer whereas the other tells something about the relation between a User (not a Customer, don't mix them) and a Product.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Customer.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>is_selling : tell if the current action is a selling allow_negative : ignored if not a selling. Allow a selling to put the account in negative Those two parameters avoid blocking the save method of a customer if his account is negative.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"is_selling : tell if the current action is a selling\n    allow_negative : ignored if not a selling. Allow a selling to put the account in negative\n    Those two parameters avoid blocking the save method of a customer if his account is negative.\n    \"\"\"\n    if self.amount &lt; 0 and not allow_negative:\n        raise ValidationError(_(\"Not enough money\"))\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Customer.update_returnable_balance","title":"<code>update_returnable_balance()</code>","text":"<p>Update all returnable balances of this user to their real amount.</p> Source code in <code>counter/models.py</code> <pre><code>def update_returnable_balance(self):\n    \"\"\"Update all returnable balances of this user to their real amount.\"\"\"\n\n    def purchases_qs(outer_ref: Literal[\"product_id\", \"returned_product_id\"]):\n        return (\n            Selling.objects.filter(customer=self, product=OuterRef(outer_ref))\n            .values(\"product\")\n            .annotate(quantity=Sum(\"quantity\", default=0))\n            .values(\"quantity\")\n        )\n\n    balances = (\n        ReturnableProduct.objects.annotate_balance_for(self)\n        .annotate(\n            nb_cons=Coalesce(Subquery(purchases_qs(\"product_id\")), 0),\n            nb_dcons=Coalesce(Subquery(purchases_qs(\"returned_product_id\")), 0),\n        )\n        .annotate(new_balance=F(\"nb_cons\") - F(\"nb_dcons\"))\n        .values(\"id\", \"new_balance\")\n    )\n    updated_balances = [\n        ReturnableProductBalance(\n            customer=self, returnable_id=b[\"id\"], balance=b[\"new_balance\"]\n        )\n        for b in balances\n    ]\n    ReturnableProductBalance.objects.bulk_create(\n        updated_balances,\n        update_conflicts=True,\n        update_fields=[\"balance\"],\n        unique_fields=[\"customer\", \"returnable\"],\n    )\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Customer.get_or_create","title":"<code>get_or_create(user)</code>  <code>classmethod</code>","text":"<p>Work in pretty much the same way as the usual get_or_create method, but with the default field replaced by some under the hood.</p> <p>If the user has an account, return it as is. Else create a new account with no money on it and a new unique account id</p> <p>Example : ::</p> <pre><code>user = User.objects.get(pk=1)\naccount, created = Customer.get_or_create(user)\nif created:\n    print(f\"created a new account with id {account.id}\")\nelse:\n    print(f\"user has already an account, with {account.id} \u20ac on it\"\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>@classmethod\ndef get_or_create(cls, user: User) -&gt; tuple[Customer, bool]:\n    \"\"\"Work in pretty much the same way as the usual get_or_create method,\n    but with the default field replaced by some under the hood.\n\n    If the user has an account, return it as is.\n    Else create a new account with no money on it and a new unique account id\n\n    Example : ::\n\n        user = User.objects.get(pk=1)\n        account, created = Customer.get_or_create(user)\n        if created:\n            print(f\"created a new account with id {account.id}\")\n        else:\n            print(f\"user has already an account, with {account.id} \u20ac on it\"\n    \"\"\"\n    if hasattr(user, \"customer\"):\n        return user.customer, False\n\n    # account_id are always a number with a letter appended\n    account_id = (\n        Customer.objects.order_by(Length(\"account_id\"), \"account_id\")\n        .values(\"account_id\")\n        .last()\n    )\n    if account_id is None:\n        # legacy from the old site\n        account = cls.objects.create(user=user, account_id=\"1504a\")\n        return account, True\n\n    account_id = account_id[\"account_id\"]\n    account_num = int(account_id[:-1])\n    while Customer.objects.filter(account_id=account_id).exists():\n        # when entering the first iteration, we are using an already existing account id\n        # so the loop should always execute at least one time\n        account_num += 1\n        account_id = f\"{account_num}{random.choice(string.ascii_lowercase)}\"\n\n    account = cls.objects.create(user=user, account_id=account_id)\n    return account, True\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Product","title":"<code>Product</code>","text":"<p>               Bases: <code>Model</code></p> <p>A product, with all its related information.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Product.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(\n        pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID\n    ) or user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Product.can_be_sold_to","title":"<code>can_be_sold_to(user)</code>","text":"<p>Check if whether the user given in parameter has the right to buy this product or not.</p> <p>This must be not confused with the Customer.can_buy() method as the present method returns an information about the relation between a User and a Product, whereas the other tells something about a Customer (and not a user, they are not the same model).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user can buy this product else False</p> Warning <p>This performs a db query, thus you can quickly have a N+1 queries problem if you call it in a loop. Hopefully, you can avoid that if you prefetch the buying_groups :</p> <pre><code>user = User.objects.get(username=\"foobar\")\nproducts = [\n    p\n    for p in Product.objects.prefetch_related(\"buying_groups\")\n    if p.can_be_sold_to(user)\n]\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>def can_be_sold_to(self, user: User) -&gt; bool:\n    \"\"\"Check if whether the user given in parameter has the right to buy\n    this product or not.\n\n    This must be not confused with the Customer.can_buy()\n    method as the present method returns an information\n    about the relation between a User and a Product,\n    whereas the other tells something about a Customer\n    (and not a user, they are not the same model).\n\n    Returns:\n        True if the user can buy this product else False\n\n    Warning:\n        This performs a db query, thus you can quickly have\n        a N+1 queries problem if you call it in a loop.\n        Hopefully, you can avoid that if you prefetch the buying_groups :\n\n        ```python\n        user = User.objects.get(username=\"foobar\")\n        products = [\n            p\n            for p in Product.objects.prefetch_related(\"buying_groups\")\n            if p.can_be_sold_to(user)\n        ]\n        ```\n    \"\"\"\n    buying_groups = list(self.buying_groups.all())\n    if not buying_groups:\n        return True\n    return any(user.is_in_group(pk=group.id) for group in buying_groups)\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Refilling","title":"<code>Refilling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the refilling.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Selling","title":"<code>Selling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the sellings.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Selling.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>allow_negative : Allow this selling to use more money than available for this user.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"allow_negative : Allow this selling to use more money than available for this user.\"\"\"\n    if not self.date:\n        self.date = timezone.now()\n    self.full_clean()\n    if not self.is_validated:\n        self.customer.amount -= self.quantity * self.unit_price\n        self.customer.save(allow_negative=allow_negative)\n        self.is_validated = True\n    user = self.customer.user\n    if user.was_subscribed:\n        if (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_ONE_SEMESTER\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"un-semestre\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n        elif (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_TWO_SEMESTERS\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"deux-semestres\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n    if user.preferences.notify_on_click:\n        Notification(\n            user=user,\n            url=reverse(\n                \"core:user_account_detail\",\n                kwargs={\n                    \"user_id\": user.id,\n                    \"year\": self.date.year,\n                    \"month\": self.date.month,\n                },\n            ),\n            param=\"%d x %s\" % (self.quantity, self.label),\n            type=\"SELLING\",\n        ).save()\n    super().save(*args, **kwargs)\n    if hasattr(self.product, \"eticket\"):\n        self.send_mail_customer()\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.BillingInfoState","title":"<code>BillingInfoState</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.Basket","title":"<code>Basket</code>","text":"<p>               Bases: <code>Model</code></p> <p>Basket is built when the user connects to an eboutic page.</p>"},{"location":"reference/eboutic/models/#eboutic.models.Basket.generate_sales","title":"<code>generate_sales(counter, seller, payment_method)</code>","text":"<p>Generate a list of sold items corresponding to the items of this basket WITHOUT saving them NOR deleting the basket.</p> Example <pre><code>counter = Counter.objects.get(name=\"Eboutic\")\nsales = basket.generate_sales(counter, \"SITH_ACCOUNT\")\n# here the basket is in the same state as before the method call\n\nwith transaction.atomic():\n    for sale in sales:\n        sale.save()\n    basket.delete()\n    # all the basket items are deleted by the on_delete=CASCADE relation\n    # thus only the sales remain\n</code></pre> Source code in <code>eboutic/models.py</code> <pre><code>def generate_sales(self, counter, seller: User, payment_method: str):\n    \"\"\"Generate a list of sold items corresponding to the items\n    of this basket WITHOUT saving them NOR deleting the basket.\n\n    Example:\n        ```python\n        counter = Counter.objects.get(name=\"Eboutic\")\n        sales = basket.generate_sales(counter, \"SITH_ACCOUNT\")\n        # here the basket is in the same state as before the method call\n\n        with transaction.atomic():\n            for sale in sales:\n                sale.save()\n            basket.delete()\n            # all the basket items are deleted by the on_delete=CASCADE relation\n            # thus only the sales remain\n        ```\n    \"\"\"\n    # I must proceed with two distinct requests instead of\n    # only one with a join because the AbstractBaseItem model has been\n    # poorly designed. If you refactor the model, please refactor this too.\n    items = self.items.order_by(\"product_id\")\n    ids = [item.product_id for item in items]\n    products = Product.objects.filter(id__in=ids).order_by(\"id\")\n    # items and products are sorted in the same order\n    sales = []\n    for item, product in zip(items, products, strict=False):\n        sales.append(\n            Selling(\n                label=product.name,\n                counter=counter,\n                club=product.club,\n                product=product,\n                seller=seller,\n                customer=Customer.get_or_create(self.user)[0],\n                unit_price=item.product_unit_price,\n                quantity=item.quantity,\n                payment_method=payment_method,\n            )\n        )\n    return sales\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.InvoiceQueryset","title":"<code>InvoiceQueryset</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.InvoiceQueryset.annotate_total","title":"<code>annotate_total()</code>","text":"<p>Annotate the queryset with the total amount of each invoice.</p> <p>The total amount is the sum of (product_unit_price * quantity) for all items related to the invoice.</p> Source code in <code>eboutic/models.py</code> <pre><code>def annotate_total(self) -&gt; Self:\n    \"\"\"Annotate the queryset with the total amount of each invoice.\n\n    The total amount is the sum of (product_unit_price * quantity)\n    for all items related to the invoice.\n    \"\"\"\n    # aggregates within subqueries require a little bit of black magic,\n    # but hopefully, django gives a comprehensive documentation for that :\n    # https://docs.djangoproject.com/en/stable/ref/models/expressions/#using-aggregates-within-a-subquery-expression\n    return self.annotate(\n        total=Subquery(\n            InvoiceItem.objects.filter(invoice_id=OuterRef(\"pk\"))\n            .values(\"invoice_id\")\n            .annotate(total=Sum(F(\"product_unit_price\") * F(\"quantity\")))\n            .values(\"total\")\n        )\n    )\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.Invoice","title":"<code>Invoice</code>","text":"<p>               Bases: <code>Model</code></p> <p>Invoices are generated once the payment has been validated.</p>"},{"location":"reference/eboutic/models/#eboutic.models.AbstractBaseItem","title":"<code>AbstractBaseItem</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.BasketItem","title":"<code>BasketItem</code>","text":"<p>               Bases: <code>AbstractBaseItem</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.BasketItem.from_product","title":"<code>from_product(product, quantity, basket)</code>  <code>classmethod</code>","text":"<p>Create a BasketItem with the same characteristics as the product passed in parameters, with the specified quantity.</p> Warning <p>the basket field is not filled, so you must set it yourself before saving the model.</p> Source code in <code>eboutic/models.py</code> <pre><code>@classmethod\ndef from_product(cls, product: Product, quantity: int, basket: Basket):\n    \"\"\"Create a BasketItem with the same characteristics as the\n    product passed in parameters, with the specified quantity.\n\n    Warning:\n        the basket field is not filled, so you must set\n        it yourself before saving the model.\n    \"\"\"\n    return cls(\n        basket=basket,\n        product_id=product.id,\n        product_name=product.name,\n        type_id=product.product_type_id,\n        quantity=quantity,\n        product_unit_price=product.selling_price,\n    )\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.InvoiceItem","title":"<code>InvoiceItem</code>","text":"<p>               Bases: <code>AbstractBaseItem</code></p>"},{"location":"reference/eboutic/models/#eboutic.models.get_eboutic","title":"<code>get_eboutic()</code>","text":"Source code in <code>counter/models.py</code> <pre><code>def get_eboutic() -&gt; Counter:\n    return Counter.objects.filter(type=\"EBOUTIC\").order_by(\"id\").first()\n</code></pre>"},{"location":"reference/eboutic/models/#eboutic.models.get_eboutic_products","title":"<code>get_eboutic_products(user)</code>","text":"Source code in <code>eboutic/models.py</code> <pre><code>def get_eboutic_products(user: User) -&gt; list[Product]:\n    products = (\n        get_eboutic()\n        .products.filter(product_type__isnull=False)\n        .filter(archived=False)\n        .filter(limit_age__lte=user.age)\n        .annotate(order=F(\"product_type__order\"))\n        .annotate(category=F(\"product_type__name\"))\n        .annotate(category_comment=F(\"product_type__comment\"))\n        .annotate(price=F(\"selling_price\"))  # &lt;-- selected price for basket validation\n        .prefetch_related(\"buying_groups\")  # &lt;-- used in `Product.can_be_sold_to`\n    )\n    return [p for p in products if p.can_be_sold_to(user)]\n</code></pre>"},{"location":"reference/eboutic/views/","title":"Views","text":""},{"location":"reference/eboutic/views/#eboutic.views.EbouticBasketForm","title":"<code>EbouticBasketForm = forms.formset_factory(ProductForm, formset=BaseEbouticBasketForm, absolute_max=None, min_num=1)</code>  <code>module-attribute</code>","text":""},{"location":"reference/eboutic/views/#eboutic.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/eboutic/views/#eboutic.views.FragmentMixin","title":"<code>FragmentMixin</code>","text":"<p>               Bases: <code>TemplateResponseMixin</code>, <code>ContextMixin</code></p> <p>Make a view buildable as a fragment that can be embedded in a template.</p> <p>Most fragments are used in two different ways : - in the request/response cycle, like any regular view - in templates, where the rendering is done in another view</p> <p>This mixin aims to simplify the initial fragment rendering. The rendered fragment will then be able to re-render itself through the request/response cycle if it uses HTMX.</p> <p>Example</p> <pre><code>class MyFragment(FragmentMixin, FormView):\n    template_name = \"app/fragment.jinja\"\n    form_class = MyForm\n    success_url = reverse_lazy(\"foo:bar\")\n\n# in another view :\ndef some_view(request):\n    fragment = MyFragment.as_fragment()\n    return render(\n        request,\n        \"app/template.jinja\",\n        context={\"fragment\": fragment(request)\n    }\n\n# in urls.py\nurlpatterns = [\n    path(\"foo/view\", some_view),\n    path(\"foo/fragment\", MyFragment.as_view()),\n]\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.FragmentMixin.reload_on_redirect","title":"<code>reload_on_redirect = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If True, this fragment will trigger a full page reload on redirect.</p>"},{"location":"reference/eboutic/views/#eboutic.views.UseFragmentsMixin","title":"<code>UseFragmentsMixin</code>","text":"<p>               Bases: <code>ContextMixin</code></p> <p>Mark a view as using fragments.</p> <p>This mixin is not mandatory (you may as well render manually your fragments in the <code>get_context_data</code> method). However, the interface of this class bring some distinction between fragments and other context data, which may reduce boilerplate.</p> <p>Example</p> <pre><code>class FooFragment(FragmentMixin, FormView): ...\n\nclass BarFragment(FragmentMixin, FormView): ...\n\nclass AdminFragment(FragmentMixin, FormView): ...\n\nclass MyView(UseFragmentsMixin, TemplateView)\n    template_name = \"app/view.jinja\"\n    fragments = {\n        \"foo\": FooFragment\n        \"bar\": BarFragment(template_name=\"some_template.jinja\")\n    }\n    fragments_data = {\n        \"foo\": {\"some\": \"data\"}  # this will be passed to the FooFragment renderer\n    }\n\n    def get_fragments(self):\n        res = super().get_fragments()\n        if self.request.user.is_superuser:\n            res[\"admin_fragment\"] = AdminFragment\n        return res\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.UseFragmentsMixin.get_fragment_data","title":"<code>get_fragment_data()</code>","text":"<p>Return eventual data used to initialize the fragments.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_data(self) -&gt; dict[str, dict[str, Any]]:\n    \"\"\"Return eventual data used to initialize the fragments.\"\"\"\n    return self.fragment_data if self.fragment_data is not None else {}\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.UseFragmentsMixin.get_fragment_context_data","title":"<code>get_fragment_context_data()</code>","text":"<p>Return the rendered fragments as context data.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_context_data(self) -&gt; dict[str, SafeString]:\n    \"\"\"Return the rendered fragments as context data.\"\"\"\n    res = {}\n    data = self.get_fragment_data()\n    for name, fragment in self.get_fragments().items():\n        is_cls = inspect.isclass(fragment) and issubclass(fragment, FragmentMixin)\n        _fragment = fragment.as_fragment() if is_cls else fragment\n        fragment_data = data.get(name, {})\n        res[name] = _fragment(self.request, **fragment_data)\n    return res\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.BaseBasketForm","title":"<code>BaseBasketForm</code>","text":"<p>               Bases: <code>BaseFormSet</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.BillingInfoForm","title":"<code>BillingInfoForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.ProductForm","title":"<code>ProductForm(customer, counter, allowed_products, *args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> Source code in <code>counter/forms.py</code> <pre><code>def __init__(\n    self,\n    customer: Customer,\n    counter: Counter,\n    allowed_products: dict[int, Product],\n    *args,\n    **kwargs,\n):\n    self.customer = customer  # Used by formset\n    self.counter = counter  # Used by formset\n    self.allowed_products = allowed_products\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.BillingInfo","title":"<code>BillingInfo</code>","text":"<p>               Bases: <code>Model</code></p> <p>Represent the billing information of a user, which are required by the 3D-Secure v2 system used by the etransaction module.</p>"},{"location":"reference/eboutic/views/#eboutic.views.BillingInfo.to_3dsv2_xml","title":"<code>to_3dsv2_xml()</code>","text":"<p>Convert the data from this model into a xml usable by the online paying service of the Cr\u00e9dit Agricole bank. see : <code>https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster</code>.</p> Source code in <code>counter/models.py</code> <pre><code>def to_3dsv2_xml(self) -&gt; str:\n    \"\"\"Convert the data from this model into a xml usable\n    by the online paying service of the Cr\u00e9dit Agricole bank.\n    see : `https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/manuel-dintegration-focus-3ds-v2/principes-generaux/#integration-3dsv2-developpeur-webmaster`.\n    \"\"\"\n    data = {\n        \"Address\": {\n            \"FirstName\": self.first_name,\n            \"LastName\": self.last_name,\n            \"Address1\": self.address_1,\n            \"ZipCode\": self.zip_code,\n            \"City\": self.city,\n            \"CountryCode\": self.country.numeric,  # ISO-3166-1 numeric code\n            \"MobilePhone\": self.phone_number.as_national.replace(\" \", \"\"),\n            \"CountryCodeMobilePhone\": f\"+{self.phone_number.country_code}\",\n        }\n    }\n    if self.address_2:\n        data[\"Address\"][\"Address2\"] = self.address_2\n    xml = dict2xml(data, wrap=\"Billing\", newlines=False)\n    return '&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;' + xml\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Customer","title":"<code>Customer</code>","text":"<p>               Bases: <code>Model</code></p> <p>Customer data of a User.</p> <p>It adds some basic customers' information, such as the account ID, and is used by other accounting classes as reference to the customer, rather than using User.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Customer.can_buy","title":"<code>can_buy</code>  <code>property</code>","text":"<p>Check if whether this customer has the right to purchase any item.</p> <p>This must be not confused with the Product.can_be_sold_to(user) method as the present method returns an information about a customer whereas the other tells something about the relation between a User (not a Customer, don't mix them) and a Product.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Customer.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>is_selling : tell if the current action is a selling allow_negative : ignored if not a selling. Allow a selling to put the account in negative Those two parameters avoid blocking the save method of a customer if his account is negative.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"is_selling : tell if the current action is a selling\n    allow_negative : ignored if not a selling. Allow a selling to put the account in negative\n    Those two parameters avoid blocking the save method of a customer if his account is negative.\n    \"\"\"\n    if self.amount &lt; 0 and not allow_negative:\n        raise ValidationError(_(\"Not enough money\"))\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Customer.update_returnable_balance","title":"<code>update_returnable_balance()</code>","text":"<p>Update all returnable balances of this user to their real amount.</p> Source code in <code>counter/models.py</code> <pre><code>def update_returnable_balance(self):\n    \"\"\"Update all returnable balances of this user to their real amount.\"\"\"\n\n    def purchases_qs(outer_ref: Literal[\"product_id\", \"returned_product_id\"]):\n        return (\n            Selling.objects.filter(customer=self, product=OuterRef(outer_ref))\n            .values(\"product\")\n            .annotate(quantity=Sum(\"quantity\", default=0))\n            .values(\"quantity\")\n        )\n\n    balances = (\n        ReturnableProduct.objects.annotate_balance_for(self)\n        .annotate(\n            nb_cons=Coalesce(Subquery(purchases_qs(\"product_id\")), 0),\n            nb_dcons=Coalesce(Subquery(purchases_qs(\"returned_product_id\")), 0),\n        )\n        .annotate(new_balance=F(\"nb_cons\") - F(\"nb_dcons\"))\n        .values(\"id\", \"new_balance\")\n    )\n    updated_balances = [\n        ReturnableProductBalance(\n            customer=self, returnable_id=b[\"id\"], balance=b[\"new_balance\"]\n        )\n        for b in balances\n    ]\n    ReturnableProductBalance.objects.bulk_create(\n        updated_balances,\n        update_conflicts=True,\n        update_fields=[\"balance\"],\n        unique_fields=[\"customer\", \"returnable\"],\n    )\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Customer.get_or_create","title":"<code>get_or_create(user)</code>  <code>classmethod</code>","text":"<p>Work in pretty much the same way as the usual get_or_create method, but with the default field replaced by some under the hood.</p> <p>If the user has an account, return it as is. Else create a new account with no money on it and a new unique account id</p> <p>Example : ::</p> <pre><code>user = User.objects.get(pk=1)\naccount, created = Customer.get_or_create(user)\nif created:\n    print(f\"created a new account with id {account.id}\")\nelse:\n    print(f\"user has already an account, with {account.id} \u20ac on it\"\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>@classmethod\ndef get_or_create(cls, user: User) -&gt; tuple[Customer, bool]:\n    \"\"\"Work in pretty much the same way as the usual get_or_create method,\n    but with the default field replaced by some under the hood.\n\n    If the user has an account, return it as is.\n    Else create a new account with no money on it and a new unique account id\n\n    Example : ::\n\n        user = User.objects.get(pk=1)\n        account, created = Customer.get_or_create(user)\n        if created:\n            print(f\"created a new account with id {account.id}\")\n        else:\n            print(f\"user has already an account, with {account.id} \u20ac on it\"\n    \"\"\"\n    if hasattr(user, \"customer\"):\n        return user.customer, False\n\n    # account_id are always a number with a letter appended\n    account_id = (\n        Customer.objects.order_by(Length(\"account_id\"), \"account_id\")\n        .values(\"account_id\")\n        .last()\n    )\n    if account_id is None:\n        # legacy from the old site\n        account = cls.objects.create(user=user, account_id=\"1504a\")\n        return account, True\n\n    account_id = account_id[\"account_id\"]\n    account_num = int(account_id[:-1])\n    while Customer.objects.filter(account_id=account_id).exists():\n        # when entering the first iteration, we are using an already existing account id\n        # so the loop should always execute at least one time\n        account_num += 1\n        account_id = f\"{account_num}{random.choice(string.ascii_lowercase)}\"\n\n    account = cls.objects.create(user=user, account_id=account_id)\n    return account, True\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Product","title":"<code>Product</code>","text":"<p>               Bases: <code>Model</code></p> <p>A product, with all its related information.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Product.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>counter/models.py</code> <pre><code>def is_owned_by(self, user):\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_in_group(\n        pk=settings.SITH_GROUP_ACCOUNTING_ADMIN_ID\n    ) or user.is_in_group(pk=settings.SITH_GROUP_COUNTER_ADMIN_ID)\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Product.can_be_sold_to","title":"<code>can_be_sold_to(user)</code>","text":"<p>Check if whether the user given in parameter has the right to buy this product or not.</p> <p>This must be not confused with the Customer.can_buy() method as the present method returns an information about the relation between a User and a Product, whereas the other tells something about a Customer (and not a user, they are not the same model).</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user can buy this product else False</p> Warning <p>This performs a db query, thus you can quickly have a N+1 queries problem if you call it in a loop. Hopefully, you can avoid that if you prefetch the buying_groups :</p> <pre><code>user = User.objects.get(username=\"foobar\")\nproducts = [\n    p\n    for p in Product.objects.prefetch_related(\"buying_groups\")\n    if p.can_be_sold_to(user)\n]\n</code></pre> Source code in <code>counter/models.py</code> <pre><code>def can_be_sold_to(self, user: User) -&gt; bool:\n    \"\"\"Check if whether the user given in parameter has the right to buy\n    this product or not.\n\n    This must be not confused with the Customer.can_buy()\n    method as the present method returns an information\n    about the relation between a User and a Product,\n    whereas the other tells something about a Customer\n    (and not a user, they are not the same model).\n\n    Returns:\n        True if the user can buy this product else False\n\n    Warning:\n        This performs a db query, thus you can quickly have\n        a N+1 queries problem if you call it in a loop.\n        Hopefully, you can avoid that if you prefetch the buying_groups :\n\n        ```python\n        user = User.objects.get(username=\"foobar\")\n        products = [\n            p\n            for p in Product.objects.prefetch_related(\"buying_groups\")\n            if p.can_be_sold_to(user)\n        ]\n        ```\n    \"\"\"\n    buying_groups = list(self.buying_groups.all())\n    if not buying_groups:\n        return True\n    return any(user.is_in_group(pk=group.id) for group in buying_groups)\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Refilling","title":"<code>Refilling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the refilling.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Selling","title":"<code>Selling</code>","text":"<p>               Bases: <code>Model</code></p> <p>Handle the sellings.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Selling.save","title":"<code>save(*args, allow_negative=False, **kwargs)</code>","text":"<p>allow_negative : Allow this selling to use more money than available for this user.</p> Source code in <code>counter/models.py</code> <pre><code>def save(self, *args, allow_negative=False, **kwargs):\n    \"\"\"allow_negative : Allow this selling to use more money than available for this user.\"\"\"\n    if not self.date:\n        self.date = timezone.now()\n    self.full_clean()\n    if not self.is_validated:\n        self.customer.amount -= self.quantity * self.unit_price\n        self.customer.save(allow_negative=allow_negative)\n        self.is_validated = True\n    user = self.customer.user\n    if user.was_subscribed:\n        if (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_ONE_SEMESTER\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"un-semestre\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n        elif (\n            self.product\n            and self.product.id == settings.SITH_PRODUCT_SUBSCRIPTION_TWO_SEMESTERS\n        ):\n            sub = Subscription(\n                member=user,\n                subscription_type=\"deux-semestres\",\n                payment_method=\"EBOUTIC\",\n                location=\"EBOUTIC\",\n            )\n            sub.subscription_start = Subscription.compute_start()\n            sub.subscription_start = Subscription.compute_start(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ]\n            )\n            sub.subscription_end = Subscription.compute_end(\n                duration=settings.SITH_SUBSCRIPTIONS[sub.subscription_type][\n                    \"duration\"\n                ],\n                start=sub.subscription_start,\n            )\n            sub.save()\n    if user.preferences.notify_on_click:\n        Notification(\n            user=user,\n            url=reverse(\n                \"core:user_account_detail\",\n                kwargs={\n                    \"user_id\": user.id,\n                    \"year\": self.date.year,\n                    \"month\": self.date.month,\n                },\n            ),\n            param=\"%d x %s\" % (self.quantity, self.label),\n            type=\"SELLING\",\n        ).save()\n    super().save(*args, **kwargs)\n    if hasattr(self.product, \"eticket\"):\n        self.send_mail_customer()\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.Basket","title":"<code>Basket</code>","text":"<p>               Bases: <code>Model</code></p> <p>Basket is built when the user connects to an eboutic page.</p>"},{"location":"reference/eboutic/views/#eboutic.views.Basket.generate_sales","title":"<code>generate_sales(counter, seller, payment_method)</code>","text":"<p>Generate a list of sold items corresponding to the items of this basket WITHOUT saving them NOR deleting the basket.</p> Example <pre><code>counter = Counter.objects.get(name=\"Eboutic\")\nsales = basket.generate_sales(counter, \"SITH_ACCOUNT\")\n# here the basket is in the same state as before the method call\n\nwith transaction.atomic():\n    for sale in sales:\n        sale.save()\n    basket.delete()\n    # all the basket items are deleted by the on_delete=CASCADE relation\n    # thus only the sales remain\n</code></pre> Source code in <code>eboutic/models.py</code> <pre><code>def generate_sales(self, counter, seller: User, payment_method: str):\n    \"\"\"Generate a list of sold items corresponding to the items\n    of this basket WITHOUT saving them NOR deleting the basket.\n\n    Example:\n        ```python\n        counter = Counter.objects.get(name=\"Eboutic\")\n        sales = basket.generate_sales(counter, \"SITH_ACCOUNT\")\n        # here the basket is in the same state as before the method call\n\n        with transaction.atomic():\n            for sale in sales:\n                sale.save()\n            basket.delete()\n            # all the basket items are deleted by the on_delete=CASCADE relation\n            # thus only the sales remain\n        ```\n    \"\"\"\n    # I must proceed with two distinct requests instead of\n    # only one with a join because the AbstractBaseItem model has been\n    # poorly designed. If you refactor the model, please refactor this too.\n    items = self.items.order_by(\"product_id\")\n    ids = [item.product_id for item in items]\n    products = Product.objects.filter(id__in=ids).order_by(\"id\")\n    # items and products are sorted in the same order\n    sales = []\n    for item, product in zip(items, products, strict=False):\n        sales.append(\n            Selling(\n                label=product.name,\n                counter=counter,\n                club=product.club,\n                product=product,\n                seller=seller,\n                customer=Customer.get_or_create(self.user)[0],\n                unit_price=item.product_unit_price,\n                quantity=item.quantity,\n                payment_method=payment_method,\n            )\n        )\n    return sales\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.BasketItem","title":"<code>BasketItem</code>","text":"<p>               Bases: <code>AbstractBaseItem</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.BasketItem.from_product","title":"<code>from_product(product, quantity, basket)</code>  <code>classmethod</code>","text":"<p>Create a BasketItem with the same characteristics as the product passed in parameters, with the specified quantity.</p> Warning <p>the basket field is not filled, so you must set it yourself before saving the model.</p> Source code in <code>eboutic/models.py</code> <pre><code>@classmethod\ndef from_product(cls, product: Product, quantity: int, basket: Basket):\n    \"\"\"Create a BasketItem with the same characteristics as the\n    product passed in parameters, with the specified quantity.\n\n    Warning:\n        the basket field is not filled, so you must set\n        it yourself before saving the model.\n    \"\"\"\n    return cls(\n        basket=basket,\n        product_id=product.id,\n        product_name=product.name,\n        type_id=product.product_type_id,\n        quantity=quantity,\n        product_unit_price=product.selling_price,\n    )\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.BillingInfoState","title":"<code>BillingInfoState</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.Invoice","title":"<code>Invoice</code>","text":"<p>               Bases: <code>Model</code></p> <p>Invoices are generated once the payment has been validated.</p>"},{"location":"reference/eboutic/views/#eboutic.views.InvoiceItem","title":"<code>InvoiceItem</code>","text":"<p>               Bases: <code>AbstractBaseItem</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.BaseEbouticBasketForm","title":"<code>BaseEbouticBasketForm</code>","text":"<p>               Bases: <code>BaseBasketForm</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.EbouticMainView","title":"<code>EbouticMainView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>FormView</code></p> <p>Main view of the eboutic application.</p> <p>The purchasable products are those of the eboutic which belong to a category of products of a product category (orphan products are inaccessible).</p>"},{"location":"reference/eboutic/views/#eboutic.views.BillingInfoFormFragment","title":"<code>BillingInfoFormFragment</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>FragmentMixin</code>, <code>SuccessMessageMixin</code>, <code>UpdateView</code></p> <p>Update billing info</p>"},{"location":"reference/eboutic/views/#eboutic.views.EbouticCheckout","title":"<code>EbouticCheckout</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>UseFragmentsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.EbouticPayWithSith","title":"<code>EbouticPayWithSith</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>SingleObjectMixin</code>, <code>View</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.EtransactionAutoAnswer","title":"<code>EtransactionAutoAnswer</code>","text":"<p>               Bases: <code>View</code></p>"},{"location":"reference/eboutic/views/#eboutic.views.get_eboutic","title":"<code>get_eboutic()</code>","text":"Source code in <code>counter/models.py</code> <pre><code>def get_eboutic() -&gt; Counter:\n    return Counter.objects.filter(type=\"EBOUTIC\").order_by(\"id\").first()\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.get_eboutic_products","title":"<code>get_eboutic_products(user)</code>","text":"Source code in <code>eboutic/models.py</code> <pre><code>def get_eboutic_products(user: User) -&gt; list[Product]:\n    products = (\n        get_eboutic()\n        .products.filter(product_type__isnull=False)\n        .filter(archived=False)\n        .filter(limit_age__lte=user.age)\n        .annotate(order=F(\"product_type__order\"))\n        .annotate(category=F(\"product_type__name\"))\n        .annotate(category_comment=F(\"product_type__comment\"))\n        .annotate(price=F(\"selling_price\"))  # &lt;-- selected price for basket validation\n        .prefetch_related(\"buying_groups\")  # &lt;-- used in `Product.can_be_sold_to`\n    )\n    return [p for p in products if p.can_be_sold_to(user)]\n</code></pre>"},{"location":"reference/eboutic/views/#eboutic.views.payment_result","title":"<code>payment_result(request, result)</code>","text":"Source code in <code>eboutic/views.py</code> <pre><code>@require_GET\n@login_required\ndef payment_result(request, result: str) -&gt; HttpResponse:\n    context = {\"success\": result == \"success\"}\n    return render(request, \"eboutic/eboutic_payment_result.jinja\", context)\n</code></pre>"},{"location":"reference/election/models/","title":"Models","text":""},{"location":"reference/election/models/#election.models.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/election/models/#election.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/election/models/#election.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/election/models/#election.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/election/models/#election.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/election/models/#election.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/election/models/#election.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/election/models/#election.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/election/models/#election.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/election/models/#election.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/election/models/#election.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/election/models/#election.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/election/models/#election.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/election/models/#election.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/election/models/#election.models.Election","title":"<code>Election</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class allows to create a new election.</p>"},{"location":"reference/election/models/#election.models.Role","title":"<code>Role</code>","text":"<p>               Bases: <code>OrderedModel</code></p> <p>This class allows to create a new role avaliable for a candidature.</p>"},{"location":"reference/election/models/#election.models.ElectionList","title":"<code>ElectionList</code>","text":"<p>               Bases: <code>Model</code></p> <p>To allow per list vote.</p>"},{"location":"reference/election/models/#election.models.Candidature","title":"<code>Candidature</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class is a component of responsability.</p>"},{"location":"reference/election/models/#election.models.Vote","title":"<code>Vote</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class allows to vote for candidates.</p>"},{"location":"reference/election/views/","title":"Views","text":""},{"location":"reference/election/views/#election.views.CanCreateMixin","title":"<code>CanCreateMixin(*args, **kwargs)</code>","text":"<p>               Bases: <code>View</code></p> <p>Protect any child view that would create an object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user has not the necessary permission to create the object of the view.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/election/views/#election.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/election/views/#election.views.Candidature","title":"<code>Candidature</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class is a component of responsability.</p>"},{"location":"reference/election/views/#election.views.Election","title":"<code>Election</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class allows to create a new election.</p>"},{"location":"reference/election/views/#election.views.ElectionList","title":"<code>ElectionList</code>","text":"<p>               Bases: <code>Model</code></p> <p>To allow per list vote.</p>"},{"location":"reference/election/views/#election.views.Role","title":"<code>Role</code>","text":"<p>               Bases: <code>OrderedModel</code></p> <p>This class allows to create a new role avaliable for a candidature.</p>"},{"location":"reference/election/views/#election.views.Vote","title":"<code>Vote</code>","text":"<p>               Bases: <code>Model</code></p> <p>This class allows to vote for candidates.</p>"},{"location":"reference/election/views/#election.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/election/views/#election.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/election/views/#election.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/election/views/#election.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/election/views/#election.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/election/views/#election.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/election/views/#election.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/election/views/#election.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/election/views/#election.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/election/views/#election.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/election/views/#election.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/election/views/#election.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/election/views/#election.views.LimitedCheckboxField","title":"<code>LimitedCheckboxField(queryset, max_choice, **kwargs)</code>","text":"<p>               Bases: <code>ModelMultipleChoiceField</code></p> <p>A <code>ModelMultipleChoiceField</code>, with a max limit of selectable inputs.</p> Source code in <code>election/views.py</code> <pre><code>def __init__(self, queryset, max_choice, **kwargs):\n    self.max_choice = max_choice\n    super().__init__(queryset, **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.CandidateForm","title":"<code>CandidateForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form to candidate.</p> Source code in <code>election/views.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    election_id = kwargs.pop(\"election_id\", None)\n    can_edit = kwargs.pop(\"can_edit\", False)\n    super().__init__(*args, **kwargs)\n    if election_id:\n        self.fields[\"role\"].queryset = Role.objects.filter(\n            election__id=election_id\n        ).all()\n        self.fields[\"election_list\"].queryset = ElectionList.objects.filter(\n            election__id=election_id\n        ).all()\n    if not can_edit:\n        self.fields[\"user\"].widget = forms.HiddenInput()\n</code></pre>"},{"location":"reference/election/views/#election.views.VoteForm","title":"<code>VoteForm(election, user, *args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> Source code in <code>election/views.py</code> <pre><code>def __init__(self, election, user, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    if not election.has_voted(user):\n        for role in election.roles.all():\n            cand = role.candidatures\n            if role.max_choice &gt; 1:\n                self.fields[role.title] = LimitedCheckboxField(\n                    cand, role.max_choice, required=False\n                )\n            else:\n                self.fields[role.title] = forms.ModelChoiceField(\n                    cand,\n                    required=False,\n                    widget=forms.RadioSelect(),\n                    empty_label=_(\"Blank vote\"),\n                )\n</code></pre>"},{"location":"reference/election/views/#election.views.RoleForm","title":"<code>RoleForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form for creating a role.</p> Source code in <code>election/views.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    election_id = kwargs.pop(\"election_id\", None)\n    super().__init__(*args, **kwargs)\n    if election_id:\n        self.fields[\"election\"].queryset = Election.objects.filter(\n            id=election_id\n        ).all()\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionListForm","title":"<code>ElectionListForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> Source code in <code>election/views.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    election_id = kwargs.pop(\"election_id\", None)\n    super().__init__(*args, **kwargs)\n    if election_id:\n        self.fields[\"election\"].queryset = Election.objects.filter(\n            id=election_id\n        ).all()\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionForm","title":"<code>ElectionForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/election/views/#election.views.ElectionsListView","title":"<code>ElectionsListView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>ListView</code></p> <p>A list of all non archived elections visible.</p>"},{"location":"reference/election/views/#election.views.ElectionListArchivedView","title":"<code>ElectionListArchivedView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>ListView</code></p> <p>A list of all archived elections visible.</p>"},{"location":"reference/election/views/#election.views.ElectionDetailView","title":"<code>ElectionDetailView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Details an election responsability by responsability.</p>"},{"location":"reference/election/views/#election.views.ElectionDetailView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add additionnal data to the template.</p> Source code in <code>election/views.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add additionnal data to the template.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"election_form\"] = VoteForm(self.object, self.request.user)\n    kwargs[\"election_results\"] = self.object.results\n    return kwargs\n</code></pre>"},{"location":"reference/election/views/#election.views.VoteFormView","title":"<code>VoteFormView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>FormView</code></p> <p>Alows users to vote.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.VoteFormView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Verify that the user is part in a vote group.</p> Source code in <code>election/views.py</code> <pre><code>def form_valid(self, form):\n    \"\"\"Verify that the user is part in a vote group.\"\"\"\n    data = form.clean()\n    res = super(FormView, self).form_valid(form)\n    for grp_id in self.election.vote_groups.values_list(\"pk\", flat=True):\n        if self.request.user.is_in_group(pk=grp_id):\n            self.vote(data)\n            return res\n    return res\n</code></pre>"},{"location":"reference/election/views/#election.views.VoteFormView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add additionnal data to the template.</p> Source code in <code>election/views.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add additionnal data to the template.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"object\"] = self.election\n    kwargs[\"election\"] = self.election\n    kwargs[\"election_form\"] = self.get_form()\n    return kwargs\n</code></pre>"},{"location":"reference/election/views/#election.views.CandidatureCreateView","title":"<code>CandidatureCreateView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>CreateView</code></p> <p>View dedicated to a cundidature creation.</p>"},{"location":"reference/election/views/#election.views.CandidatureCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Verify that the selected user is in candidate group.</p> Source code in <code>election/views.py</code> <pre><code>def form_valid(self, form):\n    \"\"\"Verify that the selected user is in candidate group.\"\"\"\n    obj = form.instance\n    obj.election = self.election\n    if not hasattr(obj, \"user\"):\n        obj.user = self.request.user\n    if (obj.election.can_candidate(obj.user)) and (\n        obj.user == self.request.user or self.can_edit\n    ):\n        return super().form_valid(form)\n    raise PermissionDenied\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionCreateView","title":"<code>ElectionCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p>"},{"location":"reference/election/views/#election.views.RoleCreateView","title":"<code>RoleCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.RoleCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Verify that the user can edit properly.</p> Source code in <code>election/views.py</code> <pre><code>def form_valid(self, form):\n    \"\"\"Verify that the user can edit properly.\"\"\"\n    obj: Role = form.instance\n    user: User = self.request.user\n    if obj.election:\n        for grp_id in obj.election.edit_groups.values_list(\"pk\", flat=True):\n            if user.is_in_group(pk=grp_id):\n                return super(CreateView, self).form_valid(form)\n    raise PermissionDenied\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionListCreateView","title":"<code>ElectionListCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionListCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Verify that the user can vote on this election.</p> Source code in <code>election/views.py</code> <pre><code>def form_valid(self, form):\n    \"\"\"Verify that the user can vote on this election.\"\"\"\n    obj: ElectionList = form.instance\n    user: User = self.request.user\n    if obj.election:\n        for grp_id in obj.election.candidature_groups.values_list(\"pk\", flat=True):\n            if user.is_in_group(pk=grp_id):\n                return super(CreateView, self).form_valid(form)\n        for grp_id in obj.election.edit_groups.values_list(\"pk\", flat=True):\n            if user.is_in_group(pk=grp_id):\n                return super(CreateView, self).form_valid(form)\n    raise PermissionDenied\n</code></pre>"},{"location":"reference/election/views/#election.views.ElectionUpdateView","title":"<code>ElectionUpdateView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/election/views/#election.views.CandidatureUpdateView","title":"<code>CandidatureUpdateView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/election/views/#election.views.RoleUpdateView","title":"<code>RoleUpdateView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/election/views/#election.views.ElectionDeleteView","title":"<code>ElectionDeleteView</code>","text":"<p>               Bases: <code>DeleteView</code></p>"},{"location":"reference/election/views/#election.views.CandidatureDeleteView","title":"<code>CandidatureDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/election/views/#election.views.RoleDeleteView","title":"<code>RoleDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/election/views/#election.views.ElectionListDeleteView","title":"<code>ElectionListDeleteView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/forum/models/","title":"Models","text":""},{"location":"reference/forum/models/#forum.models.MESSAGE_META_ACTIONS","title":"<code>MESSAGE_META_ACTIONS = [('EDIT', _('Message edited by')), ('DELETE', _('Message deleted by')), ('UNDELETE', _('Message undeleted by'))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/forum/models/#forum.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/forum/models/#forum.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>Group</code></p> <p>Wrapper around django.auth.Group</p>"},{"location":"reference/forum/models/#forum.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/forum/models/#forum.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/forum/models/#forum.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Forum","title":"<code>Forum</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Forum class, made as a tree to allow nice tidy organization.</p> <p>owner_club allows club members to moderate there own topics edit_groups allows to put any group as a forum admin view_groups allows some groups to view a forum</p>"},{"location":"reference/forum/models/#forum.models.Forum.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>forum/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.owner_club = self.parent.owner_club\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n        self.save()\n</code></pre>"},{"location":"reference/forum/models/#forum.models.Forum.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>forum/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in forums\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/forum/models/#forum.models.ForumTopic","title":"<code>ForumTopic</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/forum/models/#forum.models.ForumMessage","title":"<code>ForumMessage</code>","text":"<p>               Bases: <code>Model</code></p> <p>A message in the forum (thx Cpt. Obvious.).</p>"},{"location":"reference/forum/models/#forum.models.ForumMessageMeta","title":"<code>ForumMessageMeta</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/forum/models/#forum.models.ForumUserInfo","title":"<code>ForumUserInfo</code>","text":"<p>               Bases: <code>Model</code></p> <p>The forum infos of a user.</p> <p>This currently stores only the last date a user clicked \"Mark all as read\". However, this can be extended with lot of user preferences dedicated to a user, such as the favourite topics, the signature, and so on...</p>"},{"location":"reference/forum/models/#forum.models.get_default_edit_group","title":"<code>get_default_edit_group()</code>","text":"Source code in <code>forum/models.py</code> <pre><code>def get_default_edit_group():\n    return [settings.SITH_GROUP_OLD_SUBSCRIBERS_ID]\n</code></pre>"},{"location":"reference/forum/models/#forum.models.get_default_view_group","title":"<code>get_default_view_group()</code>","text":"Source code in <code>forum/models.py</code> <pre><code>def get_default_view_group():\n    return [settings.SITH_GROUP_PUBLIC_ID]\n</code></pre>"},{"location":"reference/forum/views/","title":"Views","text":""},{"location":"reference/forum/views/#forum.views.CanCreateMixin","title":"<code>CanCreateMixin(*args, **kwargs)</code>","text":"<p>               Bases: <code>View</code></p> <p>Protect any child view that would create an object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user has not the necessary permission to create the object of the view.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/forum/views/#forum.views.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/forum/views/#forum.views.CanEditPropMixin","title":"<code>CanEditPropMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has owner permissions on the child view object.</p> <p>In other word, you can make a view with this view as parent, and it will be retricted to the users that are in the object's owner_group or that pass the <code>obj.can_be_viewed_by</code> test.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user cannot see the object</p>"},{"location":"reference/forum/views/#forum.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/forum/views/#forum.views.Forum","title":"<code>Forum</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Forum class, made as a tree to allow nice tidy organization.</p> <p>owner_club allows club members to moderate there own topics edit_groups allows to put any group as a forum admin view_groups allows some groups to view a forum</p>"},{"location":"reference/forum/views/#forum.views.Forum.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>forum/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.owner_club = self.parent.owner_club\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n        self.save()\n</code></pre>"},{"location":"reference/forum/views/#forum.views.Forum.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>forum/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in forums\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/forum/views/#forum.views.ForumMessage","title":"<code>ForumMessage</code>","text":"<p>               Bases: <code>Model</code></p> <p>A message in the forum (thx Cpt. Obvious.).</p>"},{"location":"reference/forum/views/#forum.views.ForumMessageMeta","title":"<code>ForumMessageMeta</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/forum/views/#forum.views.ForumTopic","title":"<code>ForumTopic</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/forum/views/#forum.views.ForumSearchView","title":"<code>ForumSearchView</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMainView","title":"<code>ForumMainView</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMarkAllAsRead","title":"<code>ForumMarkAllAsRead</code>","text":"<p>               Bases: <code>RedirectView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumFavoriteTopics","title":"<code>ForumFavoriteTopics</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumLastUnread","title":"<code>ForumLastUnread</code>","text":"<p>               Bases: <code>ListView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumNameField","title":"<code>ForumNameField</code>","text":"<p>               Bases: <code>ModelChoiceField</code></p>"},{"location":"reference/forum/views/#forum.views.ForumForm","title":"<code>ForumForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/forum/views/#forum.views.ForumCreateView","title":"<code>ForumCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/forum/views/#forum.views.ForumEditForm","title":"<code>ForumEditForm</code>","text":"<p>               Bases: <code>ForumForm</code></p>"},{"location":"reference/forum/views/#forum.views.ForumEditView","title":"<code>ForumEditView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumDeleteView","title":"<code>ForumDeleteView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumDetailView","title":"<code>ForumDetailView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/forum/views/#forum.views.TopicForm","title":"<code>TopicForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/forum/views/#forum.views.ForumTopicCreateView","title":"<code>ForumTopicCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/forum/views/#forum.views.ForumTopicEditView","title":"<code>ForumTopicEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumTopicSubscribeView","title":"<code>ForumTopicSubscribeView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>CanViewMixin</code>, <code>SingleObjectMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumTopicDetailView","title":"<code>ForumTopicDetailView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMessageView","title":"<code>ForumMessageView</code>","text":"<p>               Bases: <code>SingleObjectMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMessageEditView","title":"<code>ForumMessageEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMessageDeleteView","title":"<code>ForumMessageDeleteView</code>","text":"<p>               Bases: <code>SingleObjectMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMessageUndeleteView","title":"<code>ForumMessageUndeleteView</code>","text":"<p>               Bases: <code>SingleObjectMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/forum/views/#forum.views.ForumMessageCreateView","title":"<code>ForumMessageCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/forum/views/#forum.views.can_view","title":"<code>can_view(obj, user)</code>","text":"<p>Can the user see the object.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Object to test for permission</p> required <code>user</code> <code>User</code> <p>core.models.User to test permissions against</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if user is authorized to see object else False</p> Example <pre><code>if not can_view(self.object ,request.user):\n    raise PermissionDenied\n</code></pre> Source code in <code>core/auth/mixins.py</code> <pre><code>def can_view(obj: Any, user: User) -&gt; bool:\n    \"\"\"Can the user see the object.\n\n    Args:\n        obj: Object to test for permission\n        user: core.models.User to test permissions against\n\n    Returns:\n        True if user is authorized to see object else False\n\n    Example:\n        ```python\n        if not can_view(self.object ,request.user):\n            raise PermissionDenied\n        ```\n    \"\"\"\n    if obj is None or user.can_view(obj):\n        return True\n    return can_edit(obj, user)\n</code></pre>"},{"location":"reference/galaxy/models/","title":"Models","text":""},{"location":"reference/galaxy/models/#galaxy.models.current_star","title":"<code>current_star</code>  <code>property</code>","text":"<p>The star of this user in the :class:<code>Galaxy</code>.</p> <p>Only take into account the most recent active galaxy.</p> <p>Returns:</p> Type Description <code>GalaxyStar | None</code> <p>The star of this user if there is an active Galaxy</p> <code>GalaxyStar | None</code> <p>and this user is a citizen of it, else <code>None</code></p>"},{"location":"reference/galaxy/models/#galaxy.models.Membership","title":"<code>Membership</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Membership class makes the connection between User and Clubs.</p> Both Users and Clubs can have many Membership objects <ul> <li>a user can be a member of many clubs at a time</li> <li>a club can have many members at a time too</li> </ul> <p>A User is currently member of all the Clubs where its Membership has an end_date set to null/None. Otherwise, it's a past membership kept because it can be very useful to see who was in which Club in the past.</p>"},{"location":"reference/galaxy/models/#galaxy.models.Membership.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Membership.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Check if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Check if that object can be edited by the given user.\"\"\"\n    if user.is_root or user.is_board_member:\n        return True\n    membership = self.club.get_membership_for(user)\n    return membership is not None and membership.role &gt;= self.role\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/galaxy/models/#galaxy.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.GalaxyStar","title":"<code>GalaxyStar</code>","text":"<p>               Bases: <code>Model</code></p> <p>Define a star (vertex -&gt; user) in the galaxy graph.</p> <p>Store a reference to its owner citizen.</p> <p>Stars are linked to each others through the :class:<code>GalaxyLane</code> model.</p> <p>Each GalaxyStar has a mass which push it towards the center of the galaxy. This mass is proportional to the number of pictures the owner of the star is tagged on.</p>"},{"location":"reference/galaxy/models/#galaxy.models.GalaxyLane","title":"<code>GalaxyLane</code>","text":"<p>               Bases: <code>Model</code></p> <p>Define a lane (edge -&gt; link between galaxy citizen) in the galaxy map.</p> <p>Store a reference to both its ends and the distance it covers. Score details between citizen owning the stars is also stored here.</p>"},{"location":"reference/galaxy/models/#galaxy.models.StarDict","title":"<code>StarDict</code>","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/galaxy/models/#galaxy.models.GalaxyDict","title":"<code>GalaxyDict</code>","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"reference/galaxy/models/#galaxy.models.RelationScore","title":"<code>RelationScore</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy","title":"<code>Galaxy</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Galaxy, a graph linking the active users between each others.</p> <p>The distance between two users is given by a relation score which takes into account a few parameter like the number of pictures they are both tagged on, the time during which they were in the same clubs and whether they are in the same family.</p> <p>The citizens of the Galaxy are represented by :class:<code>GalaxyStar</code> and their relations by :class:<code>GalaxyLane</code>.</p> <p>Several galaxies can coexist. In this case, only the most recent active one shall usually be taken into account. This is useful to keep the current galaxy while generating a new one and swapping them only at the very end.</p> <p>Please take into account that generating the galaxy is a very expensive operation. For this reason, try not to call the :meth:<code>rule</code> method more than once a day in production.</p> <p>To quickly access to the state of a galaxy, use the :attr:<code>state</code> attribute.</p>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.compute_individual_scores","title":"<code>compute_individual_scores()</code>  <code>classmethod</code>","text":"<p>Compute an individual score for each citizen.</p> <p>It will later be used by the graph algorithm to push higher scores towards the center of the galaxy.</p> <p>Idea: This could be added to the computation:</p> <ul> <li>Picture count</li> <li>Counter consumption</li> <li>Barman time</li> <li>...</li> </ul> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_individual_scores(cls) -&gt; dict[int, int]:\n    \"\"\"Compute an individual score for each citizen.\n\n    It will later be used by the graph algorithm to push\n    higher scores towards the center of the galaxy.\n\n    Idea: This could be added to the computation:\n\n    - Picture count\n    - Counter consumption\n    - Barman time\n    - ...\n    \"\"\"\n    users = (\n        User.objects.annotate(\n            score=(\n                Count(\"godchildren\", distinct=True) * cls.FAMILY_LINK_POINTS\n                + Count(\"godfathers\", distinct=True) * cls.FAMILY_LINK_POINTS\n                + Count(\"pictures\", distinct=True) * cls.PICTURE_POINTS\n                + Count(\"memberships\", distinct=True) * cls.CLUBS_POINTS\n            )\n        )\n        .filter(score__gt=0)\n        .values(\"id\", \"score\")\n    )\n    # TODO:\n    # Scale that value with some magic number to accommodate to typical data\n    # Really active galaxy citizen after 5 years typically have a score of about XXX\n    # Citizen that were seen regularly without taking much part in organizations typically have a score of about XXX\n    # Citizen that only went to a few events typically score about XXX\n    res = {u[\"id\"]: int(math.log2(u[\"score\"] + 1)) for u in users}\n    return res\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.compute_user_family_score","title":"<code>compute_user_family_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the family score of the relation between the given users.</p> <p>This takes into account mutual godfathers.</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_family_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the family score of the relation between the given users.\n\n    This takes into account mutual godfathers.\n    \"\"\"\n    godchildren = User.objects.filter(godchildren=user).values_list(\"id\", flat=True)\n    godfathers = User.objects.filter(godfathers=user).values_list(\"id\", flat=True)\n    result = defaultdict(int)\n    for parent in itertools.chain(godchildren, godfathers):\n        result[parent] += cls.FAMILY_LINK_POINTS\n    return result\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.compute_user_pictures_score","title":"<code>compute_user_pictures_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the pictures score of the relation between the given users.</p> <p>The pictures score is obtained by counting the number of :class:<code>Picture</code> in which they have been both identified. This score is then multiplied by 2.</p> <p>Returns:</p> Type Description <code>defaultdict[int, int]</code> <p>The number of pictures both users have in common, times 2</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_pictures_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the pictures score of the relation between the given users.\n\n    The pictures score is obtained by counting the number\n    of :class:`Picture` in which they have been both identified.\n    This score is then multiplied by 2.\n\n    Returns:\n         The number of pictures both users have in common, times 2\n    \"\"\"\n    common_photos = (\n        PeoplePictureRelation.objects.filter(\n            picture__in=Picture.objects.filter(people__user=user)\n        )\n        .values(\"user\")\n        .annotate(count=Count(\"user\"))\n    )\n    return defaultdict(\n        int, {p[\"user\"]: p[\"count\"] * cls.PICTURE_POINTS for p in common_photos}\n    )\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.compute_user_clubs_score","title":"<code>compute_user_clubs_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the clubs score of the relation between the given users.</p> <p>The club score is obtained by counting the number of days during which the memberships (see :class:<code>club.models.Membership</code>) of both users overlapped.</p> <p>For example, if user1 was a member of Unitec from 01/01/2020 to 31/12/2021 (two years) and user2 was a member of the same club from 01/01/2021 to 31/12/2022 (also two years, but with an offset of one year), then their club score is 365.</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_clubs_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the clubs score of the relation between the given users.\n\n    The club score is obtained by counting the number of days\n    during which the memberships (see :class:`club.models.Membership`)\n    of both users overlapped.\n\n    For example, if user1 was a member of Unitec from 01/01/2020 to 31/12/2021\n    (two years) and user2 was a member of the same club from 01/01/2021 to\n    31/12/2022 (also two years, but with an offset of one year), then their\n    club score is 365.\n    \"\"\"\n    memberships = user.memberships.only(\"start_date\", \"end_date\", \"club_id\")\n    result = defaultdict(int)\n    now = localdate()\n    for membership in memberships:\n        # This is a N+1 query, but 92% of galaxy users have less than 10 memberships.\n        # Only 5 users have more than 30 memberships.\n        common_memberships = (\n            Membership.objects.exclude(user=user)\n            .filter(\n                Q(  # start2 &lt;= start1 &lt;= end2\n                    start_date__lte=membership.start_date,\n                    end_date__gte=membership.start_date,\n                )\n                | Q(  # start2 &lt;= start1 &lt;= now\n                    start_date__lte=membership.start_date, end_date=None\n                )\n                | Q(  # start1 &lt;= start2 &lt;= end2\n                    start_date__gte=membership.start_date,\n                    start_date__lte=membership.end_date or now,\n                ),\n                club_id=membership.club_id,\n            )\n            .only(\"start_date\", \"end_date\", \"user_id\")\n        )\n        for other in common_memberships:\n            start = max(membership.start_date, other.start_date)\n            end = min(membership.end_date or now, other.end_date or now)\n            result[other.user_id] += (end - start).days * cls.CLUBS_POINTS\n    return result\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.scale_distance","title":"<code>scale_distance(value)</code>  <code>classmethod</code>","text":"<p>Given a numeric value, return a scaled value which can be used in the Galaxy's graphical interface to set the distance between two stars.</p> <p>Returns:</p> Type Description <code>int</code> <p>the scaled value usable in the Galaxy's 3d graph</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef scale_distance(cls, value: int | float) -&gt; int:\n    \"\"\"Given a numeric value, return a scaled value which can\n    be used in the Galaxy's graphical interface to set the distance\n    between two stars.\n\n    Returns:\n        the scaled value usable in the Galaxy's 3d graph\n    \"\"\"\n    # TODO: this will need adjustements with the real, typical data on Taiste\n    if value == 0:\n        return 4000  # Following calculus would give us +\u221e, we cap it to 4000\n\n    cls.logger.debug(f\"\\t\\t&gt; Score: {value}\")\n    # Invert score to draw close users together\n    value = 1 / value  # Cannot be 0\n    value += 2  # We use log2 just below and need to stay above 1\n    value = (  # Let's get something in the range ]0; log2(3)-1\u22480.58[ that we can multiply later\n        math.log2(value) - 1\n    )\n    value *= (  # Scale that value with a magic number to accommodate to typical data\n        # Really close galaxy citizen after 5 years typically have a score of about XXX\n        # Citizen that were in the same year without being really friends typically have a score of about XXX\n        # Citizen that have met once or twice only have a couple of pictures together typically score about XXX\n        cls.GALAXY_SCALE_FACTOR\n    )\n    cls.logger.debug(f\"\\t\\t&gt; Scaled distance: {value}\")\n    return int(value)\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.rule","title":"<code>rule(picture_count_threshold=DEFAULT_PICTURE_COUNT_THRESHOLD)</code>","text":"<p>Main function of the Galaxy.</p> <p>Iterate over all the rulable users to promote them to citizens. A citizen is a user who has a corresponding star in the Galaxy. Also build up the lanes, which are the links between the different citizen.</p> <p>Users who can be ruled are defined with the <code>picture_count_threshold</code>: all users who are identified in a strictly lower number of pictures won't be promoted to citizens. This does very effectively limit the quantity of computing to do and only includes users who have had a minimum of activity.</p> <p>This method still remains very expensive, so think thoroughly before you call it, especially in production.</p> <p>:param picture_count_threshold: the minimum number of picture to have to be                                 included in the galaxy</p> Source code in <code>galaxy/models.py</code> <pre><code>def rule(\n    self, picture_count_threshold: int = DEFAULT_PICTURE_COUNT_THRESHOLD\n) -&gt; None:\n    \"\"\"Main function of the Galaxy.\n\n    Iterate over all the rulable users to promote them to citizens.\n    A citizen is a user who has a corresponding star in the Galaxy.\n    Also build up the lanes, which are the links between the different citizen.\n\n    Users who can be ruled are defined with the `picture_count_threshold`:\n    all users who are identified in a strictly lower number of pictures\n    won't be promoted to citizens.\n    This does very effectively limit the quantity of computing to do\n    and only includes users who have had a minimum of activity.\n\n    This method still remains very expensive, so think thoroughly before\n    you call it, especially in production.\n\n    :param picture_count_threshold: the minimum number of picture to have to be\n                                    included in the galaxy\n    \"\"\"\n    total_time = time.time()\n    self.logger.info(\"Listing rulable citizen.\")\n\n    # force fetch of the whole query to make sure there won't\n    # be any more db hits\n    # this is memory expensive but prevents a lot of db hits, therefore\n    # is far more time efficient\n\n    rulable_users = list(self.get_rulable_users(picture_count_threshold))\n    rulable_users_count = len(rulable_users)\n    user1_count = 0\n    self.logger.info(\n        f\"{rulable_users_count} citizen have been listed. Starting to rule.\"\n    )\n\n    self.logger.info(\"Creating stars for all citizen\")\n    individual_scores = self.compute_individual_scores()\n    GalaxyStar.objects.bulk_create(\n        [\n            GalaxyStar(owner=user, galaxy=self, mass=individual_scores[user.id])\n            for user in rulable_users\n        ]\n    )\n    stars = {star.owner_id: star for star in self.stars.all()}\n\n    self.logger.info(\"Creating lanes between stars\")\n    global_avg_speed_accumulator = 0\n    global_avg_speed_count = 0\n    t_global_start = time.time()\n    while len(rulable_users) &gt; 0:\n        user1 = rulable_users.pop()\n        user1_count += 1\n        rulable_users_count2 = len(rulable_users)\n\n        star1 = stars[user1.id]\n\n        lanes = []\n        family_scores = self.compute_user_family_score(user1)\n        picture_scores = self.compute_user_pictures_score(user1)\n        club_scores = self.compute_user_clubs_score(user1)\n\n        for user2 in rulable_users:\n            star2 = stars[user2.id]\n\n            score = RelationScore(\n                family=family_scores.get(user2.id, 0),\n                pictures=picture_scores.get(user2.id, 0),\n                clubs=club_scores.get(user2.id, 0),\n            )\n            distance = self.scale_distance(sum(score))\n            if distance &lt; 30:  # TODO: this needs tuning with real-world data\n                lanes.append(\n                    GalaxyLane(\n                        star1=star1,\n                        star2=star2,\n                        distance=distance,\n                        family=score.family,\n                        pictures=score.pictures,\n                        clubs=score.clubs,\n                    )\n                )\n        GalaxyLane.objects.bulk_create(lanes)\n\n        t_global_end = time.time()\n        global_delta = t_global_end - t_global_start\n        speed = 1.0 / global_delta\n        global_avg_speed_accumulator += speed\n        global_avg_speed_count += 1\n        global_avg_speed = global_avg_speed_accumulator / global_avg_speed_count\n\n        if user1_count % 50 == 0:\n            self.logger.info(\"\")\n            self.logger.info(f\" Ruling of {self} \".center(60, \"#\"))\n            self.logger.info(\n                f\"Progression: {user1_count}/{rulable_users_count} \"\n                f\"citizen -- {rulable_users_count - user1_count} remaining\"\n            )\n            self.logger.info(f\"Speed: {global_avg_speed:.2f} citizen per second\")\n            eta = rulable_users_count2 // global_avg_speed\n            self.logger.info(\n                f\"ETA: {int(eta // 60 % 60)} minutes {int(eta % 60)} seconds\"\n            )\n            self.logger.info(\"#\" * 60)\n        t_global_start = time.time()\n\n    # Here, we get the IDs of the old galaxies that we'll need to delete. In normal operation, only one galaxy\n    # should be returned, and we can't delete it yet, as it's the one still displayed by the Sith.\n    old_galaxies_pks = list(\n        Galaxy.objects.filter(state__isnull=False).values_list(\"pk\", flat=True)\n    )\n    self.logger.info(\n        f\"These old galaxies will be deleted once the new one is ready: {old_galaxies_pks}\"\n    )\n\n    # Making the state sets this new galaxy as being ready. From now on, the Sith will show us to the world.\n    self.make_state()\n\n    # Avoid accident if there is nothing to delete\n    if len(old_galaxies_pks) &gt; 0:\n        # Former galaxies can now be deleted.\n        Galaxy.objects.filter(pk__in=old_galaxies_pks).delete()\n\n    total_time = time.time() - total_time\n    total_time_minutes = int(total_time // 60 % 60)\n    total_time_seconds = int(total_time % 60)\n    self.logger.info(\n        f\"{self} ruled in {total_time_minutes} minutes, {total_time_seconds} seconds\"\n    )\n</code></pre>"},{"location":"reference/galaxy/models/#galaxy.models.Galaxy.make_state","title":"<code>make_state()</code>","text":"<p>Compute JSON structure to send to 3d-force-graph: https://github.com/vasturiano/3d-force-graph/.</p> Source code in <code>galaxy/models.py</code> <pre><code>def make_state(self) -&gt; None:\n    \"\"\"Compute JSON structure to send to 3d-force-graph: https://github.com/vasturiano/3d-force-graph/.\"\"\"\n    self.logger.info(\n        \"Caching current Galaxy state for a quicker display of the Empire's power.\"\n    )\n    stars = (\n        GalaxyStar.objects.filter(galaxy=self)\n        .order_by(\"owner_id\")\n        .select_related(\"owner\")\n    )\n    lanes = (\n        GalaxyLane.objects.filter(star1__galaxy=self)\n        .order_by(\"star1\")\n        .annotate(\n            star1_owner=F(\"star1__owner_id\"), star2_owner=F(\"star2__owner_id\")\n        )\n    )\n    json = GalaxyDict(\n        nodes=[\n            StarDict(\n                id=star.owner_id, name=star.owner.get_display_name(), mass=star.mass\n            )\n            for star in stars\n        ],\n        links=[\n            {\n                \"source\": path.star1_owner,\n                \"target\": path.star2_owner,\n                \"value\": path.distance,\n            }\n            for path in lanes\n        ],\n    )\n    self.state = json\n    self.save()\n    self.logger.info(f\"{self} is now ready!\")\n</code></pre>"},{"location":"reference/galaxy/views/","title":"Views","text":""},{"location":"reference/galaxy/views/#galaxy.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/galaxy/views/#galaxy.views.FormerSubscriberMixin","title":"<code>FormerSubscriberMixin</code>","text":"<p>               Bases: <code>AccessMixin</code></p> <p>Check if the user was at least an old subscriber.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user never subscribed.</p>"},{"location":"reference/galaxy/views/#galaxy.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/galaxy/views/#galaxy.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.UserTabsMixin","title":"<code>UserTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy","title":"<code>Galaxy</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Galaxy, a graph linking the active users between each others.</p> <p>The distance between two users is given by a relation score which takes into account a few parameter like the number of pictures they are both tagged on, the time during which they were in the same clubs and whether they are in the same family.</p> <p>The citizens of the Galaxy are represented by :class:<code>GalaxyStar</code> and their relations by :class:<code>GalaxyLane</code>.</p> <p>Several galaxies can coexist. In this case, only the most recent active one shall usually be taken into account. This is useful to keep the current galaxy while generating a new one and swapping them only at the very end.</p> <p>Please take into account that generating the galaxy is a very expensive operation. For this reason, try not to call the :meth:<code>rule</code> method more than once a day in production.</p> <p>To quickly access to the state of a galaxy, use the :attr:<code>state</code> attribute.</p>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.compute_individual_scores","title":"<code>compute_individual_scores()</code>  <code>classmethod</code>","text":"<p>Compute an individual score for each citizen.</p> <p>It will later be used by the graph algorithm to push higher scores towards the center of the galaxy.</p> <p>Idea: This could be added to the computation:</p> <ul> <li>Picture count</li> <li>Counter consumption</li> <li>Barman time</li> <li>...</li> </ul> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_individual_scores(cls) -&gt; dict[int, int]:\n    \"\"\"Compute an individual score for each citizen.\n\n    It will later be used by the graph algorithm to push\n    higher scores towards the center of the galaxy.\n\n    Idea: This could be added to the computation:\n\n    - Picture count\n    - Counter consumption\n    - Barman time\n    - ...\n    \"\"\"\n    users = (\n        User.objects.annotate(\n            score=(\n                Count(\"godchildren\", distinct=True) * cls.FAMILY_LINK_POINTS\n                + Count(\"godfathers\", distinct=True) * cls.FAMILY_LINK_POINTS\n                + Count(\"pictures\", distinct=True) * cls.PICTURE_POINTS\n                + Count(\"memberships\", distinct=True) * cls.CLUBS_POINTS\n            )\n        )\n        .filter(score__gt=0)\n        .values(\"id\", \"score\")\n    )\n    # TODO:\n    # Scale that value with some magic number to accommodate to typical data\n    # Really active galaxy citizen after 5 years typically have a score of about XXX\n    # Citizen that were seen regularly without taking much part in organizations typically have a score of about XXX\n    # Citizen that only went to a few events typically score about XXX\n    res = {u[\"id\"]: int(math.log2(u[\"score\"] + 1)) for u in users}\n    return res\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.compute_user_family_score","title":"<code>compute_user_family_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the family score of the relation between the given users.</p> <p>This takes into account mutual godfathers.</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_family_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the family score of the relation between the given users.\n\n    This takes into account mutual godfathers.\n    \"\"\"\n    godchildren = User.objects.filter(godchildren=user).values_list(\"id\", flat=True)\n    godfathers = User.objects.filter(godfathers=user).values_list(\"id\", flat=True)\n    result = defaultdict(int)\n    for parent in itertools.chain(godchildren, godfathers):\n        result[parent] += cls.FAMILY_LINK_POINTS\n    return result\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.compute_user_pictures_score","title":"<code>compute_user_pictures_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the pictures score of the relation between the given users.</p> <p>The pictures score is obtained by counting the number of :class:<code>Picture</code> in which they have been both identified. This score is then multiplied by 2.</p> <p>Returns:</p> Type Description <code>defaultdict[int, int]</code> <p>The number of pictures both users have in common, times 2</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_pictures_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the pictures score of the relation between the given users.\n\n    The pictures score is obtained by counting the number\n    of :class:`Picture` in which they have been both identified.\n    This score is then multiplied by 2.\n\n    Returns:\n         The number of pictures both users have in common, times 2\n    \"\"\"\n    common_photos = (\n        PeoplePictureRelation.objects.filter(\n            picture__in=Picture.objects.filter(people__user=user)\n        )\n        .values(\"user\")\n        .annotate(count=Count(\"user\"))\n    )\n    return defaultdict(\n        int, {p[\"user\"]: p[\"count\"] * cls.PICTURE_POINTS for p in common_photos}\n    )\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.compute_user_clubs_score","title":"<code>compute_user_clubs_score(user)</code>  <code>classmethod</code>","text":"<p>Compute the clubs score of the relation between the given users.</p> <p>The club score is obtained by counting the number of days during which the memberships (see :class:<code>club.models.Membership</code>) of both users overlapped.</p> <p>For example, if user1 was a member of Unitec from 01/01/2020 to 31/12/2021 (two years) and user2 was a member of the same club from 01/01/2021 to 31/12/2022 (also two years, but with an offset of one year), then their club score is 365.</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef compute_user_clubs_score(cls, user: User) -&gt; defaultdict[int, int]:\n    \"\"\"Compute the clubs score of the relation between the given users.\n\n    The club score is obtained by counting the number of days\n    during which the memberships (see :class:`club.models.Membership`)\n    of both users overlapped.\n\n    For example, if user1 was a member of Unitec from 01/01/2020 to 31/12/2021\n    (two years) and user2 was a member of the same club from 01/01/2021 to\n    31/12/2022 (also two years, but with an offset of one year), then their\n    club score is 365.\n    \"\"\"\n    memberships = user.memberships.only(\"start_date\", \"end_date\", \"club_id\")\n    result = defaultdict(int)\n    now = localdate()\n    for membership in memberships:\n        # This is a N+1 query, but 92% of galaxy users have less than 10 memberships.\n        # Only 5 users have more than 30 memberships.\n        common_memberships = (\n            Membership.objects.exclude(user=user)\n            .filter(\n                Q(  # start2 &lt;= start1 &lt;= end2\n                    start_date__lte=membership.start_date,\n                    end_date__gte=membership.start_date,\n                )\n                | Q(  # start2 &lt;= start1 &lt;= now\n                    start_date__lte=membership.start_date, end_date=None\n                )\n                | Q(  # start1 &lt;= start2 &lt;= end2\n                    start_date__gte=membership.start_date,\n                    start_date__lte=membership.end_date or now,\n                ),\n                club_id=membership.club_id,\n            )\n            .only(\"start_date\", \"end_date\", \"user_id\")\n        )\n        for other in common_memberships:\n            start = max(membership.start_date, other.start_date)\n            end = min(membership.end_date or now, other.end_date or now)\n            result[other.user_id] += (end - start).days * cls.CLUBS_POINTS\n    return result\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.scale_distance","title":"<code>scale_distance(value)</code>  <code>classmethod</code>","text":"<p>Given a numeric value, return a scaled value which can be used in the Galaxy's graphical interface to set the distance between two stars.</p> <p>Returns:</p> Type Description <code>int</code> <p>the scaled value usable in the Galaxy's 3d graph</p> Source code in <code>galaxy/models.py</code> <pre><code>@classmethod\ndef scale_distance(cls, value: int | float) -&gt; int:\n    \"\"\"Given a numeric value, return a scaled value which can\n    be used in the Galaxy's graphical interface to set the distance\n    between two stars.\n\n    Returns:\n        the scaled value usable in the Galaxy's 3d graph\n    \"\"\"\n    # TODO: this will need adjustements with the real, typical data on Taiste\n    if value == 0:\n        return 4000  # Following calculus would give us +\u221e, we cap it to 4000\n\n    cls.logger.debug(f\"\\t\\t&gt; Score: {value}\")\n    # Invert score to draw close users together\n    value = 1 / value  # Cannot be 0\n    value += 2  # We use log2 just below and need to stay above 1\n    value = (  # Let's get something in the range ]0; log2(3)-1\u22480.58[ that we can multiply later\n        math.log2(value) - 1\n    )\n    value *= (  # Scale that value with a magic number to accommodate to typical data\n        # Really close galaxy citizen after 5 years typically have a score of about XXX\n        # Citizen that were in the same year without being really friends typically have a score of about XXX\n        # Citizen that have met once or twice only have a couple of pictures together typically score about XXX\n        cls.GALAXY_SCALE_FACTOR\n    )\n    cls.logger.debug(f\"\\t\\t&gt; Scaled distance: {value}\")\n    return int(value)\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.rule","title":"<code>rule(picture_count_threshold=DEFAULT_PICTURE_COUNT_THRESHOLD)</code>","text":"<p>Main function of the Galaxy.</p> <p>Iterate over all the rulable users to promote them to citizens. A citizen is a user who has a corresponding star in the Galaxy. Also build up the lanes, which are the links between the different citizen.</p> <p>Users who can be ruled are defined with the <code>picture_count_threshold</code>: all users who are identified in a strictly lower number of pictures won't be promoted to citizens. This does very effectively limit the quantity of computing to do and only includes users who have had a minimum of activity.</p> <p>This method still remains very expensive, so think thoroughly before you call it, especially in production.</p> <p>:param picture_count_threshold: the minimum number of picture to have to be                                 included in the galaxy</p> Source code in <code>galaxy/models.py</code> <pre><code>def rule(\n    self, picture_count_threshold: int = DEFAULT_PICTURE_COUNT_THRESHOLD\n) -&gt; None:\n    \"\"\"Main function of the Galaxy.\n\n    Iterate over all the rulable users to promote them to citizens.\n    A citizen is a user who has a corresponding star in the Galaxy.\n    Also build up the lanes, which are the links between the different citizen.\n\n    Users who can be ruled are defined with the `picture_count_threshold`:\n    all users who are identified in a strictly lower number of pictures\n    won't be promoted to citizens.\n    This does very effectively limit the quantity of computing to do\n    and only includes users who have had a minimum of activity.\n\n    This method still remains very expensive, so think thoroughly before\n    you call it, especially in production.\n\n    :param picture_count_threshold: the minimum number of picture to have to be\n                                    included in the galaxy\n    \"\"\"\n    total_time = time.time()\n    self.logger.info(\"Listing rulable citizen.\")\n\n    # force fetch of the whole query to make sure there won't\n    # be any more db hits\n    # this is memory expensive but prevents a lot of db hits, therefore\n    # is far more time efficient\n\n    rulable_users = list(self.get_rulable_users(picture_count_threshold))\n    rulable_users_count = len(rulable_users)\n    user1_count = 0\n    self.logger.info(\n        f\"{rulable_users_count} citizen have been listed. Starting to rule.\"\n    )\n\n    self.logger.info(\"Creating stars for all citizen\")\n    individual_scores = self.compute_individual_scores()\n    GalaxyStar.objects.bulk_create(\n        [\n            GalaxyStar(owner=user, galaxy=self, mass=individual_scores[user.id])\n            for user in rulable_users\n        ]\n    )\n    stars = {star.owner_id: star for star in self.stars.all()}\n\n    self.logger.info(\"Creating lanes between stars\")\n    global_avg_speed_accumulator = 0\n    global_avg_speed_count = 0\n    t_global_start = time.time()\n    while len(rulable_users) &gt; 0:\n        user1 = rulable_users.pop()\n        user1_count += 1\n        rulable_users_count2 = len(rulable_users)\n\n        star1 = stars[user1.id]\n\n        lanes = []\n        family_scores = self.compute_user_family_score(user1)\n        picture_scores = self.compute_user_pictures_score(user1)\n        club_scores = self.compute_user_clubs_score(user1)\n\n        for user2 in rulable_users:\n            star2 = stars[user2.id]\n\n            score = RelationScore(\n                family=family_scores.get(user2.id, 0),\n                pictures=picture_scores.get(user2.id, 0),\n                clubs=club_scores.get(user2.id, 0),\n            )\n            distance = self.scale_distance(sum(score))\n            if distance &lt; 30:  # TODO: this needs tuning with real-world data\n                lanes.append(\n                    GalaxyLane(\n                        star1=star1,\n                        star2=star2,\n                        distance=distance,\n                        family=score.family,\n                        pictures=score.pictures,\n                        clubs=score.clubs,\n                    )\n                )\n        GalaxyLane.objects.bulk_create(lanes)\n\n        t_global_end = time.time()\n        global_delta = t_global_end - t_global_start\n        speed = 1.0 / global_delta\n        global_avg_speed_accumulator += speed\n        global_avg_speed_count += 1\n        global_avg_speed = global_avg_speed_accumulator / global_avg_speed_count\n\n        if user1_count % 50 == 0:\n            self.logger.info(\"\")\n            self.logger.info(f\" Ruling of {self} \".center(60, \"#\"))\n            self.logger.info(\n                f\"Progression: {user1_count}/{rulable_users_count} \"\n                f\"citizen -- {rulable_users_count - user1_count} remaining\"\n            )\n            self.logger.info(f\"Speed: {global_avg_speed:.2f} citizen per second\")\n            eta = rulable_users_count2 // global_avg_speed\n            self.logger.info(\n                f\"ETA: {int(eta // 60 % 60)} minutes {int(eta % 60)} seconds\"\n            )\n            self.logger.info(\"#\" * 60)\n        t_global_start = time.time()\n\n    # Here, we get the IDs of the old galaxies that we'll need to delete. In normal operation, only one galaxy\n    # should be returned, and we can't delete it yet, as it's the one still displayed by the Sith.\n    old_galaxies_pks = list(\n        Galaxy.objects.filter(state__isnull=False).values_list(\"pk\", flat=True)\n    )\n    self.logger.info(\n        f\"These old galaxies will be deleted once the new one is ready: {old_galaxies_pks}\"\n    )\n\n    # Making the state sets this new galaxy as being ready. From now on, the Sith will show us to the world.\n    self.make_state()\n\n    # Avoid accident if there is nothing to delete\n    if len(old_galaxies_pks) &gt; 0:\n        # Former galaxies can now be deleted.\n        Galaxy.objects.filter(pk__in=old_galaxies_pks).delete()\n\n    total_time = time.time() - total_time\n    total_time_minutes = int(total_time // 60 % 60)\n    total_time_seconds = int(total_time % 60)\n    self.logger.info(\n        f\"{self} ruled in {total_time_minutes} minutes, {total_time_seconds} seconds\"\n    )\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.Galaxy.make_state","title":"<code>make_state()</code>","text":"<p>Compute JSON structure to send to 3d-force-graph: https://github.com/vasturiano/3d-force-graph/.</p> Source code in <code>galaxy/models.py</code> <pre><code>def make_state(self) -&gt; None:\n    \"\"\"Compute JSON structure to send to 3d-force-graph: https://github.com/vasturiano/3d-force-graph/.\"\"\"\n    self.logger.info(\n        \"Caching current Galaxy state for a quicker display of the Empire's power.\"\n    )\n    stars = (\n        GalaxyStar.objects.filter(galaxy=self)\n        .order_by(\"owner_id\")\n        .select_related(\"owner\")\n    )\n    lanes = (\n        GalaxyLane.objects.filter(star1__galaxy=self)\n        .order_by(\"star1\")\n        .annotate(\n            star1_owner=F(\"star1__owner_id\"), star2_owner=F(\"star2__owner_id\")\n        )\n    )\n    json = GalaxyDict(\n        nodes=[\n            StarDict(\n                id=star.owner_id, name=star.owner.get_display_name(), mass=star.mass\n            )\n            for star in stars\n        ],\n        links=[\n            {\n                \"source\": path.star1_owner,\n                \"target\": path.star2_owner,\n                \"value\": path.distance,\n            }\n            for path in lanes\n        ],\n    )\n    self.state = json\n    self.save()\n    self.logger.info(f\"{self} is now ready!\")\n</code></pre>"},{"location":"reference/galaxy/views/#galaxy.views.GalaxyLane","title":"<code>GalaxyLane</code>","text":"<p>               Bases: <code>Model</code></p> <p>Define a lane (edge -&gt; link between galaxy citizen) in the galaxy map.</p> <p>Store a reference to both its ends and the distance it covers. Score details between citizen owning the stars is also stored here.</p>"},{"location":"reference/galaxy/views/#galaxy.views.GalaxyUserView","title":"<code>GalaxyUserView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>UserTabsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/galaxy/views/#galaxy.views.GalaxyDataView","title":"<code>GalaxyDataView</code>","text":"<p>               Bases: <code>FormerSubscriberMixin</code>, <code>View</code></p>"},{"location":"reference/matmat/models/","title":"Models","text":""},{"location":"reference/matmat/views/","title":"Views","text":""},{"location":"reference/matmat/views/#matmat.views.FormerSubscriberMixin","title":"<code>FormerSubscriberMixin</code>","text":"<p>               Bases: <code>AccessMixin</code></p> <p>Check if the user was at least an old subscriber.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user never subscribed.</p>"},{"location":"reference/matmat/views/#matmat.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/matmat/views/#matmat.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.SearchType","title":"<code>SearchType</code>","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"reference/matmat/views/#matmat.views.SearchForm","title":"<code>SearchForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> Source code in <code>matmat/views.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    for key in self.fields:\n        self.fields[key].required = False\n</code></pre>"},{"location":"reference/matmat/views/#matmat.views.SearchFormListView","title":"<code>SearchFormListView</code>","text":"<p>               Bases: <code>FormerSubscriberMixin</code>, <code>SingleObjectMixin</code>, <code>ListView</code></p>"},{"location":"reference/matmat/views/#matmat.views.SearchFormView","title":"<code>SearchFormView</code>","text":"<p>               Bases: <code>FormerSubscriberMixin</code>, <code>FormView</code></p> <p>Allows users to search inside the user list.</p>"},{"location":"reference/matmat/views/#matmat.views.SearchNormalFormView","title":"<code>SearchNormalFormView</code>","text":"<p>               Bases: <code>SearchFormView</code></p>"},{"location":"reference/matmat/views/#matmat.views.SearchReverseFormView","title":"<code>SearchReverseFormView</code>","text":"<p>               Bases: <code>SearchFormView</code></p>"},{"location":"reference/matmat/views/#matmat.views.SearchQuickFormView","title":"<code>SearchQuickFormView</code>","text":"<p>               Bases: <code>SearchFormView</code></p>"},{"location":"reference/matmat/views/#matmat.views.SearchClearFormView","title":"<code>SearchClearFormView</code>","text":"<p>               Bases: <code>FormerSubscriberMixin</code>, <code>View</code></p> <p>Clear SearchFormView and redirect to it.</p>"},{"location":"reference/matmat/views/#matmat.views.search_user","title":"<code>search_user(query)</code>","text":"Source code in <code>core/views/index.py</code> <pre><code>def search_user(query):\n    try:\n        # slugify turns everything into ascii and every whitespace into -\n        # it ends by removing duplicate - (so ' - ' will turn into '-')\n        # replace('-', ' ') because search is whitespace based\n        query = slugify(query).replace(\"-\", \" \")\n        # TODO: is this necessary?\n        query = html.escape(query)\n        res = (\n            SearchQuerySet()\n            .models(User)\n            .autocomplete(auto=query)\n            .order_by(\"-last_login\")\n            .load_all()[:20]\n        )\n        return [r.object for r in res]\n    except TypeError:\n        return []\n</code></pre>"},{"location":"reference/pedagogy/models/","title":"Models","text":""},{"location":"reference/pedagogy/models/#pedagogy.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.UV","title":"<code>UV</code>","text":"<p>               Bases: <code>Model</code></p> <p>Contains infos about an UV (course).</p>"},{"location":"reference/pedagogy/models/#pedagogy.models.UV.has_user_already_commented","title":"<code>has_user_already_commented(user)</code>","text":"<p>Help prevent multiples comments from the same user.</p> <p>This function checks that no other comment has been posted by a specified user.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user has already posted a comment on this UV, else False.</p> Source code in <code>pedagogy/models.py</code> <pre><code>def has_user_already_commented(self, user: User) -&gt; bool:\n    \"\"\"Help prevent multiples comments from the same user.\n\n    This function checks that no other comment has been posted by a specified user.\n\n    Returns:\n        True if the user has already posted a comment on this UV, else False.\n    \"\"\"\n    return self.comments.filter(author=user).exists()\n</code></pre>"},{"location":"reference/pedagogy/models/#pedagogy.models.UVCommentQuerySet","title":"<code>UVCommentQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/pedagogy/models/#pedagogy.models.UVComment","title":"<code>UVComment</code>","text":"<p>               Bases: <code>Model</code></p> <p>A comment about an UV.</p>"},{"location":"reference/pedagogy/models/#pedagogy.models.UVResult","title":"<code>UVResult</code>","text":"<p>               Bases: <code>Model</code></p> <p>Results got to an UV.</p> <p>Views will be implemented after the first release Will list every UV done by an user Linked to user           uv Contains a grade settings.SITH_PEDAGOGY_UV_RESULT_GRADE          a semester (P/A)20xx.</p>"},{"location":"reference/pedagogy/models/#pedagogy.models.UVCommentReport","title":"<code>UVCommentReport</code>","text":"<p>               Bases: <code>Model</code></p> <p>Report an inapropriate comment.</p>"},{"location":"reference/pedagogy/schemas/","title":"Schemas","text":""},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.ShortUvList","title":"<code>ShortUvList = TypeAdapter(list[UtbmShortUvSchema])</code>  <code>module-attribute</code>","text":""},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UV","title":"<code>UV</code>","text":"<p>               Bases: <code>Model</code></p> <p>Contains infos about an UV (course).</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UV.has_user_already_commented","title":"<code>has_user_already_commented(user)</code>","text":"<p>Help prevent multiples comments from the same user.</p> <p>This function checks that no other comment has been posted by a specified user.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user has already posted a comment on this UV, else False.</p> Source code in <code>pedagogy/models.py</code> <pre><code>def has_user_already_commented(self, user: User) -&gt; bool:\n    \"\"\"Help prevent multiples comments from the same user.\n\n    This function checks that no other comment has been posted by a specified user.\n\n    Returns:\n        True if the user has already posted a comment on this UV, else False.\n    \"\"\"\n    return self.comments.filter(author=user).exists()\n</code></pre>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UtbmShortUvSchema","title":"<code>UtbmShortUvSchema</code>","text":"<p>               Bases: <code>Schema</code></p> <p>Short representation of an UV in the UTBM API.</p> Notes <p>This schema holds only the fields we actually need. The UTBM API returns more data than that.</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.WorkloadSchema","title":"<code>WorkloadSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.SemesterUvState","title":"<code>SemesterUvState</code>","text":"<p>               Bases: <code>Schema</code></p> <p>The state of the UV during either autumn or spring semester</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UtbmFullUvSchema","title":"<code>UtbmFullUvSchema</code>","text":"<p>               Bases: <code>Schema</code></p> <p>Long representation of an UV in the UTBM API.</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.SimpleUvSchema","title":"<code>SimpleUvSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>Our minimal representation of an UV.</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UvSchema","title":"<code>UvSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>Our complete representation of an UV</p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UvFilterSchema","title":"<code>UvFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UvFilterSchema.filter_search","title":"<code>filter_search(value)</code>","text":"<p>Special filter for the search text.</p> <p>It does a full text search if available.</p> Source code in <code>pedagogy/schemas.py</code> <pre><code>def filter_search(self, value: str | None) -&gt; Q:\n    \"\"\"Special filter for the search text.\n\n    It does a full text search if available.\n    \"\"\"\n    if not value:\n        return Q()\n\n    if len(value) &lt; 3 or (len(value) &lt; 5 and any(c.isdigit() for c in value)):\n        # Likely to be an UV code\n        return Q(code__istartswith=value)\n\n    qs = list(\n        SearchQuerySet()\n        .models(UV)\n        .autocomplete(auto=html.escape(value))\n        .values_list(\"pk\", flat=True)\n    )\n\n    return Q(id__in=qs)\n</code></pre>"},{"location":"reference/pedagogy/schemas/#pedagogy.schemas.UvFilterSchema.filter_semester","title":"<code>filter_semester(value)</code>","text":"<p>Special filter for the semester.</p> <p>If either \"SPRING\" or \"AUTUMN\" is given, UV that are available during \"AUTUMN_AND_SPRING\" will be filtered.</p> Source code in <code>pedagogy/schemas.py</code> <pre><code>def filter_semester(self, value: set[str] | None) -&gt; Q:\n    \"\"\"Special filter for the semester.\n\n    If either \"SPRING\" or \"AUTUMN\" is given, UV that are available\n    during \"AUTUMN_AND_SPRING\" will be filtered.\n    \"\"\"\n    if not value:\n        return Q()\n    value.add(\"AUTUMN_AND_SPRING\")\n    return Q(semester__in=value)\n</code></pre>"},{"location":"reference/pedagogy/views/","title":"Views","text":""},{"location":"reference/pedagogy/views/#pedagogy.views.PermissionOrAuthorRequiredMixin","title":"<code>PermissionOrAuthorRequiredMixin</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code></p> <p>Require that the user has the required perm or is the object author.</p> <p>This mixin can be used in combination with <code>DetailView</code>, or another base class that implements the <code>get_object</code> method.</p> Example <p>In the following code, a user will be able to edit news if he has the <code>com.change_news</code> permission or if he tries to edit his own news :</p> <pre><code>class NewsEditView(PermissionOrAuthorRequiredMixin, DetailView):\n    model = News\n    author_field = \"author\"\n    permission_required = \"com.change_news\"\n</code></pre> <p>This is more or less equivalent to :</p> <pre><code>class NewsEditView(PermissionOrAuthorRequiredMixin, DetailView):\n    model = News\n\n    def dispatch(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        if not (\n            user.has_perm(\"com.change_news\")\n            or self.object.author == request.user\n        ):\n            raise PermissionDenied\n        return super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.Notification","title":"<code>Notification</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/pedagogy/views/#pedagogy.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.DetailFormView","title":"<code>DetailFormView</code>","text":"<p>               Bases: <code>FormView</code>, <code>BaseDetailView</code></p> <p>Class that allow both a detail view and a form view.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentForm","title":"<code>UVCommentForm(author_id, uv_id, is_creation, *args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form handeling creation and edit of an UVComment.</p> Source code in <code>pedagogy/forms.py</code> <pre><code>def __init__(self, author_id, uv_id, is_creation, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.fields[\"author\"].queryset = User.objects.filter(id=author_id).all()\n    self.fields[\"author\"].initial = author_id\n    self.fields[\"uv\"].queryset = UV.objects.filter(id=uv_id).all()\n    self.fields[\"uv\"].initial = uv_id\n    self.is_creation = is_creation\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentModerationForm","title":"<code>UVCommentModerationForm</code>","text":"<p>               Bases: <code>Form</code></p> <p>Form handeling bulk comment deletion.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentReportForm","title":"<code>UVCommentReportForm(reporter_id, comment_id, *args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form handeling creation and edit of an UVReport.</p> Source code in <code>pedagogy/forms.py</code> <pre><code>def __init__(self, reporter_id, comment_id, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.fields[\"reporter\"].queryset = User.objects.filter(id=reporter_id).all()\n    self.fields[\"reporter\"].initial = reporter_id\n    self.fields[\"comment\"].queryset = UVComment.objects.filter(id=comment_id).all()\n    self.fields[\"comment\"].initial = comment_id\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVForm","title":"<code>UVForm(author_id, *args, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form handeling creation and edit of an UV.</p> Source code in <code>pedagogy/forms.py</code> <pre><code>def __init__(self, author_id, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.fields[\"author\"].queryset = User.objects.filter(id=author_id).all()\n    self.fields[\"author\"].initial = author_id\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.UV","title":"<code>UV</code>","text":"<p>               Bases: <code>Model</code></p> <p>Contains infos about an UV (course).</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UV.has_user_already_commented","title":"<code>has_user_already_commented(user)</code>","text":"<p>Help prevent multiples comments from the same user.</p> <p>This function checks that no other comment has been posted by a specified user.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user has already posted a comment on this UV, else False.</p> Source code in <code>pedagogy/models.py</code> <pre><code>def has_user_already_commented(self, user: User) -&gt; bool:\n    \"\"\"Help prevent multiples comments from the same user.\n\n    This function checks that no other comment has been posted by a specified user.\n\n    Returns:\n        True if the user has already posted a comment on this UV, else False.\n    \"\"\"\n    return self.comments.filter(author=user).exists()\n</code></pre>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVComment","title":"<code>UVComment</code>","text":"<p>               Bases: <code>Model</code></p> <p>A comment about an UV.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentReport","title":"<code>UVCommentReport</code>","text":"<p>               Bases: <code>Model</code></p> <p>Report an inapropriate comment.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVDetailFormView","title":"<code>UVDetailFormView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DetailFormView</code></p> <p>Display every comment of an UV and detailed infos about it.</p> <p>Allow to comment the UV.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentUpdateView","title":"<code>UVCommentUpdateView</code>","text":"<p>               Bases: <code>PermissionOrAuthorRequiredMixin</code>, <code>UpdateView</code></p> <p>Allow edit of a given comment.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentDeleteView","title":"<code>UVCommentDeleteView</code>","text":"<p>               Bases: <code>PermissionOrAuthorRequiredMixin</code>, <code>DeleteView</code></p> <p>Allow delete of a given comment.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVGuideView","title":"<code>UVGuideView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>TemplateView</code></p> <p>UV guide main page.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCommentReportCreateView","title":"<code>UVCommentReportCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>Create a new report for an inapropriate comment.</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVModerationFormView","title":"<code>UVModerationFormView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>FormView</code></p> <p>Moderation interface (Privileged).</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVCreateView","title":"<code>UVCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>Add a new UV (Privileged).</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVDeleteView","title":"<code>UVDeleteView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>Allow to delete an UV (Privileged).</p>"},{"location":"reference/pedagogy/views/#pedagogy.views.UVUpdateView","title":"<code>UVUpdateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>UpdateView</code></p> <p>Allow to edit an UV (Privilegied).</p>"},{"location":"reference/rootplace/forms/","title":"Forms","text":""},{"location":"reference/rootplace/forms/#rootplace.forms.MergeForm","title":"<code>MergeForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/rootplace/forms/#rootplace.forms.SelectUserForm","title":"<code>SelectUserForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/rootplace/forms/#rootplace.forms.BanForm","title":"<code>BanForm</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form to ban a user.</p>"},{"location":"reference/rootplace/models/","title":"Models","text":""},{"location":"reference/rootplace/views/","title":"Views","text":""},{"location":"reference/rootplace/views/#rootplace.views.MergeUsersView","title":"<code>MergeUsersView</code>","text":"<p>               Bases: <code>FormView</code></p>"},{"location":"reference/rootplace/views/#rootplace.views.DeleteAllForumUserMessagesView","title":"<code>DeleteAllForumUserMessagesView</code>","text":"<p>               Bases: <code>FormView</code></p> <p>Delete all forum messages from an user.</p> <p>Messages are soft deleted and are still visible from admins GUI frontend to the dedicated command.</p>"},{"location":"reference/rootplace/views/#rootplace.views.OperationLogListView","title":"<code>OperationLogListView</code>","text":"<p>               Bases: <code>ListView</code>, <code>CanEditPropMixin</code></p> <p>List all logs.</p>"},{"location":"reference/rootplace/views/#rootplace.views.BanView","title":"<code>BanView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>ListView</code></p> <p>UserBan management view.</p> <p>Displays :</p> <ul> <li>the list of active bans with their main information,   with a link to BanDeleteView for each one</li> <li>a link which redirects to BanCreateView</li> </ul>"},{"location":"reference/rootplace/views/#rootplace.views.BanCreateView","title":"<code>BanCreateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p> <p>UserBan creation view.</p>"},{"location":"reference/rootplace/views/#rootplace.views.BanDeleteView","title":"<code>BanDeleteView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DeleteView</code></p> <p>UserBan deletion view.</p>"},{"location":"reference/rootplace/views/#rootplace.views.merge_users","title":"<code>merge_users(u1, u2)</code>","text":"<p>Merge u2 into u1.</p> <p>This means that u1 shall receive everything that belonged to u2 :</p> <pre><code>- pictures\n- refills of the sith account\n- purchases of any item bought on the eboutic or the counters\n- subscriptions\n- godfathers\n- godchildren\n</code></pre> <p>If u1 had no account id, he shall receive the one of u2. If u1 and u2 were both in the middle of a subscription, the remaining durations stack If u1 had no profile picture, he shall receive the one of u2</p> Source code in <code>rootplace/views.py</code> <pre><code>def merge_users(u1: User, u2: User) -&gt; User:\n    \"\"\"Merge u2 into u1.\n\n    This means that u1 shall receive everything that belonged to u2 :\n\n        - pictures\n        - refills of the sith account\n        - purchases of any item bought on the eboutic or the counters\n        - subscriptions\n        - godfathers\n        - godchildren\n\n    If u1 had no account id, he shall receive the one of u2.\n    If u1 and u2 were both in the middle of a subscription, the remaining\n    durations stack\n    If u1 had no profile picture, he shall receive the one of u2\n    \"\"\"\n    for field in u1._meta.fields:\n        if not field.is_relation and not u1.__dict__[field.name]:\n            u1.__dict__[field.name] = u2.__dict__[field.name]\n    for group in u2.groups.all():\n        u1.groups.add(group.id)\n    for godfather in u2.godfathers.exclude(id=u1.id):\n        u1.godfathers.add(godfather)\n    for godchild in u2.godchildren.exclude(id=u1.id):\n        u1.godchildren.add(godchild)\n    __merge_subscriptions(u1, u2)\n    __merge_pictures(u1, u2)\n    u2.invoices.all().update(user=u1)\n    c_src = Customer.objects.filter(user=u2).first()\n    if c_src is not None:\n        c_dest, created = Customer.get_or_create(u1)\n        c_src.refillings.update(customer=c_dest)\n        c_src.buyings.update(customer=c_dest)\n        Customer.objects.filter(pk=c_dest.pk).update_amount()\n        if created:\n            # swap the account numbers, so that the user keep\n            # the id he is accustomed to\n            tmp_id = c_src.account_id\n            # delete beforehand in order not to have a unique constraint violation\n            c_src.delete()\n            c_dest.account_id = tmp_id\n    u1.save()\n    u2.delete()  # everything remaining in u2 gets deleted thanks to on_delete=CASCADE\n    return u1\n</code></pre>"},{"location":"reference/rootplace/views/#rootplace.views.delete_all_forum_user_messages","title":"<code>delete_all_forum_user_messages(user, moderator, *, verbose=False)</code>","text":"<p>Soft delete all messages of a user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>core.models.User the user to delete messages from</p> required <code>moderator</code> <code>User</code> <p>core.models.User the one marked as the moderator.</p> required <code>verbose</code> <code>bool</code> <p>bool if True, print the deleted messages</p> <code>False</code> Source code in <code>rootplace/views.py</code> <pre><code>def delete_all_forum_user_messages(\n    user: User, moderator: User, *, verbose: bool = False\n):\n    \"\"\"Soft delete all messages of a user.\n\n    Args:\n        user: core.models.User the user to delete messages from\n        moderator: core.models.User the one marked as the moderator.\n        verbose: bool if True, print the deleted messages\n    \"\"\"\n    for message in user.forum_messages.all():\n        if message.is_deleted():\n            continue\n\n        if verbose:\n            logging.getLogger(\"django\").info(message)\n        ForumMessageMeta(message=message, user=moderator, action=\"DELETE\").save()\n</code></pre>"},{"location":"reference/sas/models/","title":"Models","text":""},{"location":"reference/sas/models/#sas.models.Notification","title":"<code>Notification</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/sas/models/#sas.models.SithFile","title":"<code>SithFile</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/sas/models/#sas.models.SithFile.clean","title":"<code>clean()</code>","text":"<p>Cleans up the file.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up the file.\"\"\"\n    super().clean()\n    if \"/\" in self.name:\n        raise ValidationError(_(\"Character '/' not authorized in name\"))\n    if self == self.parent:\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self == self.parent or (\n        self.parent is not None and self in self.get_parent_list()\n    ):\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self.parent and self.parent.is_file:\n        raise ValidationError(\n            _(\"You can not make a file be a children of a non folder file\")\n        )\n    if (\n        self.parent is None\n        and SithFile.objects.exclude(id=self.id)\n        .filter(parent=None, name=self.name)\n        .exists()\n    ) or (\n        self.parent\n        and self.parent.children.exclude(id=self.id).filter(name=self.name).exists()\n    ):\n        raise ValidationError(_(\"Duplicate file\"), code=\"duplicate\")\n    if self.is_folder:\n        if self.file:\n            try:\n                Image.open(BytesIO(self.file.read()))\n            except Image.UnidentifiedImageError as e:\n                raise ValidationError(\n                    _(\"This is not a valid folder thumbnail\")\n                ) from e\n        self.mime_type = \"inode/directory\"\n    if self.is_file and (self.file is None or self.file == \"\"):\n        raise ValidationError(_(\"You must provide a file\"))\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SithFile.apply_rights_recursively","title":"<code>apply_rights_recursively(*, only_folders=False)</code>","text":"<p>Apply the rights of this file to all children recursively.</p> <p>Parameters:</p> Name Type Description Default <code>only_folders</code> <code>bool</code> <p>If True, only apply the rights to SithFiles that are folders.</p> <code>False</code> Source code in <code>core/models.py</code> <pre><code>def apply_rights_recursively(self, *, only_folders: bool = False) -&gt; None:\n    \"\"\"Apply the rights of this file to all children recursively.\n\n    Args:\n        only_folders: If True, only apply the rights to SithFiles that are folders.\n    \"\"\"\n    file_ids = []\n    explored_ids = [self.id]\n    while len(explored_ids) &gt; 0:  # find all children recursively\n        file_ids.extend(explored_ids)\n        next_level = SithFile.objects.filter(parent_id__in=explored_ids)\n        if only_folders:\n            next_level = next_level.filter(is_folder=True)\n        explored_ids = list(next_level.values_list(\"id\", flat=True))\n    for through in (SithFile.view_groups.through, SithFile.edit_groups.through):\n        # force evaluation. Without this, the iterator yields nothing\n        groups = list(\n            through.objects.filter(sithfile_id=self.id).values_list(\n                \"group_id\", flat=True\n            )\n        )\n        # delete previous rights\n        through.objects.filter(sithfile_id__in=file_ids).delete()\n        through.objects.bulk_create(  # create new rights\n            [through(sithfile_id=f, group_id=g) for f in file_ids for g in groups]\n        )\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SithFile.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>core/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SithFile.move_to","title":"<code>move_to(parent)</code>","text":"<p>Move a file to a new parent. <code>parent</code> must be a SithFile with the <code>is_folder=True</code> property. Otherwise, this function doesn't change anything. This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify SithFiles recursively, so it stays efficient even with top-level folders.</p> Source code in <code>core/models.py</code> <pre><code>def move_to(self, parent):\n    \"\"\"Move a file to a new parent.\n    `parent` must be a SithFile with the `is_folder=True` property. Otherwise, this function doesn't change\n    anything.\n    This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify\n    SithFiles recursively, so it stays efficient even with top-level folders.\n    \"\"\"\n    if not parent.is_folder:\n        return\n    self.parent = parent\n    self.clean()\n    self.save()\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/sas/models/#sas.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SasFile","title":"<code>SasFile</code>","text":"<p>               Bases: <code>SithFile</code></p> <p>Proxy model for any file in the SAS.</p> <p>May be used to have logic that should be shared by both Picture and Album.</p>"},{"location":"reference/sas/models/#sas.models.PictureQuerySet","title":"<code>PictureQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/sas/models/#sas.models.PictureQuerySet.viewable_by","title":"<code>viewable_by(user)</code>","text":"<p>Filter the pictures that this user can view.</p> Warning <p>Calling this queryset method may add several additional requests.</p> Source code in <code>sas/models.py</code> <pre><code>def viewable_by(self, user: User) -&gt; Self:\n    \"\"\"Filter the pictures that this user can view.\n\n    Warning:\n        Calling this queryset method may add several additional requests.\n    \"\"\"\n    if user.has_perm(\"sas.moderate_sasfile\"):\n        return self.all()\n    if user.was_subscribed:\n        return self.filter(Q(is_moderated=True) | Q(owner=user))\n    return self.filter(people__user_id=user.id, is_moderated=True)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SASPictureManager","title":"<code>SASPictureManager</code>","text":"<p>               Bases: <code>Manager</code></p>"},{"location":"reference/sas/models/#sas.models.Picture","title":"<code>Picture</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/models/#sas.models.AlbumQuerySet","title":"<code>AlbumQuerySet</code>","text":"<p>               Bases: <code>QuerySet</code></p>"},{"location":"reference/sas/models/#sas.models.AlbumQuerySet.viewable_by","title":"<code>viewable_by(user)</code>","text":"<p>Filter the albums that this user can view.</p> Warning <p>Calling this queryset method may add several additional requests.</p> Source code in <code>sas/models.py</code> <pre><code>def viewable_by(self, user: User) -&gt; Self:\n    \"\"\"Filter the albums that this user can view.\n\n    Warning:\n        Calling this queryset method may add several additional requests.\n    \"\"\"\n    if user.has_perm(\"sas.moderate_sasfile\"):\n        return self.all()\n    if user.was_subscribed:\n        return self.filter(Q(is_moderated=True) | Q(owner=user))\n    # known bug : if all children of an album are also albums\n    # then this album is excluded, even if one of the sub-albums should be visible.\n    # The fs-like navigation is likely to be half-broken for non-subscribers,\n    # but that's ok, since non-subscribers are expected to see only the albums\n    # containing pictures on which they have been identified (hence, very few).\n    # Most, if not all, of their albums will be displayed on the\n    # `latest albums` section of the SAS.\n    # Moreover, they will still see all of their picture in their profile.\n    return self.filter(\n        Exists(Picture.objects.filter(parent_id=OuterRef(\"pk\")).viewable_by(user))\n    )\n</code></pre>"},{"location":"reference/sas/models/#sas.models.SASAlbumManager","title":"<code>SASAlbumManager</code>","text":"<p>               Bases: <code>Manager</code></p>"},{"location":"reference/sas/models/#sas.models.Album","title":"<code>Album</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/models/#sas.models.Album.NAME_MAX_LENGTH","title":"<code>NAME_MAX_LENGTH = 50</code>  <code>class-attribute</code>","text":"<p>Maximum length of an album's name.</p> <p>SithFile have a maximum length of 256 characters. However, this limit is too high for albums. Names longer than 50 characters are harder to read and harder to display on the SAS page.</p> <p>It is to be noted, though, that this does not add or modify any db behaviour. It's just a constant to be used in views and forms.</p>"},{"location":"reference/sas/models/#sas.models.PeoplePictureRelation","title":"<code>PeoplePictureRelation</code>","text":"<p>               Bases: <code>Model</code></p> <p>The PeoplePictureRelation class makes the connection between User and Picture.</p>"},{"location":"reference/sas/models/#sas.models.PictureModerationRequest","title":"<code>PictureModerationRequest</code>","text":"<p>               Bases: <code>Model</code></p> <p>A request to remove a Picture from the SAS.</p>"},{"location":"reference/sas/models/#sas.models.exif_auto_rotate","title":"<code>exif_auto_rotate(image)</code>","text":"Source code in <code>core/utils.py</code> <pre><code>def exif_auto_rotate(image):\n    for orientation in ExifTags.TAGS:\n        if ExifTags.TAGS[orientation] == \"Orientation\":\n            break\n    exif = dict(image._getexif().items())\n\n    if exif[orientation] == 3:\n        image = image.rotate(180, expand=True)\n    elif exif[orientation] == 6:\n        image = image.rotate(270, expand=True)\n    elif exif[orientation] == 8:\n        image = image.rotate(90, expand=True)\n\n    return image\n</code></pre>"},{"location":"reference/sas/models/#sas.models.resize_image","title":"<code>resize_image(im, edge, img_format, *, optimize=True)</code>","text":"<p>Resize an image to fit the given edge length and format.</p> <p>Parameters:</p> Name Type Description Default <code>im</code> <code>Image</code> <p>the image to resize</p> required <code>edge</code> <code>int</code> <p>the length that the greater side of the resized image should have</p> required <code>img_format</code> <code>str</code> <p>the target format of the image (\"JPEG\", \"PNG\", \"WEBP\"...)</p> required <code>optimize</code> <code>bool</code> <p>Should the resized image be optimized ?</p> <code>True</code> Source code in <code>core/utils.py</code> <pre><code>def resize_image(\n    im: Image, edge: int, img_format: str, *, optimize: bool = True\n) -&gt; ContentFile:\n    \"\"\"Resize an image to fit the given edge length and format.\n\n    Args:\n        im: the image to resize\n        edge: the length that the greater side of the resized image should have\n        img_format: the target format of the image (\"JPEG\", \"PNG\", \"WEBP\"...)\n        optimize: Should the resized image be optimized ?\n    \"\"\"\n    (w, h) = im.size\n    ratio = edge / max(w, h)\n    (width, height) = int(w * ratio), int(h * ratio)\n    return resize_image_explicit(im, (width, height), img_format, optimize=optimize)\n</code></pre>"},{"location":"reference/sas/models/#sas.models.sas_notification_callback","title":"<code>sas_notification_callback(notif)</code>","text":"Source code in <code>sas/models.py</code> <pre><code>def sas_notification_callback(notif: Notification):\n    count = Picture.objects.filter(is_moderated=False).count()\n    notif.viewed = not bool(count)\n    notif.param = str(count)\n</code></pre>"},{"location":"reference/sas/schemas/","title":"Schemas","text":""},{"location":"reference/sas/schemas/#sas.schemas.SimpleUserSchema","title":"<code>SimpleUserSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>A schema with the minimum amount of information to represent a user.</p>"},{"location":"reference/sas/schemas/#sas.schemas.UserProfileSchema","title":"<code>UserProfileSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>The necessary information to show a user profile</p>"},{"location":"reference/sas/schemas/#sas.schemas.Album","title":"<code>Album</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.Album.NAME_MAX_LENGTH","title":"<code>NAME_MAX_LENGTH = 50</code>  <code>class-attribute</code>","text":"<p>Maximum length of an album's name.</p> <p>SithFile have a maximum length of 256 characters. However, this limit is too high for albums. Names longer than 50 characters are harder to read and harder to display on the SAS page.</p> <p>It is to be noted, though, that this does not add or modify any db behaviour. It's just a constant to be used in views and forms.</p>"},{"location":"reference/sas/schemas/#sas.schemas.Picture","title":"<code>Picture</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.PictureModerationRequest","title":"<code>PictureModerationRequest</code>","text":"<p>               Bases: <code>Model</code></p> <p>A request to remove a Picture from the SAS.</p>"},{"location":"reference/sas/schemas/#sas.schemas.AlbumFilterSchema","title":"<code>AlbumFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.SimpleAlbumSchema","title":"<code>SimpleAlbumSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.AlbumSchema","title":"<code>AlbumSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.AlbumAutocompleteSchema","title":"<code>AlbumAutocompleteSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p> <p>Schema to use on album autocomplete input field.</p>"},{"location":"reference/sas/schemas/#sas.schemas.PictureFilterSchema","title":"<code>PictureFilterSchema</code>","text":"<p>               Bases: <code>FilterSchema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.PictureSchema","title":"<code>PictureSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.PictureRelationCreationSchema","title":"<code>PictureRelationCreationSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.IdentifiedUserSchema","title":"<code>IdentifiedUserSchema</code>","text":"<p>               Bases: <code>Schema</code></p>"},{"location":"reference/sas/schemas/#sas.schemas.ModerationRequestSchema","title":"<code>ModerationRequestSchema</code>","text":"<p>               Bases: <code>ModelSchema</code></p>"},{"location":"reference/sas/views/","title":"Views","text":""},{"location":"reference/sas/views/#sas.views.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/sas/views/#sas.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/sas/views/#sas.views.SithFile","title":"<code>SithFile</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/sas/views/#sas.views.SithFile.clean","title":"<code>clean()</code>","text":"<p>Cleans up the file.</p> Source code in <code>core/models.py</code> <pre><code>def clean(self):\n    \"\"\"Cleans up the file.\"\"\"\n    super().clean()\n    if \"/\" in self.name:\n        raise ValidationError(_(\"Character '/' not authorized in name\"))\n    if self == self.parent:\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self == self.parent or (\n        self.parent is not None and self in self.get_parent_list()\n    ):\n        raise ValidationError(_(\"Loop in folder tree\"), code=\"loop\")\n    if self.parent and self.parent.is_file:\n        raise ValidationError(\n            _(\"You can not make a file be a children of a non folder file\")\n        )\n    if (\n        self.parent is None\n        and SithFile.objects.exclude(id=self.id)\n        .filter(parent=None, name=self.name)\n        .exists()\n    ) or (\n        self.parent\n        and self.parent.children.exclude(id=self.id).filter(name=self.name).exists()\n    ):\n        raise ValidationError(_(\"Duplicate file\"), code=\"duplicate\")\n    if self.is_folder:\n        if self.file:\n            try:\n                Image.open(BytesIO(self.file.read()))\n            except Image.UnidentifiedImageError as e:\n                raise ValidationError(\n                    _(\"This is not a valid folder thumbnail\")\n                ) from e\n        self.mime_type = \"inode/directory\"\n    if self.is_file and (self.file is None or self.file == \"\"):\n        raise ValidationError(_(\"You must provide a file\"))\n</code></pre>"},{"location":"reference/sas/views/#sas.views.SithFile.apply_rights_recursively","title":"<code>apply_rights_recursively(*, only_folders=False)</code>","text":"<p>Apply the rights of this file to all children recursively.</p> <p>Parameters:</p> Name Type Description Default <code>only_folders</code> <code>bool</code> <p>If True, only apply the rights to SithFiles that are folders.</p> <code>False</code> Source code in <code>core/models.py</code> <pre><code>def apply_rights_recursively(self, *, only_folders: bool = False) -&gt; None:\n    \"\"\"Apply the rights of this file to all children recursively.\n\n    Args:\n        only_folders: If True, only apply the rights to SithFiles that are folders.\n    \"\"\"\n    file_ids = []\n    explored_ids = [self.id]\n    while len(explored_ids) &gt; 0:  # find all children recursively\n        file_ids.extend(explored_ids)\n        next_level = SithFile.objects.filter(parent_id__in=explored_ids)\n        if only_folders:\n            next_level = next_level.filter(is_folder=True)\n        explored_ids = list(next_level.values_list(\"id\", flat=True))\n    for through in (SithFile.view_groups.through, SithFile.edit_groups.through):\n        # force evaluation. Without this, the iterator yields nothing\n        groups = list(\n            through.objects.filter(sithfile_id=self.id).values_list(\n                \"group_id\", flat=True\n            )\n        )\n        # delete previous rights\n        through.objects.filter(sithfile_id__in=file_ids).delete()\n        through.objects.bulk_create(  # create new rights\n            [through(sithfile_id=f, group_id=g) for f in file_ids for g in groups]\n        )\n</code></pre>"},{"location":"reference/sas/views/#sas.views.SithFile.copy_rights","title":"<code>copy_rights()</code>","text":"<p>Copy, if possible, the rights of the parent folder.</p> Source code in <code>core/models.py</code> <pre><code>def copy_rights(self):\n    \"\"\"Copy, if possible, the rights of the parent folder.\"\"\"\n    if self.parent is not None:\n        self.edit_groups.set(self.parent.edit_groups.all())\n        self.view_groups.set(self.parent.view_groups.all())\n</code></pre>"},{"location":"reference/sas/views/#sas.views.SithFile.move_to","title":"<code>move_to(parent)</code>","text":"<p>Move a file to a new parent. <code>parent</code> must be a SithFile with the <code>is_folder=True</code> property. Otherwise, this function doesn't change anything. This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify SithFiles recursively, so it stays efficient even with top-level folders.</p> Source code in <code>core/models.py</code> <pre><code>def move_to(self, parent):\n    \"\"\"Move a file to a new parent.\n    `parent` must be a SithFile with the `is_folder=True` property. Otherwise, this function doesn't change\n    anything.\n    This is done only at the DB level, so that it's very fast for the user. Indeed, this function doesn't modify\n    SithFiles recursively, so it stays efficient even with top-level folders.\n    \"\"\"\n    if not parent.is_folder:\n        return\n    self.parent = parent\n    self.clean()\n    self.save()\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/sas/views/#sas.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/sas/views/#sas.views.UseFragmentsMixin","title":"<code>UseFragmentsMixin</code>","text":"<p>               Bases: <code>ContextMixin</code></p> <p>Mark a view as using fragments.</p> <p>This mixin is not mandatory (you may as well render manually your fragments in the <code>get_context_data</code> method). However, the interface of this class bring some distinction between fragments and other context data, which may reduce boilerplate.</p> <p>Example</p> <pre><code>class FooFragment(FragmentMixin, FormView): ...\n\nclass BarFragment(FragmentMixin, FormView): ...\n\nclass AdminFragment(FragmentMixin, FormView): ...\n\nclass MyView(UseFragmentsMixin, TemplateView)\n    template_name = \"app/view.jinja\"\n    fragments = {\n        \"foo\": FooFragment\n        \"bar\": BarFragment(template_name=\"some_template.jinja\")\n    }\n    fragments_data = {\n        \"foo\": {\"some\": \"data\"}  # this will be passed to the FooFragment renderer\n    }\n\n    def get_fragments(self):\n        res = super().get_fragments()\n        if self.request.user.is_superuser:\n            res[\"admin_fragment\"] = AdminFragment\n        return res\n</code></pre>"},{"location":"reference/sas/views/#sas.views.UseFragmentsMixin.get_fragment_data","title":"<code>get_fragment_data()</code>","text":"<p>Return eventual data used to initialize the fragments.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_data(self) -&gt; dict[str, dict[str, Any]]:\n    \"\"\"Return eventual data used to initialize the fragments.\"\"\"\n    return self.fragment_data if self.fragment_data is not None else {}\n</code></pre>"},{"location":"reference/sas/views/#sas.views.UseFragmentsMixin.get_fragment_context_data","title":"<code>get_fragment_context_data()</code>","text":"<p>Return the rendered fragments as context data.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_fragment_context_data(self) -&gt; dict[str, SafeString]:\n    \"\"\"Return the rendered fragments as context data.\"\"\"\n    res = {}\n    data = self.get_fragment_data()\n    for name, fragment in self.get_fragments().items():\n        is_cls = inspect.isclass(fragment) and issubclass(fragment, FragmentMixin)\n        _fragment = fragment.as_fragment() if is_cls else fragment\n        fragment_data = data.get(name, {})\n        res[name] = _fragment(self.request, **fragment_data)\n    return res\n</code></pre>"},{"location":"reference/sas/views/#sas.views.FileView","title":"<code>FileView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code>, <code>FormMixin</code></p> <p>Handle the upload of new files into a folder.</p>"},{"location":"reference/sas/views/#sas.views.FileView.handle_clipboard","title":"<code>handle_clipboard(request, obj)</code>  <code>staticmethod</code>","text":"<p>Handle the clipboard in the view.</p> <p>This method can fail, since it does not catch the exceptions coming from below, allowing proper handling in the calling view. Use this method like this:</p> <pre><code>FileView.handle_clipboard(request, self.object)\n</code></pre> <p><code>request</code> is usually the self.request obj in your view <code>obj</code> is the SithFile object you want to put in the clipboard, or          where you want to paste the clipboard</p> Source code in <code>core/views/files.py</code> <pre><code>@staticmethod\ndef handle_clipboard(request, obj):\n    \"\"\"Handle the clipboard in the view.\n\n    This method can fail, since it does not catch the exceptions coming from\n    below, allowing proper handling in the calling view.\n    Use this method like this:\n\n        FileView.handle_clipboard(request, self.object)\n\n    `request` is usually the self.request obj in your view\n    `obj` is the SithFile object you want to put in the clipboard, or\n             where you want to paste the clipboard\n    \"\"\"\n    if \"delete\" in request.POST:\n        for f_id in request.POST.getlist(\"file_list\"):\n            file = SithFile.objects.filter(id=f_id).first()\n            if file:\n                file.delete()\n    if \"clear\" in request.POST:\n        request.session[\"clipboard\"] = []\n    if \"cut\" in request.POST:\n        for f_id_str in request.POST.getlist(\"file_list\"):\n            f_id = int(f_id_str)\n            if (\n                f_id in [c.id for c in obj.children.all()]\n                and f_id not in request.session[\"clipboard\"]\n            ):\n                request.session[\"clipboard\"].append(f_id)\n    if \"paste\" in request.POST:\n        for f_id in request.session[\"clipboard\"]:\n            file = SithFile.objects.filter(id=f_id).first()\n            if file:\n                file.move_to(obj)\n        request.session[\"clipboard\"] = []\n    request.session.modified = True\n</code></pre>"},{"location":"reference/sas/views/#sas.views.FragmentMixin","title":"<code>FragmentMixin</code>","text":"<p>               Bases: <code>TemplateResponseMixin</code>, <code>ContextMixin</code></p> <p>Make a view buildable as a fragment that can be embedded in a template.</p> <p>Most fragments are used in two different ways : - in the request/response cycle, like any regular view - in templates, where the rendering is done in another view</p> <p>This mixin aims to simplify the initial fragment rendering. The rendered fragment will then be able to re-render itself through the request/response cycle if it uses HTMX.</p> <p>Example</p> <pre><code>class MyFragment(FragmentMixin, FormView):\n    template_name = \"app/fragment.jinja\"\n    form_class = MyForm\n    success_url = reverse_lazy(\"foo:bar\")\n\n# in another view :\ndef some_view(request):\n    fragment = MyFragment.as_fragment()\n    return render(\n        request,\n        \"app/template.jinja\",\n        context={\"fragment\": fragment(request)\n    }\n\n# in urls.py\nurlpatterns = [\n    path(\"foo/view\", some_view),\n    path(\"foo/fragment\", MyFragment.as_view()),\n]\n</code></pre>"},{"location":"reference/sas/views/#sas.views.FragmentMixin.reload_on_redirect","title":"<code>reload_on_redirect = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If True, this fragment will trigger a full page reload on redirect.</p>"},{"location":"reference/sas/views/#sas.views.FragmentRenderer","title":"<code>FragmentRenderer</code>","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"reference/sas/views/#sas.views.UserTabsMixin","title":"<code>UserTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/sas/views/#sas.views.AlbumCreateForm","title":"<code>AlbumCreateForm(*args, owner, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> Source code in <code>sas/forms.py</code> <pre><code>def __init__(self, *args, owner: User, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.instance.owner = owner\n    if owner.has_perm(\"sas.moderate_sasfile\"):\n        self.instance.is_moderated = True\n        self.instance.moderator = owner\n</code></pre>"},{"location":"reference/sas/views/#sas.views.AlbumEditForm","title":"<code>AlbumEditForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/sas/views/#sas.views.PictureEditForm","title":"<code>PictureEditForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/sas/views/#sas.views.PictureModerationRequestForm","title":"<code>PictureModerationRequestForm(*args, user, picture, **kwargs)</code>","text":"<p>               Bases: <code>ModelForm</code></p> <p>Form to create a PictureModerationRequest.</p> <p>The form only manages the reason field, because the author and the picture are set in the view.</p> Source code in <code>sas/forms.py</code> <pre><code>def __init__(self, *args, user: User, picture: Picture, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.user = user\n    self.picture = picture\n</code></pre>"},{"location":"reference/sas/views/#sas.views.PictureUploadForm","title":"<code>PictureUploadForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/sas/views/#sas.views.Album","title":"<code>Album</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/views/#sas.views.Album.NAME_MAX_LENGTH","title":"<code>NAME_MAX_LENGTH = 50</code>  <code>class-attribute</code>","text":"<p>Maximum length of an album's name.</p> <p>SithFile have a maximum length of 256 characters. However, this limit is too high for albums. Names longer than 50 characters are harder to read and harder to display on the SAS page.</p> <p>It is to be noted, though, that this does not add or modify any db behaviour. It's just a constant to be used in views and forms.</p>"},{"location":"reference/sas/views/#sas.views.Picture","title":"<code>Picture</code>","text":"<p>               Bases: <code>SasFile</code></p>"},{"location":"reference/sas/views/#sas.views.AlbumCreateFragment","title":"<code>AlbumCreateFragment</code>","text":"<p>               Bases: <code>FragmentMixin</code>, <code>CreateView</code></p>"},{"location":"reference/sas/views/#sas.views.SASMainView","title":"<code>SASMainView</code>","text":"<p>               Bases: <code>UseFragmentsMixin</code>, <code>TemplateView</code></p>"},{"location":"reference/sas/views/#sas.views.PictureView","title":"<code>PictureView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code></p>"},{"location":"reference/sas/views/#sas.views.AlbumView","title":"<code>AlbumView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>UseFragmentsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/sas/views/#sas.views.UserPicturesView","title":"<code>UserPicturesView</code>","text":"<p>               Bases: <code>UserTabsMixin</code>, <code>CanViewMixin</code>, <code>DetailView</code></p> <p>Display a user's pictures.</p>"},{"location":"reference/sas/views/#sas.views.ModerationView","title":"<code>ModerationView</code>","text":"<p>               Bases: <code>TemplateView</code></p>"},{"location":"reference/sas/views/#sas.views.PictureEditView","title":"<code>PictureEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/sas/views/#sas.views.PictureAskRemovalView","title":"<code>PictureAskRemovalView</code>","text":"<p>               Bases: <code>CanViewMixin</code>, <code>DetailView</code>, <code>FormView</code></p> <p>View to allow users to ask pictures to be removed.</p>"},{"location":"reference/sas/views/#sas.views.PictureAskRemovalView.get_form_kwargs","title":"<code>get_form_kwargs()</code>","text":"<p>Add the user and picture to the form kwargs.</p> <p>Those are required to create the PictureModerationRequest, and aren't part of the form itself (picture is a path parameter, and user is the request user).</p> Source code in <code>sas/views.py</code> <pre><code>def get_form_kwargs(self) -&gt; dict[str, Any]:\n    \"\"\"Add the user and picture to the form kwargs.\n\n    Those are required to create the PictureModerationRequest,\n    and aren't part of the form itself\n    (picture is a path parameter, and user is the request user).\n    \"\"\"\n    return super().get_form_kwargs() | {\n        \"user\": self.request.user,\n        \"picture\": self.object,\n    }\n</code></pre>"},{"location":"reference/sas/views/#sas.views.PictureAskRemovalView.get_success_url","title":"<code>get_success_url()</code>","text":"<p>Return the URL to the album containing the picture.</p> Source code in <code>sas/views.py</code> <pre><code>def get_success_url(self) -&gt; str:\n    \"\"\"Return the URL to the album containing the picture.\"\"\"\n    album = Album.objects.filter(pk=self.object.parent_id).first()\n    if not album:\n        return reverse(\"sas:main\")\n    return album.get_absolute_url()\n</code></pre>"},{"location":"reference/sas/views/#sas.views.AlbumEditView","title":"<code>AlbumEditView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/sas/views/#sas.views.send_file","title":"<code>send_file(request, file_id, file_class=SithFile, file_attr='file')</code>","text":"<p>Send a protected file, if the user can see it.</p> <p>In prod, the server won't handle the download itself, but set the appropriate headers in the response to make the reverse-proxy deal with it. In debug mode, the server will directly send the file.</p> Source code in <code>core/views/files.py</code> <pre><code>def send_file(\n    request: HttpRequest,\n    file_id: int | str,\n    file_class: type[SithFile] = SithFile,\n    file_attr: str = \"file\",\n) -&gt; HttpResponse:\n    \"\"\"Send a protected file, if the user can see it.\n\n    In prod, the server won't handle the download itself,\n    but set the appropriate headers in the response to make the reverse-proxy\n    deal with it.\n    In debug mode, the server will directly send the file.\n    \"\"\"\n    f = get_object_or_404(file_class, pk=file_id)\n    if not can_view(f, request.user) and not is_logged_in_counter(request):\n        raise PermissionDenied\n    name = getattr(f, file_attr).name\n\n    return send_raw_file(settings.MEDIA_ROOT / name)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.send_album","title":"<code>send_album(request, album_id)</code>","text":"Source code in <code>sas/views.py</code> <pre><code>def send_album(request, album_id):\n    return send_file(request, album_id, Album)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.send_pict","title":"<code>send_pict(request, picture_id)</code>","text":"Source code in <code>sas/views.py</code> <pre><code>def send_pict(request, picture_id):\n    return send_file(request, picture_id, Picture)\n</code></pre>"},{"location":"reference/sas/views/#sas.views.send_compressed","title":"<code>send_compressed(request, picture_id)</code>","text":"Source code in <code>sas/views.py</code> <pre><code>def send_compressed(request, picture_id):\n    return send_file(request, picture_id, Picture, \"compressed\")\n</code></pre>"},{"location":"reference/sas/views/#sas.views.send_thumb","title":"<code>send_thumb(request, picture_id)</code>","text":"Source code in <code>sas/views.py</code> <pre><code>def send_thumb(request, picture_id):\n    return send_file(request, picture_id, Picture, \"thumbnail\")\n</code></pre>"},{"location":"reference/staticfiles/apps/","title":"Apps","text":"<p>               Bases: <code>StaticFilesConfig</code></p> <p>Application in charge of processing statics files. It replaces the original django staticfiles It integrates scss files and javascript bundling. It makes sure that statics are properly collected and that they are automatically     when using the development server.</p>"},{"location":"reference/staticfiles/apps/#staticfiles.apps.StaticFilesConfig.ignore_patterns","title":"<code>ignore_patterns = IGNORE_PATTERNS</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/staticfiles/apps/#staticfiles.apps.StaticFilesConfig.name","title":"<code>name = 'staticfiles'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/staticfiles/finders/","title":"Finders","text":""},{"location":"reference/staticfiles/finders/#staticfiles.finders.GENERATED_ROOT","title":"<code>GENERATED_ROOT = Path(__file__).parent.resolve() / 'generated'</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/finders/#staticfiles.finders.IGNORE_PATTERNS_BUNDLED","title":"<code>IGNORE_PATTERNS_BUNDLED = [f'{BUNDLED_FOLDER_NAME}/*']</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/finders/#staticfiles.finders.GeneratedFilesFinder","title":"<code>GeneratedFilesFinder(app_names=None, *args, **kwargs)</code>","text":"<p>               Bases: <code>FileSystemFinder</code></p> <p>Find generated and regular static files</p> Source code in <code>staticfiles/finders.py</code> <pre><code>def __init__(self, app_names=None, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n\n    # Add GENERATED_ROOT after adding everything in settings.STATICFILES_DIRS\n    self.locations.append((\"\", GENERATED_ROOT))\n    generated_storage = FileSystemStorage(location=GENERATED_ROOT)\n    generated_storage.prefix = \"\"\n    self.storages[GENERATED_ROOT] = generated_storage\n</code></pre>"},{"location":"reference/staticfiles/processors/","title":"Processors","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.api","title":"<code>api = NinjaExtraAPI(title='PICON', description='Portail Interactif de Communication avec les Outils Num\u00e9riques', version='0.2.0', urls_namespace='api', csrf=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.BUNDLED_FOLDER_NAME","title":"<code>BUNDLED_FOLDER_NAME = 'bundled'</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.BUNDLED_ROOT","title":"<code>BUNDLED_ROOT = GENERATED_ROOT / BUNDLED_FOLDER_NAME</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.GENERATED_ROOT","title":"<code>GENERATED_ROOT = Path(__file__).parent.resolve() / 'generated'</code>  <code>module-attribute</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.JsBundlerManifestEntry","title":"<code>JsBundlerManifestEntry(src, out)</code>  <code>dataclass</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.JSBundlerManifest","title":"<code>JSBundlerManifest(manifest)</code>","text":"Source code in <code>staticfiles/processors.py</code> <pre><code>def __init__(self, manifest: Path):\n    with open(manifest, \"r\") as f:\n        self._manifest = json.load(f)\n\n    self._files = chain(\n        *[\n            JsBundlerManifestEntry.from_json_entry(value)\n            for value in self._manifest.values()\n            if value.get(\"isEntry\", False)\n        ]\n    )\n    self.mapping = {file.src: file.out for file in self._files}\n</code></pre>"},{"location":"reference/staticfiles/processors/#staticfiles.processors.JSBundler","title":"<code>JSBundler</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.JSBundler.compile","title":"<code>compile()</code>  <code>staticmethod</code>","text":"<p>Bundle js files with the javascript bundler for production.</p> Source code in <code>staticfiles/processors.py</code> <pre><code>@staticmethod\ndef compile():\n    \"\"\"Bundle js files with the javascript bundler for production.\"\"\"\n    process = subprocess.Popen([\"npm\", \"run\", \"compile\"])\n    _ = process.wait()\n    if process.returncode:\n        raise RuntimeError(f\"Bundler failed with returncode {process.returncode}\")\n</code></pre>"},{"location":"reference/staticfiles/processors/#staticfiles.processors.Scss","title":"<code>Scss</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.Scss.compile","title":"<code>compile(files)</code>  <code>staticmethod</code>","text":"<p>Compile scss files to css files.</p> Source code in <code>staticfiles/processors.py</code> <pre><code>@staticmethod\ndef compile(files: CompileArg | Iterable[CompileArg]):\n    \"\"\"Compile scss files to css files.\"\"\"\n    # Generate files inside the generated folder\n    # .css files respects the hierarchy in the static folder it was found\n    # This converts arg.absolute -&gt; generated/{arg.relative}.scss\n    # Example:\n    #   app/static/foo.scss          -&gt; generated/foo.css\n    #   app/static/bar/foo.scss      -&gt; generated/bar/foo.css\n    #   custom/location/bar/foo.scss -&gt; generated/bar/foo.css\n    if isinstance(files, Scss.CompileArg):\n        files = [files]\n\n    base_args = {\"output_style\": \"compressed\", \"precision\": settings.SASS_PRECISION}\n\n    compiled_files = {\n        file.relative.with_suffix(\".css\"): sass.compile(\n            filename=str(file.absolute), **base_args\n        )\n        for file in files\n    }\n    for file, content in compiled_files.items():\n        dest = GENERATED_ROOT / file\n        dest.parent.mkdir(exist_ok=True, parents=True)\n        dest.write_text(content)\n</code></pre>"},{"location":"reference/staticfiles/processors/#staticfiles.processors.JS","title":"<code>JS</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.OpenApi","title":"<code>OpenApi</code>","text":""},{"location":"reference/staticfiles/processors/#staticfiles.processors.OpenApi.compile","title":"<code>compile()</code>  <code>classmethod</code>","text":"<p>Compile a TS client for the sith API. Only generates it if it changed.</p> Source code in <code>staticfiles/processors.py</code> <pre><code>@classmethod\ndef compile(cls) -&gt; subprocess.Popen[bytes] | None:\n    \"\"\"Compile a TS client for the sith API. Only generates it if it changed.\"\"\"\n    logging.getLogger(\"django\").info(\"Compiling open api typescript client\")\n    out = cls.OPENAPI_DIR / \"schema.json\"\n    cls.OPENAPI_DIR.mkdir(parents=True, exist_ok=True)\n\n    old_hash = \"\"\n    if out.exists():\n        with open(out, \"rb\") as f:\n            old_hash = sha1(f.read()).hexdigest()\n\n    schema = api.get_openapi_schema()\n    # Remove hash from operationIds\n    # This is done for cache invalidation but this is too aggressive\n    for path in schema[\"paths\"].values():\n        for action, desc in path.items():\n            path[action][\"operationId\"] = \"_\".join(\n                desc[\"operationId\"].split(\"_\")[:-1]\n            )\n    schema = str(schema)\n\n    if old_hash == sha1(schema.encode(\"utf-8\")).hexdigest():\n        logging.getLogger(\"django\").info(\"\u2728 Api did not change, nothing to do \u2728\")\n        return\n\n    with open(out, \"w\") as f:\n        _ = f.write(schema)\n\n    return subprocess.Popen([\"npm\", \"run\", \"openapi\"])\n</code></pre>"},{"location":"reference/staticfiles/storage/","title":"Storage","text":""},{"location":"reference/staticfiles/storage/#staticfiles.storage.JS","title":"<code>JS</code>","text":""},{"location":"reference/staticfiles/storage/#staticfiles.storage.JSBundler","title":"<code>JSBundler</code>","text":""},{"location":"reference/staticfiles/storage/#staticfiles.storage.JSBundler.compile","title":"<code>compile()</code>  <code>staticmethod</code>","text":"<p>Bundle js files with the javascript bundler for production.</p> Source code in <code>staticfiles/processors.py</code> <pre><code>@staticmethod\ndef compile():\n    \"\"\"Bundle js files with the javascript bundler for production.\"\"\"\n    process = subprocess.Popen([\"npm\", \"run\", \"compile\"])\n    _ = process.wait()\n    if process.returncode:\n        raise RuntimeError(f\"Bundler failed with returncode {process.returncode}\")\n</code></pre>"},{"location":"reference/staticfiles/storage/#staticfiles.storage.Scss","title":"<code>Scss</code>","text":""},{"location":"reference/staticfiles/storage/#staticfiles.storage.Scss.compile","title":"<code>compile(files)</code>  <code>staticmethod</code>","text":"<p>Compile scss files to css files.</p> Source code in <code>staticfiles/processors.py</code> <pre><code>@staticmethod\ndef compile(files: CompileArg | Iterable[CompileArg]):\n    \"\"\"Compile scss files to css files.\"\"\"\n    # Generate files inside the generated folder\n    # .css files respects the hierarchy in the static folder it was found\n    # This converts arg.absolute -&gt; generated/{arg.relative}.scss\n    # Example:\n    #   app/static/foo.scss          -&gt; generated/foo.css\n    #   app/static/bar/foo.scss      -&gt; generated/bar/foo.css\n    #   custom/location/bar/foo.scss -&gt; generated/bar/foo.css\n    if isinstance(files, Scss.CompileArg):\n        files = [files]\n\n    base_args = {\"output_style\": \"compressed\", \"precision\": settings.SASS_PRECISION}\n\n    compiled_files = {\n        file.relative.with_suffix(\".css\"): sass.compile(\n            filename=str(file.absolute), **base_args\n        )\n        for file in files\n    }\n    for file, content in compiled_files.items():\n        dest = GENERATED_ROOT / file\n        dest.parent.mkdir(exist_ok=True, parents=True)\n        dest.write_text(content)\n</code></pre>"},{"location":"reference/staticfiles/storage/#staticfiles.storage.ManifestPostProcessingStorage","title":"<code>ManifestPostProcessingStorage</code>","text":"<p>               Bases: <code>ManifestStaticFilesStorage</code></p>"},{"location":"reference/staticfiles/storage/#staticfiles.storage.ManifestPostProcessingStorage.url","title":"<code>url(name, *, force=False)</code>","text":"<p>Get the URL for a file, convert .scss calls to .css calls to bundled files to their output ones</p> Source code in <code>staticfiles/storage.py</code> <pre><code>def url(self, name: str, *, force: bool = False) -&gt; str:\n    \"\"\"Get the URL for a file, convert .scss calls to .css calls to bundled files to their output ones\"\"\"\n    # This name swap has to be done here\n    # Otherwise, the manifest isn't aware of the file and can't work properly\n    if settings.DEBUG:\n        # In production, the bundler manifest is used at compile time, we don't need to convert anything\n        try:\n            manifest = JSBundler.get_manifest()\n        except FileNotFoundError as e:\n            raise Exception(\n                \"Error loading manifest file, the bundler seems to be busy\"\n            ) from e\n        converted = manifest.mapping.get(name, None)\n        if converted:\n            name = converted\n\n    path = Path(name)\n    if path.suffix == \".scss\":\n        # Compile scss files automatically in debug mode\n        if settings.DEBUG:\n            Scss.compile(\n                [\n                    Scss.CompileArg(absolute=Path(p), relative=Path(name))\n                    for p in find(name, all=True)\n                ]\n            )\n        name = str(path.with_suffix(\".css\"))\n\n    return super().url(name, force=force)\n</code></pre>"},{"location":"reference/subscription/models/","title":"Models","text":""},{"location":"reference/subscription/models/#subscription.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/subscription/models/#subscription.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.Subscription","title":"<code>Subscription</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/subscription/models/#subscription.models.Subscription.semester_duration","title":"<code>semester_duration</code>  <code>property</code>","text":"<p>Duration of this subscription, in number of semester.</p> Notes <p>The <code>Subscription</code> object doesn't have to actually exist in the database to access this property</p> <p>Examples:</p> <pre><code>subscription = Subscription(subscription_type=\"deux-semestres\")\nassert subscription.semester_duration == 2.0\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.Subscription.compute_start","title":"<code>compute_start(d=None, duration=1, user=None)</code>  <code>staticmethod</code>","text":"<p>Computes the start date of the subscription.</p> <p>The computation is done with respect to the given date (default is today) and the start date given in settings.SITH_SEMESTER_START_AUTUMN. It takes the nearest past start date. Exemples: with SITH_SEMESTER_START_AUTUMN = (8, 15)     Today      -&gt; Start date     2015-03-17 -&gt; 2015-02-15     2015-01-11 -&gt; 2014-08-15.</p> Source code in <code>subscription/models.py</code> <pre><code>@staticmethod\ndef compute_start(\n    d: date | None = None, duration: int | float = 1, user: User | None = None\n) -&gt; date:\n    \"\"\"Computes the start date of the subscription.\n\n    The computation is done with respect to the given date (default is today)\n    and the start date given in settings.SITH_SEMESTER_START_AUTUMN.\n    It takes the nearest past start date.\n    Exemples: with SITH_SEMESTER_START_AUTUMN = (8, 15)\n        Today      -&gt; Start date\n        2015-03-17 -&gt; 2015-02-15\n        2015-01-11 -&gt; 2014-08-15.\n    \"\"\"\n    if not d:\n        d = date.today()\n    if user is not None and user.subscriptions.exists():\n        last = user.subscriptions.last()\n        if last.is_valid_now():\n            d = last.subscription_end\n    if duration &lt;= 2:  # Sliding subscriptions for 1 or 2 semesters\n        return d\n    return get_start_of_semester(d)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.Subscription.compute_end","title":"<code>compute_end(duration, start=None, user=None)</code>  <code>staticmethod</code>","text":"<p>Compute the end date of the subscription.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int | float</code> <p>the duration of the subscription, in semester (for example, 2 =&gt; 2 semesters =&gt; 1 year)</p> required <code>start</code> <code>date | None</code> <p>The start date of the subscription</p> <code>None</code> <code>user</code> <code>User | None</code> <p>the user which is (or will be) subscribed</p> <code>None</code> Exemples <p>Start - Duration -&gt; End date 2015-09-18 - 1 -&gt; 2016-03-18 2015-09-18 - 2 -&gt; 2016-09-18 2015-09-18 - 3 -&gt; 2017-03-18 2015-09-18 - 4 -&gt; 2017-09-18.</p> Source code in <code>subscription/models.py</code> <pre><code>@staticmethod\ndef compute_end(\n    duration: int | float, start: date | None = None, user: User | None = None\n) -&gt; date:\n    \"\"\"Compute the end date of the subscription.\n\n    Args:\n        duration:\n            the duration of the subscription, in semester\n            (for example, 2 =&gt; 2 semesters =&gt; 1 year)\n        start: The start date of the subscription\n        user: the user which is (or will be) subscribed\n\n    Exemples:\n        Start - Duration -&gt; End date\n        2015-09-18 - 1 -&gt; 2016-03-18\n        2015-09-18 - 2 -&gt; 2016-09-18\n        2015-09-18 - 3 -&gt; 2017-03-18\n        2015-09-18 - 4 -&gt; 2017-09-18.\n    \"\"\"\n    if start is None:\n        start = Subscription.compute_start(duration=duration, user=user)\n\n    return start + relativedelta(\n        months=round(6 * duration),\n        days=math.ceil((6 * duration - round(6 * duration)) * 30),\n    )\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.get_start_of_semester","title":"<code>get_start_of_semester(today=None)</code>","text":"<p>Return the date of the start of the semester of the given date. If no date is given, return the start date of the current semester.</p> <p>The current semester is computed as follows:</p> <ul> <li>If the date is between 15/08 and 31/12  =&gt; Autumn semester.</li> <li>If the date is between 01/01 and 15/02  =&gt; Autumn semester of the previous year.</li> <li>If the date is between 15/02 and 15/08  =&gt; Spring semester</li> </ul> <p>Parameters:</p> Name Type Description Default <code>today</code> <code>date | None</code> <p>the date to use to compute the semester. If None, use today's date.</p> <code>None</code> <p>Returns:</p> Type Description <code>date</code> <p>the date of the start of the semester</p> Source code in <code>core/utils.py</code> <pre><code>def get_start_of_semester(today: date | None = None) -&gt; date:\n    \"\"\"Return the date of the start of the semester of the given date.\n    If no date is given, return the start date of the current semester.\n\n    The current semester is computed as follows:\n\n    - If the date is between 15/08 and 31/12  =&gt; Autumn semester.\n    - If the date is between 01/01 and 15/02  =&gt; Autumn semester of the previous year.\n    - If the date is between 15/02 and 15/08  =&gt; Spring semester\n\n    Args:\n        today: the date to use to compute the semester. If None, use today's date.\n\n    Returns:\n        the date of the start of the semester\n    \"\"\"\n    if today is None:\n        today = localdate()\n\n    autumn = date(today.year, *settings.SITH_SEMESTER_START_AUTUMN)\n    spring = date(today.year, *settings.SITH_SEMESTER_START_SPRING)\n\n    if today &gt;= autumn:  # between 15/08 (included) and 31/12 -&gt; autumn semester\n        return autumn\n    if today &gt;= spring:  # between 15/02 (included) and 15/08 -&gt; spring semester\n        return spring\n    # between 01/01 and 15/02 -&gt; autumn semester of the previous year\n    return autumn.replace(year=autumn.year - 1)\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.validate_type","title":"<code>validate_type(value)</code>","text":"Source code in <code>subscription/models.py</code> <pre><code>def validate_type(value):\n    if value not in settings.SITH_SUBSCRIPTIONS:\n        raise ValidationError(_(\"Bad subscription type\"))\n</code></pre>"},{"location":"reference/subscription/models/#subscription.models.validate_payment","title":"<code>validate_payment(value)</code>","text":"Source code in <code>subscription/models.py</code> <pre><code>def validate_payment(value):\n    if value not in settings.SITH_SUBSCRIPTION_PAYMENT_METHOD:\n        raise ValidationError(_(\"Bad payment method\"))\n</code></pre>"},{"location":"reference/subscription/views/","title":"Views","text":""},{"location":"reference/subscription/views/#subscription.views.PAYMENT_METHOD","title":"<code>PAYMENT_METHOD = [('CHECK', _('Check')), ('CASH', _('Cash')), ('CARD', _('Credit card'))]</code>  <code>module-attribute</code>","text":""},{"location":"reference/subscription/views/#subscription.views.PermissionGroupsUpdateView","title":"<code>PermissionGroupsUpdateView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>SuccessMessageMixin</code>, <code>UpdateView</code></p> <p>Manage the groups that have a specific permission.</p> Notes <p>This is an <code>UpdateView</code>, but unlike typical <code>UpdateView</code>, it doesn't accept url arguments to retrieve the object to update. As such, a <code>PermissionGroupsUpdateView</code> can only deal with a single hardcoded permission.</p> <p>This is not a limitation, but an on-purpose design, mainly for security matters.</p> Example <pre><code>class SubscriptionPermissionView(PermissionGroupsUpdateView):\n    permission = \"subscription.add_subscription\"\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.SelectionDateForm","title":"<code>SelectionDateForm(*args, **kwargs)</code>","text":"<p>               Bases: <code>Form</code></p> Source code in <code>subscription/forms.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.fields[\"start_date\"] = forms.DateTimeField(\n        label=_(\"Start date\"), widget=SelectDateTime, required=True\n    )\n    self.fields[\"end_date\"] = forms.DateTimeField(\n        label=_(\"End date\"), widget=SelectDateTime, required=True\n    )\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionExistingUserForm","title":"<code>SubscriptionExistingUserForm(*args, initial=None, **kwargs)</code>","text":"<p>               Bases: <code>SubscriptionForm</code></p> <p>Form to add a subscription to an existing user.</p> Source code in <code>subscription/forms.py</code> <pre><code>def __init__(self, *args, initial=None, **kwargs):\n    super().__init__(*args, initial=initial, **kwargs)\n    self.fields[\"birthdate\"].required = True\n    if not initial:\n        return\n    member: str | None = initial.get(\"member\")\n    if member and member.isdigit():\n        member: User | None = User.objects.filter(id=int(member)).first()\n    else:\n        member = None\n    if member and member.date_of_birth:\n        # if there is an initial member with a birthdate,\n        # there is no need to ask this to the user\n        self.fields[\"birthdate\"].initial = member.date_of_birth\n    elif member:\n        # if there is an initial member without a birthdate,\n        # then the field must be displayed\n        self.fields[\"birthdate\"].widget.attrs.update({\"hidden\": False})\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionNewUserForm","title":"<code>SubscriptionNewUserForm(*args, initial=None, **kwargs)</code>","text":"<p>               Bases: <code>SubscriptionForm</code></p> <p>Form to create subscriptions with the user they belong to.</p> <p>Examples:</p> <p>```py assert not User.objects.filter(email=request.POST.get(\"email\")).exists() form = SubscriptionNewUserForm(request.POST) if form.is_valid():     form.save()</p>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionNewUserForm--now-the-user-exists-and-is-subscribed","title":"now the user exists and is subscribed","text":"<p>user = User.objects.get(email=request.POST.get(\"email\")) assert user.is_subscribed</p> Source code in <code>subscription/forms.py</code> <pre><code>def __init__(self, *args, initial=None, **kwargs):\n    initial = initial or {}\n    if \"subscription_type\" not in initial:\n        initial[\"subscription_type\"] = \"deux-semestres\"\n    if \"payment_method\" not in initial:\n        initial[\"payment_method\"] = \"CARD\"\n    super().__init__(*args, initial=initial, **kwargs)\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionNewUserForm.clean","title":"<code>clean()</code>","text":"<p>Initialize the User linked to this subscription.</p> Warning <p>The <code>User</code> is initialized, but not saved. Don't use it for operations that expect a persisted object.</p> Source code in <code>subscription/forms.py</code> <pre><code>def clean(self) -&gt; dict[str, Any]:\n    \"\"\"Initialize the [User][core.models.User] linked to this subscription.\n\n    Warning:\n        The `User` is initialized, but not saved.\n        Don't use it for operations that expect\n        a persisted object.\n    \"\"\"\n    member = User(\n        first_name=self.cleaned_data.get(\"first_name\"),\n        last_name=self.cleaned_data.get(\"last_name\"),\n        email=self.cleaned_data.get(\"email\"),\n        date_of_birth=self.cleaned_data.get(\"date_of_birth\"),\n    )\n    if self.cleaned_data.get(\"subscription_type\") in [\n        \"un-semestre\",\n        \"deux-semestres\",\n        \"cursus-tronc-commun\",\n        \"cursus-branche\",\n    ]:\n        member.role = \"STUDENT\"\n    member.generate_username()\n    member.set_password(secrets.token_urlsafe(nbytes=10))\n    self.instance.member = member\n    return super().clean()\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.Subscription","title":"<code>Subscription</code>","text":"<p>               Bases: <code>Model</code></p>"},{"location":"reference/subscription/views/#subscription.views.Subscription.semester_duration","title":"<code>semester_duration</code>  <code>property</code>","text":"<p>Duration of this subscription, in number of semester.</p> Notes <p>The <code>Subscription</code> object doesn't have to actually exist in the database to access this property</p> <p>Examples:</p> <pre><code>subscription = Subscription(subscription_type=\"deux-semestres\")\nassert subscription.semester_duration == 2.0\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.Subscription.compute_start","title":"<code>compute_start(d=None, duration=1, user=None)</code>  <code>staticmethod</code>","text":"<p>Computes the start date of the subscription.</p> <p>The computation is done with respect to the given date (default is today) and the start date given in settings.SITH_SEMESTER_START_AUTUMN. It takes the nearest past start date. Exemples: with SITH_SEMESTER_START_AUTUMN = (8, 15)     Today      -&gt; Start date     2015-03-17 -&gt; 2015-02-15     2015-01-11 -&gt; 2014-08-15.</p> Source code in <code>subscription/models.py</code> <pre><code>@staticmethod\ndef compute_start(\n    d: date | None = None, duration: int | float = 1, user: User | None = None\n) -&gt; date:\n    \"\"\"Computes the start date of the subscription.\n\n    The computation is done with respect to the given date (default is today)\n    and the start date given in settings.SITH_SEMESTER_START_AUTUMN.\n    It takes the nearest past start date.\n    Exemples: with SITH_SEMESTER_START_AUTUMN = (8, 15)\n        Today      -&gt; Start date\n        2015-03-17 -&gt; 2015-02-15\n        2015-01-11 -&gt; 2014-08-15.\n    \"\"\"\n    if not d:\n        d = date.today()\n    if user is not None and user.subscriptions.exists():\n        last = user.subscriptions.last()\n        if last.is_valid_now():\n            d = last.subscription_end\n    if duration &lt;= 2:  # Sliding subscriptions for 1 or 2 semesters\n        return d\n    return get_start_of_semester(d)\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.Subscription.compute_end","title":"<code>compute_end(duration, start=None, user=None)</code>  <code>staticmethod</code>","text":"<p>Compute the end date of the subscription.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>int | float</code> <p>the duration of the subscription, in semester (for example, 2 =&gt; 2 semesters =&gt; 1 year)</p> required <code>start</code> <code>date | None</code> <p>The start date of the subscription</p> <code>None</code> <code>user</code> <code>User | None</code> <p>the user which is (or will be) subscribed</p> <code>None</code> Exemples <p>Start - Duration -&gt; End date 2015-09-18 - 1 -&gt; 2016-03-18 2015-09-18 - 2 -&gt; 2016-09-18 2015-09-18 - 3 -&gt; 2017-03-18 2015-09-18 - 4 -&gt; 2017-09-18.</p> Source code in <code>subscription/models.py</code> <pre><code>@staticmethod\ndef compute_end(\n    duration: int | float, start: date | None = None, user: User | None = None\n) -&gt; date:\n    \"\"\"Compute the end date of the subscription.\n\n    Args:\n        duration:\n            the duration of the subscription, in semester\n            (for example, 2 =&gt; 2 semesters =&gt; 1 year)\n        start: The start date of the subscription\n        user: the user which is (or will be) subscribed\n\n    Exemples:\n        Start - Duration -&gt; End date\n        2015-09-18 - 1 -&gt; 2016-03-18\n        2015-09-18 - 2 -&gt; 2016-09-18\n        2015-09-18 - 3 -&gt; 2017-03-18\n        2015-09-18 - 4 -&gt; 2017-09-18.\n    \"\"\"\n    if start is None:\n        start = Subscription.compute_start(duration=duration, user=user)\n\n    return start + relativedelta(\n        months=round(6 * duration),\n        days=math.ceil((6 * duration - round(6 * duration)) * 30),\n    )\n</code></pre>"},{"location":"reference/subscription/views/#subscription.views.NewSubscription","title":"<code>NewSubscription</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>TemplateView</code></p>"},{"location":"reference/subscription/views/#subscription.views.CreateSubscriptionFragment","title":"<code>CreateSubscriptionFragment</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>CreateView</code></p>"},{"location":"reference/subscription/views/#subscription.views.CreateSubscriptionExistingUserFragment","title":"<code>CreateSubscriptionExistingUserFragment</code>","text":"<p>               Bases: <code>CreateSubscriptionFragment</code></p> <p>Create a subscription for a user who already exists.</p>"},{"location":"reference/subscription/views/#subscription.views.CreateSubscriptionNewUserFragment","title":"<code>CreateSubscriptionNewUserFragment</code>","text":"<p>               Bases: <code>CreateSubscriptionFragment</code></p> <p>Create a subscription for a user who doesn't exist yet.</p>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionCreatedFragment","title":"<code>SubscriptionCreatedFragment</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>DetailView</code></p>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionPermissionView","title":"<code>SubscriptionPermissionView</code>","text":"<p>               Bases: <code>PermissionGroupsUpdateView</code></p> <p>Manage the groups that have access to the subscription creation page.</p>"},{"location":"reference/subscription/views/#subscription.views.SubscriptionsStatsView","title":"<code>SubscriptionsStatsView</code>","text":"<p>               Bases: <code>FormView</code></p>"},{"location":"reference/trombi/models/","title":"Models","text":""},{"location":"reference/trombi/models/#trombi.models.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/trombi/models/#trombi.models.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/trombi/models/#trombi.models.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/trombi/models/#trombi.models.TrombiManager","title":"<code>TrombiManager</code>","text":"<p>               Bases: <code>Manager</code></p>"},{"location":"reference/trombi/models/#trombi.models.AvailableTrombiManager","title":"<code>AvailableTrombiManager</code>","text":"<p>               Bases: <code>Manager</code></p>"},{"location":"reference/trombi/models/#trombi.models.Trombi","title":"<code>Trombi</code>","text":"<p>               Bases: <code>Model</code></p> <p>Main class of the trombi, the Trombi itself.</p> <p>It contains the deadlines for the users, and the link to the club that makes its Trombi.</p>"},{"location":"reference/trombi/models/#trombi.models.TrombiUser","title":"<code>TrombiUser</code>","text":"<p>               Bases: <code>Model</code></p> <p>Bound between a <code>User</code> and a <code>Trombi</code>.</p> <p>This class is here to avoid cross-references between the core, club, and trombi modules. It also adds the pictures to the profile without needing all the security like the other SithFiles.</p>"},{"location":"reference/trombi/models/#trombi.models.TrombiComment","title":"<code>TrombiComment</code>","text":"<p>               Bases: <code>Model</code></p> <p>A comment given by someone to someone else in the same Trombi instance.</p>"},{"location":"reference/trombi/models/#trombi.models.TrombiClubMembership","title":"<code>TrombiClubMembership</code>","text":"<p>               Bases: <code>Model</code></p> <p>A membership in a club.</p>"},{"location":"reference/trombi/models/#trombi.models.get_semester_code","title":"<code>get_semester_code(d=None)</code>","text":"<p>Return the semester code of the given date. If no date is given, return the semester code of the current semester.</p> <p>The semester code is an upper letter (A for autumn, P for spring), followed by the last two digits of the year. For example, the autumn semester of 2018 is \"A18\".</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>date | None</code> <p>the date to use to compute the semester. If None, use today's date.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>the semester code corresponding to the given date</p> Source code in <code>core/utils.py</code> <pre><code>def get_semester_code(d: date | None = None) -&gt; str:\n    \"\"\"Return the semester code of the given date.\n    If no date is given, return the semester code of the current semester.\n\n    The semester code is an upper letter (A for autumn, P for spring),\n    followed by the last two digits of the year.\n    For example, the autumn semester of 2018 is \"A18\".\n\n    Args:\n        d: the date to use to compute the semester. If None, use today's date.\n\n    Returns:\n        the semester code corresponding to the given date\n    \"\"\"\n    if d is None:\n        d = localdate()\n\n    start = get_start_of_semester(d)\n\n    if (start.month, start.day) == settings.SITH_SEMESTER_START_AUTUMN:\n        return \"A\" + str(start.year)[-2:]\n    return \"P\" + str(start.year)[-2:]\n</code></pre>"},{"location":"reference/trombi/views/","title":"Views","text":""},{"location":"reference/trombi/views/#trombi.views.Club","title":"<code>Club</code>","text":"<p>               Bases: <code>Model</code></p> <p>The Club class, made as a tree to allow nice tidy organization.</p>"},{"location":"reference/trombi/views/#trombi.views.Club.president","title":"<code>president()</code>","text":"<p>Fetch the membership of the current president of this club.</p> Source code in <code>club/models.py</code> <pre><code>@cached_property\ndef president(self) -&gt; Membership | None:\n    \"\"\"Fetch the membership of the current president of this club.\"\"\"\n    return self.members.filter(\n        role=settings.SITH_CLUB_ROLES_ID[\"President\"], end_date=None\n    ).first()\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.Club.check_loop","title":"<code>check_loop()</code>","text":"<p>Raise a validation error when a loop is found within the parent list.</p> Source code in <code>club/models.py</code> <pre><code>def check_loop(self):\n    \"\"\"Raise a validation error when a loop is found within the parent list.\"\"\"\n    objs = []\n    cur = self\n    while cur.parent is not None:\n        if cur in objs:\n            raise ValidationError(_(\"You can not make loops in clubs\"))\n        objs.append(cur)\n        cur = cur.parent\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.Club.is_owned_by","title":"<code>is_owned_by(user)</code>","text":"<p>Method to see if that object can be super edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def is_owned_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be super edited by the given user.\"\"\"\n    if user.is_anonymous:\n        return False\n    return user.is_root or user.is_board_member\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.Club.can_be_edited_by","title":"<code>can_be_edited_by(user)</code>","text":"<p>Method to see if that object can be edited by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_edited_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be edited by the given user.\"\"\"\n    return self.has_rights_in_club(user)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.Club.can_be_viewed_by","title":"<code>can_be_viewed_by(user)</code>","text":"<p>Method to see if that object can be seen by the given user.</p> Source code in <code>club/models.py</code> <pre><code>def can_be_viewed_by(self, user: User) -&gt; bool:\n    \"\"\"Method to see if that object can be seen by the given user.\"\"\"\n    return user.was_subscribed\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.Club.get_membership_for","title":"<code>get_membership_for(user)</code>","text":"<p>Return the current membership the given user.</p> Note <p>The result is cached.</p> Source code in <code>club/models.py</code> <pre><code>def get_membership_for(self, user: User) -&gt; Membership | None:\n    \"\"\"Return the current membership the given user.\n\n    Note:\n        The result is cached.\n    \"\"\"\n    if user.is_anonymous:\n        return None\n    membership = cache.get(f\"membership_{self.id}_{user.id}\")\n    if membership == \"not_member\":\n        return None\n    if membership is None:\n        membership = self.members.filter(user=user, end_date=None).first()\n        if membership is None:\n            cache.set(f\"membership_{self.id}_{user.id}\", \"not_member\")\n        else:\n            cache.set(f\"membership_{self.id}_{user.id}\", membership)\n    return membership\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.CanCreateMixin","title":"<code>CanCreateMixin(*args, **kwargs)</code>","text":"<p>               Bases: <code>View</code></p> <p>Protect any child view that would create an object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user has not the necessary permission to create the object of the view.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.CanEditMixin","title":"<code>CanEditMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to edit this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/trombi/views/#trombi.views.CanEditPropMixin","title":"<code>CanEditPropMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has owner permissions on the child view object.</p> <p>In other word, you can make a view with this view as parent, and it will be retricted to the users that are in the object's owner_group or that pass the <code>obj.can_be_viewed_by</code> test.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>If the user cannot see the object</p>"},{"location":"reference/trombi/views/#trombi.views.CanViewMixin","title":"<code>CanViewMixin</code>","text":"<p>               Bases: <code>GenericContentPermissionMixinBuilder</code></p> <p>Ensure the user has permission to view this view's object.</p> <p>Raises:</p> Type Description <code>PermissionDenied</code> <p>if the user cannot edit this view's object.</p>"},{"location":"reference/trombi/views/#trombi.views.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Defines the base user class, useable in every app.</p> <p>This is almost the same as the auth module AbstractUser since it inherits from it, but some fields are required, and the username is generated automatically with the name of the user (see generate_username()).</p> <p>Added field: nick_name, date_of_birth Required fields: email, first_name, last_name, date_of_birth</p>"},{"location":"reference/trombi/views/#trombi.views.User.is_in_group","title":"<code>is_in_group(*, pk=None, name=None)</code>","text":"<p>Check if this user is in the given group. Either a group id or a group name must be provided. If both are passed, only the id will be considered.</p> <p>The group will be fetched using the given parameter. If no group is found, return False. If a group is found, check if this user is in the latter.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the user is the group, else False</p> Source code in <code>core/models.py</code> <pre><code>def is_in_group(self, *, pk: int | None = None, name: str | None = None) -&gt; bool:\n    \"\"\"Check if this user is in the given group.\n    Either a group id or a group name must be provided.\n    If both are passed, only the id will be considered.\n\n    The group will be fetched using the given parameter.\n    If no group is found, return False.\n    If a group is found, check if this user is in the latter.\n\n    Returns:\n         True if the user is the group, else False\n    \"\"\"\n    if pk is not None:\n        group: Optional[Group] = get_group(pk=pk)\n    elif name is not None:\n        group: Optional[Group] = get_group(name=name)\n    else:\n        raise ValueError(\"You must either provide the id or the name of the group\")\n    if group is None:\n        return False\n    if group.id == settings.SITH_GROUP_SUBSCRIBERS_ID:\n        return self.is_subscribed\n    if group.id == settings.SITH_GROUP_ROOT_ID:\n        return self.is_root\n    return group in self.cached_groups\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.cached_groups","title":"<code>cached_groups()</code>","text":"<p>Get the list of groups this user is in.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef cached_groups(self) -&gt; list[Group]:\n    \"\"\"Get the list of groups this user is in.\"\"\"\n    return list(self.groups.all())\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.age","title":"<code>age()</code>","text":"<p>Return the age this user has the day the method is called. If the user has not filled his age, return 0.</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef age(self) -&gt; int:\n    \"\"\"Return the age this user has the day the method is called.\n    If the user has not filled his age, return 0.\n    \"\"\"\n    if self.date_of_birth is None:\n        return 0\n    today = timezone.now()\n    age = today.year - self.date_of_birth.year\n    # remove a year if this year's birthday is yet to come\n    age -= (today.month, today.day) &lt; (\n        self.date_of_birth.month,\n        self.date_of_birth.day,\n    )\n    return age\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.get_short_name","title":"<code>get_short_name()</code>","text":"<p>Returns the short name for the user.</p> Source code in <code>core/models.py</code> <pre><code>def get_short_name(self):\n    \"\"\"Returns the short name for the user.\"\"\"\n    if self.nick_name:\n        return self.nick_name\n    return self.first_name + \" \" + self.last_name\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.get_display_name","title":"<code>get_display_name()</code>","text":"<p>Returns the display name of the user.</p> <p>A nickname if possible, otherwise, the full name.</p> Source code in <code>core/models.py</code> <pre><code>def get_display_name(self) -&gt; str:\n    \"\"\"Returns the display name of the user.\n\n    A nickname if possible, otherwise, the full name.\n    \"\"\"\n    if self.nick_name:\n        return \"%s (%s)\" % (self.get_full_name(), self.nick_name)\n    return self.get_full_name()\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.get_family","title":"<code>get_family(godfathers_depth=4, godchildren_depth=4)</code>","text":"<p>Get the family of the user, with the given depth.</p> <p>Parameters:</p> Name Type Description Default <code>godfathers_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godfathers to fetch</p> <code>4</code> <code>godchildren_depth</code> <code>NonNegativeInt</code> <p>The number of generations of godchildren to fetch</p> <code>4</code> <p>Returns:</p> Type Description <code>set[through]</code> <p>A list of family relationships in this user's family</p> Source code in <code>core/models.py</code> <pre><code>def get_family(\n    self,\n    godfathers_depth: NonNegativeInt = 4,\n    godchildren_depth: NonNegativeInt = 4,\n) -&gt; set[User.godfathers.through]:\n    \"\"\"Get the family of the user, with the given depth.\n\n    Args:\n        godfathers_depth: The number of generations of godfathers to fetch\n        godchildren_depth: The number of generations of godchildren to fetch\n\n    Returns:\n        A list of family relationships in this user's family\n    \"\"\"\n    res = []\n    for depth, key, reverse_key in [\n        (godfathers_depth, \"from_user_id\", \"to_user_id\"),\n        (godchildren_depth, \"to_user_id\", \"from_user_id\"),\n    ]:\n        if depth == 0:\n            continue\n        links = list(User.godfathers.through.objects.filter(**{key: self.id}))\n        res.extend(links)\n        for _ in range(1, depth):  # noqa: F402 we don't care about gettext here\n            ids = [getattr(c, reverse_key) for c in links]\n            links = list(\n                User.godfathers.through.objects.filter(\n                    **{f\"{key}__in\": ids}\n                ).exclude(id__in=[r.id for r in res])\n            )\n            if not links:\n                break\n            res.extend(links)\n    return set(res)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.email_user","title":"<code>email_user(subject, message, from_email=None, **kwargs)</code>","text":"<p>Sends an email to this User.</p> Source code in <code>core/models.py</code> <pre><code>def email_user(self, subject, message, from_email=None, **kwargs):\n    \"\"\"Sends an email to this User.\"\"\"\n    if from_email is None:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    send_mail(subject, message, from_email, [self.email], **kwargs)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.generate_username","title":"<code>generate_username()</code>","text":"<p>Generates a unique username based on the first and last names.</p> <p>For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.</p> <p>Returns:</p> Type Description <code>str</code> <p>The generated username.</p> Source code in <code>core/models.py</code> <pre><code>def generate_username(self) -&gt; str:\n    \"\"\"Generates a unique username based on the first and last names.\n\n    For example: Guy Carlier gives gcarlier, and gcarlier1 if the first one exists.\n\n    Returns:\n        The generated username.\n    \"\"\"\n\n    def remove_accents(data):\n        return \"\".join(\n            x\n            for x in unicodedata.normalize(\"NFKD\", data)\n            if unicodedata.category(x)[0] == \"L\"\n        ).lower()\n\n    user_name = (\n        remove_accents(self.first_name[0] + self.last_name)\n        .encode(\"ascii\", \"ignore\")\n        .decode(\"utf-8\")\n    )\n    # load all usernames which could conflict with the new one.\n    # we need to actually load them, instead of performing a count,\n    # because we cannot be sure that two usernames refer to the\n    # actual same word (eg. tmore and tmoreau)\n    possible_conflicts: list[str] = list(\n        User.objects.filter(username__startswith=user_name).values_list(\n            \"username\", flat=True\n        )\n    )\n    nb_conflicts = sum(\n        1 for name in possible_conflicts if name.rstrip(string.digits) == user_name\n    )\n    if nb_conflicts &gt; 0:\n        user_name += str(nb_conflicts)  # exemple =&gt; exemple1\n    self.username = user_name\n    return user_name\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.is_owner","title":"<code>is_owner(obj)</code>","text":"<p>Determine if the object is owned by the user.</p> Source code in <code>core/models.py</code> <pre><code>def is_owner(self, obj):\n    \"\"\"Determine if the object is owned by the user.\"\"\"\n    if hasattr(obj, \"is_owned_by\") and obj.is_owned_by(self):\n        return True\n    if hasattr(obj, \"owner_group\") and self.is_in_group(pk=obj.owner_group_id):\n        return True\n    return self.is_root\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.can_edit","title":"<code>can_edit(obj)</code>","text":"<p>Determine if the object can be edited by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_edit(self, obj):\n    \"\"\"Determine if the object can be edited by the user.\"\"\"\n    if hasattr(obj, \"can_be_edited_by\") and obj.can_be_edited_by(self):\n        return True\n    if hasattr(obj, \"edit_groups\"):\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"edit_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.edit_groups.all()]\n        else:\n            pks = list(obj.edit_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    if isinstance(obj, User) and obj == self:\n        return True\n    return self.is_owner(obj)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.can_view","title":"<code>can_view(obj)</code>","text":"<p>Determine if the object can be viewed by the user.</p> Source code in <code>core/models.py</code> <pre><code>def can_view(self, obj):\n    \"\"\"Determine if the object can be viewed by the user.\"\"\"\n    if hasattr(obj, \"can_be_viewed_by\") and obj.can_be_viewed_by(self):\n        return True\n    if hasattr(obj, \"view_groups\"):\n        # if \"view_groups\" has already been prefetched, use\n        # the prefetch cache, else fetch only the ids, to make\n        # the query lighter.\n        if (\n            hasattr(obj, \"_prefetched_objects_cache\")\n            and \"view_groups\" in obj._prefetched_objects_cache\n        ):\n            pks = [g.id for g in obj.view_groups.all()]\n        else:\n            pks = list(obj.view_groups.values_list(\"id\", flat=True))\n        if any(self.is_in_group(pk=pk) for pk in pks):\n            return True\n    return self.can_edit(obj)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.User.clubs_with_rights","title":"<code>clubs_with_rights()</code>","text":"<p>The list of clubs where the user has rights</p> Source code in <code>core/models.py</code> <pre><code>@cached_property\ndef clubs_with_rights(self) -&gt; list[Club]:\n    \"\"\"The list of clubs where the user has rights\"\"\"\n    memberships = self.memberships.ongoing().board().select_related(\"club\")\n    return [m.club for m in memberships]\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.QuickNotifMixin","title":"<code>QuickNotifMixin</code>","text":""},{"location":"reference/trombi/views/#trombi.views.QuickNotifMixin.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Add quick notifications to context.</p> Source code in <code>core/views/mixins.py</code> <pre><code>def get_context_data(self, **kwargs):\n    \"\"\"Add quick notifications to context.\"\"\"\n    kwargs = super().get_context_data(**kwargs)\n    kwargs[\"quick_notifs\"] = []\n    for n in self.quick_notif_list:\n        kwargs[\"quick_notifs\"].append(settings.SITH_QUICK_NOTIF[n])\n    for key, val in settings.SITH_QUICK_NOTIF.items():\n        for gk in self.request.GET:\n            if key == gk:\n                kwargs[\"quick_notifs\"].append(val)\n    return kwargs\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.TabedViewMixin","title":"<code>TabedViewMixin</code>","text":"<p>               Bases: <code>View</code></p> <p>Basic functions for displaying tabs in the template.</p>"},{"location":"reference/trombi/views/#trombi.views.Trombi","title":"<code>Trombi</code>","text":"<p>               Bases: <code>Model</code></p> <p>Main class of the trombi, the Trombi itself.</p> <p>It contains the deadlines for the users, and the link to the club that makes its Trombi.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiClubMembership","title":"<code>TrombiClubMembership</code>","text":"<p>               Bases: <code>Model</code></p> <p>A membership in a club.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiComment","title":"<code>TrombiComment</code>","text":"<p>               Bases: <code>Model</code></p> <p>A comment given by someone to someone else in the same Trombi instance.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiUser","title":"<code>TrombiUser</code>","text":"<p>               Bases: <code>Model</code></p> <p>Bound between a <code>User</code> and a <code>Trombi</code>.</p> <p>This class is here to avoid cross-references between the core, club, and trombi modules. It also adds the pictures to the profile without needing all the security like the other SithFiles.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiTabsMixin","title":"<code>TrombiTabsMixin</code>","text":"<p>               Bases: <code>TabedViewMixin</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserIsInATrombiMixin","title":"<code>UserIsInATrombiMixin</code>","text":"<p>               Bases: <code>View</code></p> <p>Check if the requested user has a trombi_user attribute.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiForm","title":"<code>TrombiForm</code>","text":"<p>               Bases: <code>ModelForm</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiCreateView","title":"<code>TrombiCreateView(*args, **kwargs)</code>","text":"<p>               Bases: <code>CanCreateMixin</code>, <code>CreateView</code></p> <p>Create a trombi for a club.</p> Source code in <code>core/auth/mixins.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    warnings.warn(\n        f\"{self.__class__.__name__} is deprecated and should be replaced \"\n        \"by other permission verification mecanism.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.TrombiCreateView.post","title":"<code>post(request, *args, **kwargs)</code>","text":"<p>Affect club.</p> Source code in <code>trombi/views.py</code> <pre><code>def post(self, request, *args, **kwargs):\n    \"\"\"Affect club.\"\"\"\n    form = self.get_form()\n    if form.is_valid():\n        club = get_object_or_404(Club, id=self.kwargs[\"club_id\"])\n        form.instance.club = club\n        ret = self.form_valid(form)\n        return ret\n    else:\n        return self.form_invalid(form)\n</code></pre>"},{"location":"reference/trombi/views/#trombi.views.TrombiEditView","title":"<code>TrombiEditView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>TrombiTabsMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.AddUserForm","title":"<code>AddUserForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiDetailView","title":"<code>TrombiDetailView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>QuickNotifMixin</code>, <code>TrombiTabsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiExportView","title":"<code>TrombiExportView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>TrombiTabsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiDeleteUserView","title":"<code>TrombiDeleteUserView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>TrombiTabsMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiModerateCommentsView","title":"<code>TrombiModerateCommentsView</code>","text":"<p>               Bases: <code>CanEditPropMixin</code>, <code>QuickNotifMixin</code>, <code>TrombiTabsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiModerateForm","title":"<code>TrombiModerateForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiModerateCommentView","title":"<code>TrombiModerateCommentView</code>","text":"<p>               Bases: <code>DetailView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiModelChoiceField","title":"<code>TrombiModelChoiceField</code>","text":"<p>               Bases: <code>ModelChoiceField</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiForm","title":"<code>UserTrombiForm</code>","text":"<p>               Bases: <code>Form</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiToolsView","title":"<code>UserTrombiToolsView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>QuickNotifMixin</code>, <code>TrombiTabsMixin</code>, <code>TemplateView</code></p> <p>Display a user's trombi tools.</p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiEditPicturesView","title":"<code>UserTrombiEditPicturesView</code>","text":"<p>               Bases: <code>TrombiTabsMixin</code>, <code>UserIsInATrombiMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiEditProfileView","title":"<code>UserTrombiEditProfileView</code>","text":"<p>               Bases: <code>QuickNotifMixin</code>, <code>TrombiTabsMixin</code>, <code>UserIsInATrombiMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiResetClubMembershipsView","title":"<code>UserTrombiResetClubMembershipsView</code>","text":"<p>               Bases: <code>UserIsInATrombiMixin</code>, <code>RedirectView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiDeleteMembershipView","title":"<code>UserTrombiDeleteMembershipView</code>","text":"<p>               Bases: <code>TrombiTabsMixin</code>, <code>CanEditMixin</code>, <code>DeleteView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiAddMembershipView","title":"<code>UserTrombiAddMembershipView</code>","text":"<p>               Bases: <code>TrombiTabsMixin</code>, <code>CreateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiEditMembershipView","title":"<code>UserTrombiEditMembershipView</code>","text":"<p>               Bases: <code>CanEditMixin</code>, <code>TrombiTabsMixin</code>, <code>UpdateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.UserTrombiProfileView","title":"<code>UserTrombiProfileView</code>","text":"<p>               Bases: <code>TrombiTabsMixin</code>, <code>DetailView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiCommentFormView","title":"<code>TrombiCommentFormView</code>","text":"<p>               Bases: <code>LoginRequiredMixin</code>, <code>View</code></p> <p>Create/edit a trombi comment.</p>"},{"location":"reference/trombi/views/#trombi.views.TrombiCommentCreateView","title":"<code>TrombiCommentCreateView</code>","text":"<p>               Bases: <code>TrombiCommentFormView</code>, <code>CreateView</code></p>"},{"location":"reference/trombi/views/#trombi.views.TrombiCommentEditView","title":"<code>TrombiCommentEditView</code>","text":"<p>               Bases: <code>TrombiCommentFormView</code>, <code>CanViewMixin</code>, <code>UpdateView</code></p>"},{"location":"tutorial/devtools/","title":"Configurer son \u00e9diteur","text":"<p>Le projet n'est en aucun cas li\u00e9 \u00e0 un quelconque environnement de d\u00e9veloppement. Il est possible pour chacun de travailler  avec les outils dont il a envie et d'utiliser l'\u00e9diteur de code avec lequel il est le plus \u00e0 l'aise.</p> <p>Pour donner une id\u00e9e, Skia a \u00e9crit une \u00e9norme partie de projet avec l'\u00e9diteur Vim sur du GNU/Linux alors que Sli a utilis\u00e9 Sublime Text sur MacOS  et que Mar\u00e9chal travaille avec PyCharm sur Windows muni de WSL Arch Linux btw.</p>"},{"location":"tutorial/devtools/#configurer-les-pre-commit-hooks","title":"Configurer les pre-commit hooks","text":"<p>La proc\u00e9dure habituelle pour contribuer au projet consiste \u00e0 commit des modifications,  puis \u00e0 les push sur le d\u00e9p\u00f4t distant et  \u00e0 ouvrir une pull request.  Cette PR va faire tourner les outils de v\u00e9rification  de la qualit\u00e9 de code.  Si la v\u00e9rification \u00e9choue, la PR est bloqu\u00e9e, et il faut r\u00e9parer le probl\u00e8me  (ce qui implique de push un micro-commit  ou de push force sur la branche).</p> <p>Dans l'id\u00e9al, on aimerait donc qu'il soit impossible d'oublier de faire tourner ces v\u00e9rifications. Pour \u00e7a, il existe un m\u00e9canisme : les pre-commits hooks. Ce sont des actions qui tournent automatiquement lorsque vous effectuez un <code>git commit</code>. Ces derni\u00e8res vont analyser et \u00e9ventuellement modifier le code, avant que Git n'ajoute effectivement le commit sur l'arbre git. Voyez \u00e7a comme une micro-CI qui tourne en local.</p> <p>Les git hooks sont une fonctionnalit\u00e9 par d\u00e9faut de Git.  Cependant, leur configuration peut-\u00eatre un peu  emb\u00eatante si vous le faites manuellement. Pour g\u00e9rer \u00e7a plus simplement, nous utilisons le logiciel python pre-commit qui permet de contr\u00f4ler leur installation via un seul fichier de configuration, plac\u00e9 \u00e0 la racine du projet (plus pr\u00e9cis\u00e9ment, il s'agit du fichier <code>.pre-commit-config.yaml</code>).</p> <p>Note</p> <p>Les pre-commits sont \u00e9galement utilis\u00e9s dans la CI. Si ces derniers fonctionnent localement, vous avez la garantie que la pipeline ne sera pas fach\u00e9e. ;)</p> <p>C'est une fonctionnalit\u00e9 de git lui-m\u00eame, mais c'est assez emb\u00eatant \u00e0 g\u00e9rer manuellement. Pour g\u00e9rer \u00e7a plus simplement,  nous utilisons le logiciel python pre-commit qui permet de contr\u00f4ller leur installation via un fichier yaml.</p> <p>Le logiciel est install\u00e9 par d\u00e9faut par uv.  Il suffit ensuite de lancer :</p> <p><pre><code>uv run pre-commit install\n</code></pre> Une fois que vous avez fait cette commande, pre-commit tournera automatiquement chaque fois que vous ferez un nouveau commit.</p> <p>Il est \u00e9galement possible d'appeler soi-m\u00eame les pre-commits :</p> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"tutorial/devtools/#configurer-ruff-pour-son-editeur","title":"Configurer Ruff pour son \u00e9diteur","text":"<p>Note</p> <p>Ruff est inclus dans les d\u00e9pendances du projet. Si vous avez r\u00e9ussi \u00e0 terminer l'installation, vous n'avez donc pas de configuration suppl\u00e9mentaire \u00e0 effectuer.</p> <p>Pour utiliser Ruff, placez-vous \u00e0 la racine du projet et lancez la commande suivante :</p> <pre><code>uv run ruff format  # pour formatter le code\nuv run ruff check  # pour linter le code\n</code></pre> <p>Ruff va alors faire son travail sur l'ensemble du projet puis vous dire si des documents ont \u00e9t\u00e9 reformat\u00e9s (si vous avez fait <code>ruff format</code>) ou bien s'il y a des erreurs \u00e0 r\u00e9parer (si vous avez faire <code>ruff check</code>).</p> <p>Appeler Ruff en ligne de commandes avant de pousser votre code sur Github est une technique qui marche tr\u00e8s bien. Cependant, vous risquez de souvent l'oublier. Or, lorsque le code ne respecte pas les standards de qualit\u00e9, la pipeline bloque les PR sur les branches prot\u00e9g\u00e9es.</p> <p>Pour \u00e9viter de vous faire r\u00e9guli\u00e8rement avoir, vous pouvez configurer votre \u00e9diteur pour que Ruff fasse son travail automatiquement \u00e0 chaque \u00e9dition d'un fichier. Nous tenterons de vous faire ici un r\u00e9sum\u00e9 pour deux \u00e9diteurs de textes populaires que sont VsCode et Sublime Text.</p> VsCodeSublime Text <p>Installez l'extension Ruff pour VsCode. Ensuite, ajoutez ceci dans votre configuration :</p> <pre><code>{\n    \"[python]\": {\n        \"editor.formatOnSave\": true,\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\"\n    }\n}\n</code></pre> <p>Vous devez installer le plugin LSP-ruff. Suivez ensuite les instructions donn\u00e9es dans la description du plugin.</p> <p>Dans la configuration de votre projet, ajoutez ceci:</p> <pre><code>{\n    \"settings\": {\n        \"lsp_format_on_save\": true, // Commun \u00e0 ruff et biome\n        \"LSP\": { \n            \"LSP-ruff\": {\n                \"enabled\": true,\n            }\n        }\n    }\n}\n</code></pre> <p>Si vous utilisez le plugin anaconda, pensez \u00e0 modifier les param\u00e8tres du linter pep8 pour \u00e9viter de recevoir des warnings dans le formatage  de ruff comme ceci :</p> <pre><code>{\n    \"pep8_ignore\": [\n      \"E203\",\n      \"E266\",\n      \"E501\",\n      \"W503\"\n    ]\n}\n</code></pre>"},{"location":"tutorial/devtools/#configurer-biome-pour-son-editeur","title":"Configurer Biome pour son \u00e9diteur","text":"<p>Note</p> <p>Biome est inclus dans les d\u00e9pendances du projet. Si vous avez r\u00e9ussi \u00e0 terminer l'installation, vous n'avez donc pas de configuration suppl\u00e9mentaire \u00e0 effectuer.</p> <p>Pour utiliser Biome, placez-vous \u00e0 la racine du projet et lancer la commande suivante:</p> <pre><code>    npx @biomejs/biome check # Pour checker le code avec le linter et le formater\n    npx @biomejs/biome check --write # Pour appliquer les changemnts\n</code></pre> <p>Biome va alors faire son travail sur l'ensemble du projet puis vous dire si des documents ont \u00e9t\u00e9 reformat\u00e9s (si vous avez fait <code>npx @biomejs/biome format --write</code>) ou bien s'il y a des erreurs \u00e0 r\u00e9parer (si vous avez faire <code>npx @biomejs/biome lint</code>) ou les deux (si vous avez fait <code>npx @biomejs/biome check --write</code>).</p> <p>Appeler Biome en ligne de commandes avant de pousser votre code sur Github est une technique qui marche tr\u00e8s bien. Cependant, vous risquez de souvent l'oublier. Or, lorsque le code ne respecte pas les Biomes de qualit\u00e9, la pipeline bloque les PR sur les branches prot\u00e9g\u00e9es.</p> <p>Pour \u00e9viter de vous faire r\u00e9guli\u00e8rement avoir, vous pouvez configurer votre \u00e9diteur pour que Biome fasse son travail automatiquement \u00e0 chaque \u00e9dition d'un fichier. Nous tenterons de vous faire ici un r\u00e9sum\u00e9 pour deux \u00e9diteurs de textes populaires que sont VsCode et Sublime Text.</p> VsCodeSublime Text <p>Biome est fourni par le plugin Biome.</p> <p>Ensuite, ajoutez ceci dans votre configuration :</p> <pre><code>{\n  \"[javascript]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.defaultFormatter\": \"biomejs.biome\"\n  },\n  \"[typescript]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.defaultFormatter\": \"biomejs.biome\"\n  }\n}\n</code></pre> <p>Tout comme pour ruff, il suffit d'installer un plugin lsp LSP-biome.</p> <p>Et enfin, dans la configuration de votre projet, ajouter les lignes suivantes :</p> <pre><code>{\n    \"settings\": {\n        \"lsp_format_on_save\": true, // Commun \u00e0 ruff et biome\n        \"LSP\": { \n            \"LSP-biome\": {\n                \"enabled\": true,\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial/etransaction/","title":"Etransactions","text":"<p>La boutique en ligne n\u00e9cessite une interaction avec la banque pour son fonctionnement.</p> <p>Malheureusement, la mani\u00e8re dont cette interaction marche est trop complexe pour \u00eatre r\u00e9sum\u00e9e ici.</p> <p>Nous ne pouvons donc que vous redirigez vers la doc du cr\u00e9dit agricole :  https://www.ca-moncommerce.com/espace-client-mon-commerce/up2pay-e-transactions/ma-documentation/</p>"},{"location":"tutorial/fragments/","title":"Les fragments","text":""},{"location":"tutorial/fragments/#quest-ce-quun-fragment","title":"Qu'est-ce qu'un fragment","text":"<p>Une application web django traditionnelle suit en g\u00e9n\u00e9ral le sch\u00e9ma suivant : </p> <ol> <li>l'utilisateur envoie une requ\u00eate au serveur</li> <li>le serveur renvoie une page HTML,    qui contient en g\u00e9n\u00e9ral des liens et/ou des formulaires</li> <li>lorsque l'utilisateur clique sur un lien ou valide    un formulaire, on retourne \u00e0 l'\u00e9tape 1</li> </ol> <p>C'est un processus qui marche, mais qui est lourd : g\u00e9n\u00e9rer une page enti\u00e8re demande du travail au serveur et effectuer le rendu de cette page en demande \u00e9galement beaucoup au client. Or, des temps de chargement plus longs et des rechargements complets de page peuvent nuire \u00e0 l'exp\u00e9rience utilisateur, en particulier lorsqu'ils interviennent lors d'op\u00e9rations simples.</p> <p>Pour \u00e9viter ce genre de rechargement complet, on peut utiliser AlpineJS pour rendre la page interactive et effectuer des appels \u00e0 l'API. Cette technique fonctionne particuli\u00e8rement bien lorsqu'on veut afficher des objets ou des listes d'objets de mani\u00e8re dynamique.</p> <p>En revanche, elle est moins efficace pour certaines op\u00e9rations, telles que la validation de formulaire. En effet, valider un formulaire demande beaucoup de travail de nettoyage des donn\u00e9es et d'affichage des messages d'erreur appropri\u00e9s. Or, tout ce travail existe d\u00e9j\u00e0 dans django.</p> <p>On veut donc, dans ces cas-l\u00e0, ne pas demander toute une page HTML au serveur, mais uniquement une toute petite partie, que l'on utilisera pour remplacer la partie qui correspond sur la page actuelle. Ce sont des fragments.</p>"},{"location":"tutorial/fragments/#htmx","title":"HTMX","text":"<p>Toutes les fonctionnalit\u00e9s d'interaction avec les fragments, c\u00f4t\u00e9 client, s'appuient sur la librairie htmx.</p> <p>L'usage qui en est fait est en g\u00e9n\u00e9ral assez simple et ressemblera souvent \u00e0 \u00e7a :</p> <pre><code>&lt;form\n  hx-trigger=\"submit\"  {# Lorsque le formulaire est valid\u00e9... #}\n  hx-post=\"{{ url(\"foo:bar\") }}\"  {# ...envoie une requ\u00eate POST vers l'url donn\u00e9e... #}\n  hx-swap=\"outerHTML\" {# ...et remplace tout l'html du formulaire par le contenu de la r\u00e9ponse HTTP #}\n&gt;\n  {% csrf_token %}\n  {{ form }}\n  &lt;input type=\"submit\" value=\"{% trans %}Go{% endtrans %}\"/&gt;\n&lt;/form&gt;\n</code></pre> <p>C'est la majorit\u00e9 de ce que vous avez besoin de savoir pour utiliser HTMX sur le site.</p> <p>Bien entendu, ce n'est pas tout, il y a d'autres options et certaines subtilit\u00e9s, mais pour \u00e7a, consultez la doc officielle d'HTMX.</p>"},{"location":"tutorial/fragments/#la-surcouche-du-site","title":"La surcouche du site","text":"<p>Pour faciliter et standardiser l'int\u00e9gration d'HTMX dans la base de code du site AE, nous avons cr\u00e9\u00e9 certains mixins \u00e0 utiliser dans les vues bas\u00e9es sur des classes.</p>"},{"location":"tutorial/fragments/#allowfragment","title":"AllowFragment","text":"<p><code>AllowFragment</code> est extr\u00eamement simple dans son concept : il met \u00e0 disposition la variable <code>is_fragment</code>, qui permet de savoir si la vue est appel\u00e9e par HTMX, ou si elle provient d'un autre contexte.</p> <p>Gr\u00e2ce \u00e0 \u00e7a, on peut \u00e9crire des vues qui  fonctionnent dans les deux contextes.</p> <p>Par exemple, supposons que nous avons une <code>EditView</code> tr\u00e8s simple, contenant uniquement un formulaire. On peut \u00e9crire la vue et le template de la mani\u00e8re suivante :</p> <code>views.py</code><code>app/foo.jinja</code> <pre><code>from django.views.generic import UpdateView\n\n\nclass FooUpdateView(UpdateView):\n    model = Foo\n    fields = [\"foo\", \"bar\"]\n    pk_url_kwarg = \"foo_id\"\n    template_name = \"app/foo.jinja\"\n</code></pre> <pre><code>{% if is_fragment %}\n  {% extends \"core/base_fragment.jinja\" %}\n{% else %}\n  {% extends \"core/base.jinja\" %}\n{% endif %}\n\n{% block content %}\n  &lt;form hx-trigger=\"submit\" hx-swap=\"outerHTML\"&gt;\n    {% csrf_token %}\n    {{ form }}\n    &lt;input type=\"submit\" value=\"{% trans %}Go{% endtrans %}\"/&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre> <p>Lors du chargement initial de la page, le template entier sera rendu, mais lors de la soumission du formulaire, seul le fragment html de ce dernier sera chang\u00e9.</p>"},{"location":"tutorial/fragments/#fragmentmixin","title":"FragmentMixin","text":"<p>Il arrive des situations o\u00f9 le r\u00e9sultat que l'on veut accomplir est plus complexe. Dans ces situations, pouvoir d\u00e9composer une vue en plusieurs vues de fragment permet de ne plus  raisonner en termes de condition, mais en termes de composition : on n'a pas un seul template qui peut changer les situations, on a plusieurs templates que l'on injecte dans un template principal.</p> <p>Supposons, par exemple, que nous n'avons plus un, mais deux formulaires \u00e0 afficher sur la page. Dans ce cas, nous pouvons cr\u00e9er deux templates, qui seront alors inject\u00e9s.</p> <code>urls.py</code><code>view.py</code><code>app/fragment/create_foo.jinja</code><code>app/fragment/update_foo.jinja</code><code>app/foo.jinja</code> <pre><code>from django.urls import path\n\nfrom app import views\n\nurlpatterns = [\n    path(\"\", FooCompositeView.as_view(), name=\"main\"),\n    path(\"create/\", FooUpdateFragment.as_view(), name=\"update_foo\"),\n    path(\"update/\", FooCreateFragment.as_view(), name=\"create_foo\"),\n]\n</code></pre> <pre><code>from django.views.generic import CreateView, UpdateView, TemplateView\nfrom core.views.mixins import FragmentMixin\n\n\nclass FooCreateFragment(FragmentMixin, CreateView):\n    model = Foo\n    fields = [\"foo\", \"bar\"]\n    template_name = \"app/fragments/create_foo.jinja\"\n\n\nclass FooUpdateFragment(FragmentMixin, UpdateView):\n    model = Foo\n    fields = [\"foo\", \"bar\"]\n    pk_url_kwarg = \"foo_id\"\n    template_name = \"app/fragments/update_foo.jinja\"\n\n\nclass FooCompositeFormView(TemplateView):\n    template_name = \"app/foo.jinja\"\n\n    def get_context_data(**kwargs):\n        return super().get_context_data(**kwargs) | {\n            \"create_fragment\": FooCreateFragment.as_fragment()(),\n            \"update_fragment\": FooUpdateFragment.as_fragment()(foo_id=1)\n        }\n</code></pre> <pre><code>&lt;form \n  hx-trigger=\"submit\" \n  hx-post=\"{{ url(\"app:create_foo\") }}\" \n  hx-swap=\"outerHTML\"\n&gt;\n  {% csrf_token %}\n  {{ form }}\n  &lt;input type=\"submit\" value=\"{% trans %}Create{% endtrans %}\"/&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>&lt;form \n  hx-trigger=\"submit\" \n  hx-post=\"{{ url(\"app:update_foo\") }}\" \n  hx-swap=\"outerHTML\"\n&gt;\n  {% csrf_token %}\n  {{ form }}\n  &lt;input type=\"submit\" value=\"{% trans %}Update{% endtrans %}\"/&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>{% extends \"core/base.html\" %}\n\n{% block content %}\n  &lt;h2&gt;{% trans %}Update current foo{% endtrans %}&lt;/h2&gt; \n  {{ update_fragment }}\n\n  &lt;h2&gt;{% trans %}Create new foo{% endtrans %}&lt;/h2&gt; \n  {{ create_fragment }}\n{% endblock %}\n</code></pre> <p>Le r\u00e9sultat consistera en l'affichage d'une page contenant deux formulaires. Le rendu des fragments n'est pas effectu\u00e9 par <code>FooCompositeView</code>, mais par les vues des fragments elles-m\u00eames, en sautant les m\u00e9thodes <code>dispatch</code> et <code>get</code>/<code>post</code> de ces derni\u00e8res. \u00c0 chaque validation de formulaire, la requ\u00eate sera envoy\u00e9e \u00e0 la vue responsable du fragment, qui se comportera alors comme une vue normale.</p>"},{"location":"tutorial/fragments/#la-methode-as_fragment","title":"La m\u00e9thode <code>as_fragment</code>","text":"<p>Il est \u00e0 noter que l'instantiation d'un fragment se fait en deux \u00e9tapes :</p> <ul> <li>on commence par instantier la vue en tant que renderer.</li> <li>on appelle le renderer en lui-m\u00eame</li> </ul> <p>Ce qui donne la syntaxe <code>Fragment.as_fragment()()</code>.</p> <p>Cette conception est une mani\u00e8re de se rapprocher le plus possible de l'interface d\u00e9j\u00e0 existante pour la m\u00e9thode <code>as_view</code> des vues. La m\u00e9thode <code>as_fragment</code> prend en argument les m\u00eames param\u00e8tres que <code>as_view</code>.</p> <p>Par exemple, supposons que nous voulons rajouter des variables de contexte lors du rendu du fragment. On peut \u00e9crire \u00e7a ainsi :</p> <pre><code>fragment = Fragment.as_fragment(extra_context={\"foo\": \"bar\"})()\n</code></pre>"},{"location":"tutorial/fragments/#personnaliser-le-rendu","title":"Personnaliser le rendu","text":"<p>En plus de la personnalisation permise par <code>as_fragment</code>, on peut surcharger la m\u00e9thode <code>render_fragment</code> pour accomplir des actions sp\u00e9cifiques, et ce uniquement lorsqu'on effectue le rendu du fragment.</p> <p>Supposons qu'on veuille manipuler un entier dans la vue et que, lorsqu'on est en train de faire le rendu du template, on veuille augmenter la valeur de cet entier (c'est juste pour l'exemple). On peut \u00e9crire \u00e7a ainsi :</p> <pre><code>from django.views.generic import CreateView\nfrom core.views.mixins import FragmentMixin\n\n\nclass FooCreateFragment(FragmentMixin, CreateView):\n    model = Foo\n    fields = [\"foo\", \"bar\"]\n    template_name = \"app/fragments/create_foo.jinja\"\n\n    def render_fragment(self, request, **kwargs):\n        if \"foo\" in kwargs:\n           kwargs[\"foo\"] += 2\n        return super().render_fragment(request, **kwargs)\n</code></pre> <p>Et on effectuera le rendu du fragment de la mani\u00e8re suivante :</p> <pre><code>FooCreateFragment.as_fragment()(foo=4)\n</code></pre>"},{"location":"tutorial/fragments/#usefragmentsmixin","title":"UseFragmentsMixin","text":"<p>Lorsqu'on a plusieurs fragments, il est parfois plus ais\u00e9 des les aggr\u00e9ger au sein de la vue principale en utilisant <code>UseFragmentsMixin</code>.</p> <p>Elle permet de marquer de mani\u00e8re plus explicite la s\u00e9paration entre les fragments et le reste du contexte.</p> <p>Reprenons <code>FooUpdateFragment</code> et la version modifi\u00e9e de <code>FooCreateFragment</code>. <code>FooCompositeView</code> peut \u00eatre r\u00e9\u00e9crite ainsi :</p> <pre><code>from django.views.generic import TemplateView\nfrom core.views.mixins import UseFragmentsMixin\n\n\nclass FooCompositeFormView(UseFragmentsMixin, TemplateView):\n    fragments = {\n        \"create_fragment\": FooCreateFragment,\n        \"update_fragment\": FooUpdateFragment\n    }\n    fragment_data = {\n       \"update_fragment\": {\"foo\": 4}\n    }\n    template_name = \"app/foo.jinja\"\n</code></pre> <p>Le r\u00e9sultat sera alors strictement le m\u00eame.</p> <p>Pour personnaliser le rendu de tous les fragments, on peut \u00e9galement surcharger la m\u00e9thode <code>get_fragment_context_data</code>. Cette m\u00e9thode remplit les m\u00eames objectifs que <code>get_context_data</code>, mais uniquement pour les fragments. Il s'agit simplement d'un utilitaire pour s\u00e9parer les responsabilit\u00e9s.</p> <pre><code>from django.views.generic import TemplateView\nfrom core.views.mixins import UseFragmentsMixin\n\n\nclass FooCompositeFormView(UseFragmentsMixin, TemplateView):\n    fragments = {\n        \"create_fragment\": FooCreateFragment\n    }\n    template_name = \"app/foo.jinja\"\n\n    def get_fragment_context_data(self):\n        # let's render the update fragment here\n        # instead of using the class variables\n        return super().get_fragment_context_data() | {\n            \"create_fragment\": FooUpdateFragment.as_fragment()(foo=4)\n        }\n</code></pre>"},{"location":"tutorial/groups/","title":"Gestion des groupes","text":""},{"location":"tutorial/groups/#un-peu-dhistoire","title":"Un peu d'histoire","text":"<p>Par d\u00e9faut, Django met \u00e0 disposition un mod\u00e8le <code>Group</code>, li\u00e9 par clef \u00e9trang\u00e8re au mod\u00e8le <code>User</code>. Pour cr\u00e9er un syst\u00e8me de gestion des groupes qui semblait plus appropri\u00e9 aux d\u00e9veloppeurs initiaux, un nouveau mod\u00e8le core.models.Group a \u00e9t\u00e9 cr\u00e9e, et la relation de clef \u00e9trang\u00e8re a \u00e9t\u00e9 modifi\u00e9e pour lier core.models.User \u00e0 ce dernier.</p> <p>L'ancien mod\u00e8le <code>Group</code> \u00e9tait implicitement divis\u00e9 en deux cat\u00e9gories :</p> <ul> <li>les m\u00e9ta-groupes : groupes li\u00e9s aux clubs et cr\u00e9\u00e9s \u00e0 la vol\u00e9e.   Ces groupes n'\u00e9taient li\u00e9s par clef \u00e9trang\u00e8re \u00e0 aucun utilisateur.   Ils \u00e9taient r\u00e9cup\u00e9r\u00e9s \u00e0 partir de leur nom uniquement   et \u00e9taient plus une indirection pour d\u00e9signer l'appartenance \u00e0 un club   que des groupes \u00e0 proprement parler.</li> <li>les groupes r\u00e9els : groupes cr\u00e9\u00e9s \u00e0 la main    et souvent hardcod\u00e9s dans la configuration.</li> </ul> <p>Cependant, ce nouveau syst\u00e8me s'\u00e9loignait trop du cadre de Django et a fini par devenir une g\u00eane. La v\u00e9rification des droits lors des op\u00e9rations est devenue une op\u00e9ration complexe et co\u00fbteuse en temps.</p> <p>La gestion des groupes a donc \u00e9t\u00e9 modifi\u00e9e pour recoller un peu plus au cadre de Django. Toutefois, il n'a pas \u00e9t\u00e9 tent\u00e9 de revenir \u00e0 100% sur l'architecture pr\u00f4n\u00e9e par Django.</p> <p>D'une part, cela repr\u00e9sentait un risque pour le succ\u00e8s de l'application  de la migration sur la base de donn\u00e9es de production.</p> <p>D'autre part, si une autre architecture a \u00e9t\u00e9 tent\u00e9e au d\u00e9but,  ce n'\u00e9tait pas sans raison : ce que nous voulons mod\u00e9liser sur le site AE n'est pas compl\u00e8tement mod\u00e9lisable avec ce qu'offre Django. Il faut donc bien garder une surcouche au-dessus de l'authentification de Django. Tout le d\u00e9fi est de r\u00e9ussir \u00e0 maintenir cette surcouche aussi fine que possible sans limiter ce que nous voulons faire.</p>"},{"location":"tutorial/groups/#representation-en-base-de-donnees","title":"Repr\u00e9sentation en base de donn\u00e9es","text":"<p>Le mod\u00e8le core.models.Group a donc \u00e9t\u00e9 l\u00e9g\u00e8rement remani\u00e9 et la distinction entre groupes m\u00e9ta et groupes r\u00e9els a \u00e9t\u00e9 plus ou moins supprim\u00e9e. La liaison de clef \u00e9trang\u00e8re se fait toujours entre core.models.User et core.models.Group.</p> <p>Cependant, il y a une subtilit\u00e9. Depuis le d\u00e9but, le mod\u00e8le <code>Group</code> de django n'a jamais disparu. En effet, lorsqu'un mod\u00e8le h\u00e9rite d'un mod\u00e8le qui n'est pas abstrait, Django garde les deux tables et les lie par une clef \u00e9trang\u00e8re unique de clef primaire \u00e0 clef primaire (pour plus de d\u00e9tail, lire  la doc de django sur l'h\u00e9ritage de mod\u00e8le)</p> <p>L'organisation r\u00e9elle de notre syst\u00e8me de groupes est donc la suivante :</p> <pre><code>---\ntitle: Repr\u00e9sentation des groupes\n---\nerDiagram\n    core_user }o..o{ core_group: core_user_groups\n    auth_group }o..o{ auth_permission: auth_group_permissions\n    core_group ||--|| auth_group: \"\"\n    core_user }o..o{ auth_permission :\"core_user_user_permissions\"\n\n    core_user {\n        int id PK\n        string username\n        string email\n        string first_name\n        etc etc\n    }\n    core_group {\n        int group_ptr_id PK,FK\n        string description\n        bool is_manually_manageable\n    }\n    auth_group {\n        int id PK\n        name string\n    }\n    auth_permission {\n        int id PK\n        string name\n    }</code></pre> <p>Cette organisation, rajoute une certaine complexit\u00e9, mais celle-ci est presque enti\u00e8rement g\u00e9r\u00e9e par django, ce qui fait que la gestion n'est pas tellement plus compliqu\u00e9e du point de vue du d\u00e9veloppeur.</p> <p>Chaque fois qu'un queryset implique notre <code>Group</code> ou le <code>Group</code> de django, l'autre mod\u00e8le est automatiquement ajout\u00e9 \u00e0 la requ\u00eate par jointure. De cette fa\u00e7on, on peut manipuler l'un ou l'autre, sans m\u00eame se rendre que les tables sont dans des tables s\u00e9par\u00e9es.</p> <p>Par exemple :</p> pythonSQL g\u00e9n\u00e9r\u00e9 <pre><code>from core.models import Group\n\nGroup.objects.all()\n</code></pre> <pre><code>SELECT \"auth_group\".\"id\",\n       \"auth_group\".\"name\",\n       \"core_group\".\"group_ptr_id\",\n       \"core_group\".\"is_manually_manageable\",\n       \"core_group\".\"description\"\nFROM \"core_group\"\n         INNER JOIN \"auth_group\" ON (\"core_group\".\"group_ptr_id\" = \"auth_group\".\"id\")\n</code></pre> <p>Warning</p> <p>Django r\u00e9ussit \u00e0 abstraire assez bien la logique relationnelle. Cependant, gardez bien en m\u00e9moire que ce n'est pas quelque chose de magique et que cette mani\u00e8re de faire a des limitations. Par exemple, il devient impossible de <code>bulk_create</code> des groupes.</p>"},{"location":"tutorial/groups/#la-definition-dun-groupe","title":"La d\u00e9finition d'un groupe","text":"<p>Un groupe est constitu\u00e9 des informations suivantes :</p> <ul> <li>son nom : <code>name</code></li> <li>sa description : <code>description</code> (optionnelle)</li> <li>si on autorise sa gestion par les utilisateurs du site : <code>is_manually_manageable</code></li> </ul> <p>Si un groupe est g\u00e9rable manuellement, alors les administrateurs du site auront le droit d'assigner des utilisateurs \u00e0 ce groupe depuis l'interface d\u00e9di\u00e9e.</p> <p>S'il n'est pas g\u00e9rable manuellement, on cache aux utilisateurs du site la gestion des membres de ce groupe. La gestion se fait alors uniquement \"sous le capot\", de mani\u00e8re automatique lors de certains \u00e9v\u00e8nements. Par exemple, lorsqu'un utilisateur rejoint un club, il est automatiquement ajout\u00e9 au groupe des membres du club. Lorsqu'il quitte le club, il est retir\u00e9 du groupe.</p>"},{"location":"tutorial/groups/#les-groupes-utilises","title":"Les groupes utilis\u00e9s","text":""},{"location":"tutorial/groups/#groupes-principaux","title":"Groupes principaux","text":"<p>Les groupes les plus notables g\u00e9rables par les administrateurs du site sont :</p> <ul> <li><code>Root</code> : administrateur global du site</li> <li><code>Accounting admin</code> : les administrateurs de la comptabilit\u00e9</li> <li><code>Communication admin</code> : les administrateurs de la communication</li> <li><code>Counter admin</code> : les administrateurs des comptoirs (foyer et autre)</li> <li><code>SAS admin</code> : les administrateurs du SAS</li> <li><code>Forum admin</code> : les administrateurs du forum</li> <li><code>Pedagogy admin</code> : les administrateurs de la p\u00e9dagogie (guide des UVs)</li> </ul> <p>En plus de ces groupes, on peut noter :</p> <ul> <li><code>Public</code> : tous les utilisateurs du site.   Un utilisateur est automatiquement ajout\u00e9 \u00e0 ce group   lors de la cr\u00e9ation de son compte.</li> <li><code>Subscribers</code> : tous les cotisants du site.   Les utilisateurs ne sont pas r\u00e9ellement ajout\u00e9s ce groupe ;   cependant, les utilisateurs cotisants sont implicitement   consid\u00e9r\u00e9s comme membres du groupe lors de l'appel   \u00e0 la m\u00e9thode <code>User.has_perm</code>.</li> <li><code>Old subscribers</code> : tous les anciens cotisants.   Un utilisateur est automatiquement ajout\u00e9 \u00e0 ce groupe    lors de sa premi\u00e8re cotisation</li> </ul> <p>Utilisation du groupe Public</p> <p>Le groupe Public est un groupe particulier. Tout le monde faisant partie de ce groupe (m\u00eame les utilisateurs non-connect\u00e9s en sont implicitement  consid\u00e9r\u00e9s comme membres), il ne doit pas \u00eatre utilis\u00e9 pour r\u00e9soudre les permissions d'une vue.</p> <p>En revanche, il est utile pour attribuer une ressource \u00e0 tout le monde. Par exemple, un produit avec le groupe de vente Public est consid\u00e9r\u00e9 comme achetable par tous utilisateurs. S'il n'avait eu aucun group de vente, il n'aurait \u00e9t\u00e9 accessible \u00e0 personne.</p>"},{"location":"tutorial/groups/#groupes-de-club","title":"Groupes de club","text":"<p>Chaque club est associ\u00e9 \u00e0 deux groupes : le groupe des membres et le groupe du bureau.</p> <p>Lorsqu'un utilisateur rejoint un club, il est automatiquement ajout\u00e9 au groupe des membres. S'il rejoint le club en tant que membre du bureau, il est \u00e9galement ajout\u00e9 au groupe du bureau.</p> <p>Lorsqu'un utilisateur quitte le club, il est automatiquement retir\u00e9 des groupes li\u00e9s au club. S'il quitte le bureau, mais reste dans le club,  il est retir\u00e9 du groupe du bureau, mais reste dans le groupe des membres.</p>"},{"location":"tutorial/groups/#groupes-de-ban","title":"Groupes de ban","text":"<p>Les groupes de ban sont une cat\u00e9gorie de groupes \u00e0 part, qui ne sont pas stock\u00e9s dans la m\u00eame table  et qui ne sont pas g\u00e9r\u00e9s sur la m\u00eame interface que les autres groupes.</p> <p>Les groupes de ban existants sont les suivants :</p> <ul> <li><code>Banned from buying alcohol</code> : les utilisateurs interdits de vente d'alcool (non mineurs)</li> <li><code>Banned from counters</code> : les utilisateurs interdits d'utilisation des comptoirs</li> <li><code>Banned to subscribe</code> : les utilisateurs interdits de cotisation</li> </ul>"},{"location":"tutorial/groups/#groupes-lies-a-une-permission","title":"Groupes li\u00e9s \u00e0 une permission","text":"<p>Certaines actions sur le site demandent une permission en particulier, que l'on veut donner ou retirer n'importe quand.</p> <p>Prenons par exemple les cotisations : lors de l'int\u00e9gration, on veut permettre aux membres du bureau de l'Integ de cr\u00e9er des cotisations, et pareil pour les membres du bureau  de la Welcome Week pendant cette derni\u00e8re.</p> <p>Dans ces cas-l\u00e0, il est pertinent de mettre \u00e0 disposition des administrateurs du site une page leur permettant de g\u00e9rer quels groupes ont une permission donn\u00e9e. Pour ce faire, il existe  PermissionGroupsUpdateView.</p> <p>Pour l'utiliser, il suffit de cr\u00e9er une vue qui en h\u00e9rite et de lui dire quelle est la permission dont on veut g\u00e9rer les groupes :</p> <pre><code>from core.views.group import PermissionGroupsUpdateView\n\n\nclass SubscriptionPermissionView(PermissionGroupsUpdateView):\n    permission = \"subscription.add_subscription\"\n</code></pre> <p>Configurez l'url de la vue, et c'est tout ! La page ainsi g\u00e9n\u00e9r\u00e9e contiendra un formulaire avec un unique champ permettant de s\u00e9lectionner des groupes. Par d\u00e9faut, seuls les utilisateurs avec la permission <code>auth.change_permission</code> auront acc\u00e8s \u00e0 ce formulaire (donc, normalement, uniquement les utilisateurs Root).</p>"},{"location":"tutorial/install-advanced/","title":"Installer le projet (avanc\u00e9)","text":"<p>Si le projet marche chez vous apr\u00e8s avoir suivi les \u00e9tapes  donn\u00e9es dans la page pr\u00e9c\u00e9dente, alors vous pouvez d\u00e9velopper. Ce que nous nous vous avons pr\u00e9sent\u00e9 n'est absolument pas la m\u00eame configuration que celle du site, mais elle n'en est pas moins fonctionnelle.</p> <p>Cependant, vous pourriez avoir envie de faire en sorte que votre environnement de d\u00e9veloppement soit encore plus proche de celui en production. Voici les \u00e9tapes \u00e0 suivre pour \u00e7a.</p> <p>Tip</p> <p>Configurer les d\u00e9pendances du projet peut demander beaucoup d'allers et retours entre votre r\u00e9pertoire projet et divers autres emplacements.</p> <p>Vous pouvez gagner du temps en d\u00e9clarant un alias :</p> bash/zshnu <pre><code>alias cdp=\"cd /repertoire/du/projet\"\n</code></pre> <pre><code>alias cdp = cd /repertoire/du/projet\n</code></pre> <p>Chaque fois qu'on vous demandera de retourner au r\u00e9pertoire projet, vous aurez juste \u00e0 faire :</p> <pre><code>cdp\n</code></pre>"},{"location":"tutorial/install-advanced/#installer-les-dependances-manquantes","title":"Installer les d\u00e9pendances manquantes","text":"<p>Pour installer compl\u00e8tement le projet, il va falloir quelques d\u00e9pendances en plus. Commencez par installer les d\u00e9pendances syst\u00e8me :</p> LinuxmacOS Debian/UbuntuArch Linux <pre><code>sudo apt install postgresql libq-dev nginx\n</code></pre> <pre><code>sudo pacman -S postgresql nginx\n</code></pre> <pre><code>brew install postgresql lipbq nginx\nexport PATH=\"/usr/local/opt/libpq/bin:$PATH\"\nsource ~/.zshrc\n</code></pre> <p>Puis, installez les d\u00e9pendances n\u00e9cessaires en prod :</p> <pre><code>uv sync --group prod\n</code></pre> <p>Info</p> <p>Certaines d\u00e9pendances peuvent \u00eatre un peu longues \u00e0 installer (notamment psycopg-c). C'est parce que ces d\u00e9pendances compilent certains modules \u00e0 l'installation.</p>"},{"location":"tutorial/install-advanced/#desactiver-honcho","title":"D\u00e9sactiver Honcho","text":"<p>Honcho est utilis\u00e9 en d\u00e9veloppement pour simplifier la gestion des services externes (redis, vite et autres futures).</p> <p>En mode production, il est n\u00e9cessaire de le d\u00e9sactiver puisque normalement tous ces services sont d\u00e9j\u00e0 configur\u00e9s.</p> <p>Pour d\u00e9sactiver Honcho il suffit de ne s\u00e9lectionner aucun <code>PROCFILE_</code> dans la config.</p> <pre><code>PROCFILE_STATIC=\nPROCFILE_SERVICE=\n</code></pre> <p>Note</p> <p>Si <code>PROCFILE_STATIC</code> est d\u00e9sactiv\u00e9, la recompilation automatique des fichiers statiques ne se fait plus. Si vous en avez besoin et que vous travaillez sans <code>PROCFILE_STATIC</code>, vous devez ouvrir une autre fen\u00eatre de votre terminal et lancer la commande <code>npm run serve</code></p>"},{"location":"tutorial/install-advanced/#configurer-redis-en-service-externe","title":"Configurer Redis en service externe","text":"<p>Redis est install\u00e9 comme d\u00e9pendance mais pas lanc\u00e9 par d\u00e9faut.</p> <p>En mode d\u00e9veloppement, le sith se charge de le d\u00e9marrer mais pas en production !</p> <p>Il faut donc lancer le service comme ceci:</p> <pre><code>sudo systemctl start redis\nsudo systemctl enable redis  # si vous voulez que redis d\u00e9marre automatiquement au boot\n</code></pre> <p>Puis modifiez votre <code>.env</code> pour y configurer le bon port redis. Le port du fichier d'exemple est un port non standard pour \u00e9viter les conflits avec les instances de redis d\u00e9j\u00e0 en fonctionnement.</p> <pre><code>REDIS_PORT=6379\nCACHE_URL=redis://127.0.0.1:6379/0\n</code></pre> <p>Si on souhaite configurer redis pour communiquer via un socket :</p> <pre><code>CACHE_URL=redis:///path/to/redis-server.sock\n</code></pre>"},{"location":"tutorial/install-advanced/#configurer-postgresql","title":"Configurer PostgreSQL","text":"<p>PostgreSQL est utilis\u00e9 comme base de donn\u00e9es.</p> <p>Passez sur le compte de l'utilisateur postgres  et lancez l'invite de commande sql :</p> <pre><code>sudo su - postgres\npsql\n</code></pre> <p>Puis configurez la base de donn\u00e9es :</p> <pre><code>CREATE DATABASE sith;\nCREATE USER sith WITH PASSWORD 'password';\n\nALTER ROLE sith SET client_encoding TO 'utf8';\nALTER ROLE sith SET default_transaction_isolation TO 'read committed';\nALTER ROLE sith SET timezone TO 'UTC';\n\nGRANT ALL PRIVILEGES ON DATABASE sith TO sith;\n\\q\n</code></pre> <p>Si vous utilisez une version de PostgreSQL sup\u00e9rieure ou \u00e9gale \u00e0 15, vous devez ex\u00e9cuter une commande en plus, en \u00e9tant connect\u00e9 en tant que postgres :</p> <pre><code>psql -d sith -c \"GRANT ALL PRIVILEGES ON SCHEMA public to sith\";\n</code></pre> <p>Puis modifiez votre <code>.env</code>. Dedans, d\u00e9commentez l'url de la base de donn\u00e9es de postgres et commentez l'url de sqlite :</p> <pre><code>#DATABASE_URL=sqlite:///db.sqlite3\nDATABASE_URL=postgres://sith:password@localhost:5432/sith\n</code></pre> <p>Enfin, cr\u00e9ez vos donn\u00e9es :</p> <pre><code>uv run ./manage.py setup\n</code></pre> <p>Note</p> <p>N'oubliez de quitter la session de l'utilisateur postgres apr\u00e8s avoir configur\u00e9 la db.</p>"},{"location":"tutorial/install-advanced/#configurer-nginx","title":"Configurer nginx","text":"<p>Nginx est utilis\u00e9 comme reverse-proxy.</p> <p>Warning</p> <p>Nginx ne sert pas les fichiers de la m\u00eame mani\u00e8re que Django. Les fichiers statiques servis seront ceux du dossier <code>/static</code>, tels que g\u00e9n\u00e9r\u00e9s par les commandes <code>collectstatic</code> et <code>compilestatic</code>. Si vous changez du css ou du js sans faire tourner ces commandes, ces changements ne seront pas refl\u00e9t\u00e9s.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, utiliser nginx en dev n'est pas tr\u00e8s utile, voire est g\u00eanant si vous travaillez sur le front. Ne vous emb\u00eatez pas avec \u00e7a, sauf par curiosit\u00e9 intellectuelle, ou bien si vous voulez tester sp\u00e9cifiquement  des interactions avec le reverse proxy.</p> <p>Placez-vous dans le r\u00e9pertoire <code>/etc/nginx</code>,  et cr\u00e9ez les dossiers et fichiers n\u00e9cessaires :</p> <pre><code>cd /etc/nginx/\nsudo mkdir sites-enabled sites-available\nsudo touch sites-available/sith.conf\nsudo ln -s /etc/nginx/sites-available/sith.conf sites-enabled/sith.conf\n</code></pre> <p>Puis ouvrez le fichier <code>sites-available/sith.conf</code> et mettez-y le contenu suivant :</p> <pre><code>server {\n    listen 8000;\n\n    server_name _;\n\n    location /static/;\n        root /repertoire/du/projet;\n    }\n    location ~ ^/data/(products|com|club_logos|upload)/ {\n        root /repertoire/du/projet;\n    }\n    location ~ ^/data/(SAS|profiles|users|.compressed|.thumbnails)/ {\n        # https://nginx.org/en/docs/http/ngx_http_core_module.html#internal\n        internal;\n        root /repertoire/du/projet;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:8001;\n        include uwsgi_params;\n    }\n}\n</code></pre> <p>Ouvrez le fichier <code>nginx.conf</code>, et ajoutez la configuration suivante :</p> <pre><code>http {\n    # Toute la configuration\n    # \u00e9ventuellement d\u00e9j\u00e0 l\u00e0\n\n    include /etc/nginx/sites-enabled/sith.conf;\n}\n</code></pre> <p>V\u00e9rifiez que votre configuration est bonne :</p> <pre><code>sudo nginx -t\n</code></pre> <p>Si votre configuration n'est pas bonne, corrigez-la. Puis lancez ou relancez nginx :</p> <pre><code>sudo systemctl restart nginx\n</code></pre> <p>Dans votre <code>.env</code>, remplacez <code>SITH_DEBUG=true</code> par <code>SITH_DEBUG=false</code>.</p> <p>Enfin, d\u00e9marrez le serveur Django :</p> <pre><code>cd /repertoire/du/projet\nuv run ./manage.py runserver 8001\n</code></pre> <p>Et c'est bon, votre reverse-proxy est pr\u00eat \u00e0 tourner devant votre serveur. Nginx \u00e9coutera sur le port 8000. Toutes les requ\u00eates vers des fichiers statiques et les medias publiques seront servies directement par nginx. Toutes les autres requ\u00eates seront transmises au serveur django.</p>"},{"location":"tutorial/install-advanced/#celery","title":"Celery","text":"<p>Celery ne tourne pas dans django. C'est une application \u00e0 part, avec ses propres processus, qui tourne de mani\u00e8re ind\u00e9pendante et qui ne communique que par messages avec l'instance de django.</p> <p>Pour faire tourner Celery, faites la commande suivante dans  un terminal \u00e0 part :</p> <pre><code>uv run celery -A sith worker --beat -l INFO \n</code></pre> <p>Note</p> <p>Nous utilisons Redis comme broker pour Celery, donc vous devez aussi configurer l'URL du broker, de la m\u00eame mani\u00e8re que ce qui est d\u00e9crit plus haut pour Redis.</p>"},{"location":"tutorial/install-advanced/#mettre-a-jour-la-base-de-donnees-antispam","title":"Mettre \u00e0 jour la base de donn\u00e9es antispam","text":"<p>L'anti spam n\u00e9cessite d'\u00eatre \u00e0 jour par rapport \u00e0 des bases de donn\u00e9es externes. Il existe une commande pour \u00e7a qu'il faut lancer r\u00e9guli\u00e8rement. Lors de la mise en production, il est judicieux de configurer un cron pour la mettre \u00e0 jour au moins une fois par jour.</p> <pre><code>python manage.py update_spam_database\n</code></pre>"},{"location":"tutorial/install-advanced/#personnaliser-lenvironnement","title":"Personnaliser l'environnement","text":"<p>Le site utilise beaucoup de variables configurables via l'environnement. Cependant, pour des raisons de maintenabilit\u00e9 et de simplicit\u00e9 pour les nouveaux d\u00e9veloppeurs, nous n'avons mis dans le fichier <code>.env.example</code> que celles qui peuvent n\u00e9cessiter d'\u00eatre fr\u00e9quemment modifi\u00e9es (par exemple, l'url de connexion \u00e0 la db, ou l'activation du mode debug).</p> <p>Cependant, il en existe beaucoup d'autres, que vous pouvez trouver dans le <code>settings.py</code> en recherchant <code>env.</code>  (avec <code>grep</code> ou avec un Ctrl+F dans votre \u00e9diteur).</p> <p>Si le besoin de les modifier se pr\u00e9sente, c'est chose possible. Il suffit de rajouter la paire clef-valeur correspondante dans le <code>.env</code>.</p> <p>Tip</p> <p>Si vous utilisez nushell,  vous pouvez automatiser le processus avec avec le script suivant, qui va parser le <code>settings.py</code> pour r\u00e9cup\u00e9rer toutes les variables d'environnement qui ne sont pas d\u00e9finies dans le .env puis va les rajouter :</p> <pre><code># si le fichier .env n'existe pas, on le cr\u00e9e\nif not (\".env\" | path exists) {\n    cp .env.example .env\n}\n\n# puis on r\u00e9cup\u00e8re les variables d'environnement d\u00e9j\u00e0 existantes\nlet existing = open .env \n\n# on r\u00e9cup\u00e8re toutes les variables d'environnement utilis\u00e9es\n# dans le settings.py qui ne sont pas encore d\u00e9finies dans le .env,\n# on les convertit dans un format .env,\n# puis on les ajoute \u00e0 la fin du .env\nlet regex = '(env\\.)(?&lt;method&gt;\\w+)\\(\\s*\"(?&lt;env_name&gt;\\w+)\"(\\s*(, default=)(?&lt;value&gt;.+))?\\s*\\)';\nlet content = open sith/settings.py;\nlet vars = $content\n    | parse --regex $regex \n    | filter { |i| $i.env_name not-in $existing }\n    | each { |i|\n        let parsed_value = match [$i.method, $i.value] {\n            [\"str\", \"None\"] =&gt; \"\"\n            [\"bool\", $val] =&gt; ($val | str downcase)\n            [\"list\", $val] =&gt; ($val | str trim -c '[' | str trim -c ']')\n            [\"path\", $val] =&gt; ($val | str replace 'BASE_DIR / \"' $'\"(pwd)/')\n            [_, $val] =&gt; $val\n        }\n        $\"($i.env_name)=($parsed_value)\"\n    }\n\nif ($vars | is-not-empty) {\n    # on ajoute les nouvelles valeurs, \n    # en mettant une ligne vide de s\u00e9paration avec les anciennes\n    [\"\", ...$vars] | save --append .env\n}\n\nprint $\"($vars | length) values added to .env\"\n</code></pre>"},{"location":"tutorial/install/","title":"Installer le projet","text":""},{"location":"tutorial/install/#dependances-du-systeme","title":"D\u00e9pendances du syst\u00e8me","text":"<p>Certaines d\u00e9pendances sont n\u00e9cessaires niveau syst\u00e8me :</p> <ul> <li>uv</li> <li>libssl</li> <li>libjpeg</li> <li>zlib1g-dev</li> <li>gettext</li> <li>redis</li> </ul>"},{"location":"tutorial/install/#installer-wsl","title":"Installer WSL","text":"<p>Si vous utilisez Windows, je suis navr\u00e9 de vous annoncer que, certaines d\u00e9pendances \u00e9tant uniquement disponibles sur des syt\u00e8mes UNIX, il n'est pas possible de d\u00e9velopper le site sur ce syst\u00e8me d'exploitation.</p> <p>Heureusement, il existe une alternative qui ne requiert pas de d\u00e9sinstaller votre OS ni de mettre un dual boot sur votre ordinateur : <code>WSL</code>.</p> <ul> <li>Pr\u00e9requis: vous devez \u00eatre sur Windows 10 version 2004 ou ult\u00e9rieure (build 19041 &amp; versions ult\u00e9rieures) ou Windows 11.</li> <li>Plus d'info: docs.microsoft.com</li> </ul> <pre><code># dans un shell Windows\nwsl --install\n\n# afficher la liste des distribution disponible avec WSL\nwsl -l -o\n\n# installer WSL avec une distro (ubuntu conseill\u00e9)\nwsl --install -d &lt;nom_distro&gt;\n</code></pre> <p>Une fois <code>WSL</code> install\u00e9, mettez \u00e0 jour votre distribution et installez les d\u00e9pendances (voir la partie installation sous Ubuntu).</p> <p>Pour acc\u00e9der au contenu d'un r\u00e9pertoire externe \u00e0 <code>WSL</code>, il suffit d'utiliser la commande suivante :</p> <pre><code># oui c'est beau, simple et efficace\ncd /mnt/&lt;la_lettre_du_disque&gt;/vos/fichiers/comme/dhab\n</code></pre> <p>Note</p> <p>\u00c0 ce stade, si vous avez r\u00e9ussi votre installation de <code>WSL</code> ou bien qu'il \u00e9tait d\u00e9j\u00e0 install\u00e9, vous pouvez effectuer la mise en place du projet en suivant les instructions pour votre distribution.</p>"},{"location":"tutorial/install/#installer-les-dependances","title":"Installer les d\u00e9pendances","text":"LinuxmacOS Debian/UbuntuArch Linux <p>Avant toute chose, assurez-vous que votre syst\u00e8me est \u00e0 jour :</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <p>Installez les d\u00e9pendances :</p> <pre><code>sudo apt install curl build-essential libssl-dev \\\n    libjpeg-dev zlib1g-dev npm libffi-dev pkg-config \\\n    gettext git redis\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>sudo pacman -Syu  # on s'assure que les d\u00e9p\u00f4ts et le syst\u00e8me sont \u00e0 jour\n\nsudo pacman -S uv gcc git gettext pkgconf npm redis\n</code></pre> <p>Pour installer les d\u00e9pendances, il est fortement recommand\u00e9 d'installer le gestionnaire de paquets <code>homebrew &lt;https://brew.sh/index_fr&gt;</code>_. Il est \u00e9galement n\u00e9cessaire d'avoir install\u00e9 xcode</p> <pre><code>brew install git uv npm redis\n\n# Pour bien configurer gettext\nbrew link gettext # (suivez bien les instructions suppl\u00e9mentaires affich\u00e9es)\n</code></pre> <p>Note</p> <p>Si vous rencontrez des erreurs lors de votre configuration, n'h\u00e9sitez pas \u00e0 v\u00e9rifier l'\u00e9tat de votre installation homebrew avec :code:<code>brew doctor</code></p> <p>Note</p> <p>Python ne fait pas parti des d\u00e9pendances puisqu'il est automatiquement install\u00e9 par uv.</p>"},{"location":"tutorial/install/#finaliser-linstallation","title":"Finaliser l'installation","text":"<p>Clonez le projet (depuis votre console WSL, si vous utilisez WSL) et installez les d\u00e9pendances :</p> <pre><code>git clone https://github.com/ae-utbm/sith.git\ncd sith\n\n# Cr\u00e9ation de l'environnement et installation des d\u00e9pendances\nuv sync\nnpm install # D\u00e9pendances frontend\ncp .env.example .env # Configuration par d\u00e9faut\nuv run ./manage.py install_xapian\n</code></pre> <p>Note</p> <p>La commande <code>install_xapian</code> est longue et affiche beaucoup de texte \u00e0 l'\u00e9cran. C'est normal, il ne faut pas avoir peur.</p> <p>La modification de la configuration passe par la modification de variables d'environnement. Ces variables sont stock\u00e9es dans un fichier <code>.env</code>.</p> <p>Les variables par d\u00e9faut contenues dans le fichier <code>.env.example</code> devraient convenir pour le d\u00e9veloppement, sans modification.</p> <p>Maintenant que les d\u00e9pendances sont install\u00e9es et la configuration remplie, nous allons pouvoir g\u00e9n\u00e9rer des donn\u00e9es utiles pendant le d\u00e9veloppement.</p> <p>Pour cela, lancez les commandes suivantes :</p> <pre><code># Pr\u00e9pare la base de donn\u00e9es\nuv run ./manage.py setup\n\n# Installe les traductions\nuv run ./manage.py compilemessages\n</code></pre> <p>Note</p> <p>Pour \u00e9viter d'avoir \u00e0 utiliser la commande <code>uv run</code> syst\u00e9matiquement, il est possible de consulter direnv.</p>"},{"location":"tutorial/install/#demarrer-le-serveur-de-developpement","title":"D\u00e9marrer le serveur de d\u00e9veloppement","text":"<p>Il faut toujours avoir pr\u00e9alablement activ\u00e9  l'environnement virtuel comme fait plus haut  et se placer \u00e0 la racine du projet. Il suffit ensuite d'utiliser cette commande :</p> <pre><code>uv run ./manage.py runserver\n</code></pre> <p>Note</p> <p>Le serveur est alors accessible \u00e0 l'adresse http://localhost:8000  ou bien http://127.0.0.1:8000/.</p> <p>Note</p> <p>Le serveur de d\u00e9veloppement se charge de lancer redis et les autres services n\u00e9cessaires au bon fonctionnement du site.</p> <p>Tip</p> <p>Vous trouverez \u00e9galement, \u00e0 l'adresse http://localhost:8000/api/docs, une interface swagger, avec toutes les routes de l'API.</p> <p>Pourquoi l'installation est aussi complexe ?</p> <p>Cette question nous a \u00e9t\u00e9 pos\u00e9e de nombreuses fois par des personnes essayant d'installer le projet. Il y a en effet un certain nombre d'\u00e9tapes \u00e0 suivre, de paquets \u00e0 installer et de commandes \u00e0 ex\u00e9cuter.</p> <p>Le processus d'installation peut donc sembler complexe.</p> <p>En r\u00e9alit\u00e9, il est difficile de faire plus simple. En effet, un site web a besoin de beaucoup de composants pour \u00eatre d\u00e9velopp\u00e9 : il lui faut au minimum une base de donn\u00e9es, un cache, un bundler Javascript et un interpr\u00e9teur pour le code du serveur. Pour nos besoin particuliers, nous utilisons \u00e9galement un moteur de recherche full-text.</p> <p>Nous avons tent\u00e9 au maximum de limiter le nombre de d\u00e9pendances et de s\u00e9lecionner les plus simples \u00e0 installer. Cependant, il est impossible de retirer l'int\u00e9gralit\u00e9 de la complexit\u00e9 du processus. Si vous rencontrez des difficult\u00e9 lors de l'installation, n'h\u00e9sitez pas \u00e0 demander de l'aide.</p>"},{"location":"tutorial/install/#generer-la-documentation","title":"G\u00e9n\u00e9rer la documentation","text":"<p>La documentation est automatiquement mise en ligne \u00e0 chaque envoi de code sur GitHub. Pour l'utiliser en local ou globalement pour la modifier, il existe une commande du site qui g\u00e9n\u00e8re  la documentation et lance un serveur la rendant accessible \u00e0 l'adresse http://localhost:8080. Cette commande g\u00e9n\u00e8re la documentation \u00e0  chacune de ses modifications, inutile de relancer le serveur \u00e0 chaque fois.</p> <pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"tutorial/install/#lancer-les-tests","title":"Lancer les tests","text":"<p>Pour lancer les tests, il suffit d'utiliser  la commande suivante :</p> <pre><code># Lancer tous les tests\nuv run pytest\n\n# Lancer les tests de l'application core\nuv run pytest core\n\n# Lancer les tests de la classe UserRegistrationTest de core\nuv run pytest core/tests/tests_core.py::TestUserRegistration\n</code></pre> <p>Note</p> <p>Certains tests sont un peu longs \u00e0 tourner. Pour ne faire tourner que les tests les plus rapides, vous pouvez ex\u00e9cutez pytest ainsi :</p> <pre><code>uv run pytest -m \"not slow\"\n\n# vous pouvez toujours faire comme au-dessus\nuv run pytest core -m \"not slow\"\n</code></pre> <p>A l'inverse, vous pouvez ne faire tourner que les tests lents en rempla\u00e7ant <code>-m \"not slow\"</code> par <code>-m slow</code>.</p> <p>De cette mani\u00e8re, votre processus de d\u00e9veloppement devrait \u00eatre un peu plus fluide. Cependant, n'oubliez pas de bien faire tourner tous les tests avant de push un commit.</p>"},{"location":"tutorial/perms/","title":"Gestion des permissions","text":""},{"location":"tutorial/perms/#objectifs-du-systeme-de-permissions","title":"Objectifs du syst\u00e8me de permissions","text":"<p>Les permissions attendues sur le site sont relativement sp\u00e9cifiques. L'acc\u00e8s \u00e0 une ressource peut se faire selon un certain nombre de param\u00e8tres diff\u00e9rents :</p> <code>L'\u00e9tat de la ressource</code> Certaines ressources sont visibles par tous les cotisants (voire tous les utilisateurs), \u00e0 condition qu'elles aient pass\u00e9 une \u00e9tape de mod\u00e9ration. La visibilit\u00e9 des ressources non-mod\u00e9r\u00e9es n\u00e9cessite des permissions suppl\u00e9mentaires. <code>L'appartenance \u00e0 un groupe</code> Les groupes Root, Admin Com, Admin SAS, etc. sont associ\u00e9s \u00e0 des jeux de permissions. Par exemple, les membres du groupe Admin SAS ont tous les droits sur les ressources li\u00e9es au SAS : ils peuvent voir, cr\u00e9er, \u00e9diter, supprimer et \u00e9ventuellement mod\u00e9rer des images, des albums, des identifications de personnes... Il en va de m\u00eame avec les admins Com pour la communication, les admins p\u00e9dagogie pour le guide des UEs et ainsi de suite. Quant aux membres du groupe Root, ils ont tous les droits sur toutes les ressources du site. <code>Le statut de la cotisation</code> Les non-cotisants n'ont presque aucun droit sur les ressources du site (ils peuvent seulement en voir une poign\u00e9e), les anciens cotisants peuvent voir un grand nombre de ressources et les cotisants actuels ont la plupart des droits qui ne sont pas li\u00e9s \u00e0 un club ou \u00e0 l'administration du site. <code>L'appartenance \u00e0 un club</code> \u00catre dans un club donne le droit de voir la plupart des ressources li\u00e9es au club dans lequel ils sont ; \u00eatre dans le bureau du club donne en outre des droits d'\u00e9dition et de cr\u00e9ation sur ces ressources. <code>\u00catre l'auteur ou le possesseur d'une ressource</code> Certaines ressources, comme les nouvelles,  enregistrent l'utilisateur qui les a cr\u00e9\u00e9es ; ce dernier a les droits de voir, de modifier et \u00e9ventuellement de supprimer ses ressources, quand bien m\u00eame elles ne seraient pas visibles pour les utilisateurs normaux (par exemple, parce qu'elles ne sont pas encore mod\u00e9r\u00e9es.) <p>Le syst\u00e8me de permissions inclus par d\u00e9faut dans django permet de mod\u00e9liser ais\u00e9ment l'acc\u00e8s \u00e0 des ressources au niveau de la table. Ainsi, il n'est pas compliqu\u00e9 de g\u00e9rer les permissions li\u00e9es aux groupes d'administration.</p> <p>Cependant, une surcouche est n\u00e9cessaire d\u00e8s lors que l'on veut g\u00e9rer les droits li\u00e9s \u00e0 une ligne en particulier d'une table de la base de donn\u00e9es.</p> <p>Nous essayons le plus possible de nous tenir aux fonctionnalit\u00e9s de django, sans pour autant h\u00e9siter \u00e0 nous rabattre sur notre propre surcouche d\u00e8s lors que les permissions attendues deviennent trop sp\u00e9cifiques pour \u00eatre g\u00e9r\u00e9es avec juste django.</p> <p>Un peu d'histoire</p> <p>Les permissions du site n'ont pas toujours \u00e9t\u00e9 g\u00e9r\u00e9es avec un m\u00e9lange de fonctionnalit\u00e9s de django et de notre propre code. Pendant tr\u00e8s longtemps, seule la surcouche \u00e9tait utilis\u00e9e, ce qui menait souvent \u00e0 des v\u00e9rifications de droits inefficaces et \u00e0 une gestion complexe de certaines parties qui auraient pu \u00eatre manipul\u00e9es beaucoup plus simplement.</p> <p>En plus de \u00e7a, les permissions li\u00e9es \u00e0 la plupart des groupes se faisait de mani\u00e8re hardcod\u00e9e : plut\u00f4t que d'associer un groupe \u00e0 un jeu de permission et de faire une jointure en db sur les groupes de l'utilisateur ayant cette permissions, on conservait la clef primaire du groupe dans la config et on v\u00e9rifiait en dur dans le code que l'utilisateur \u00e9tait un des groupes voulus.</p> <p>Ce syst\u00e8me poss\u00e9dait le triple d\u00e9savantage de prendre \u00e9norm\u00e9ment de temps, d'\u00eatre extr\u00eamement limit\u00e9 (de fait, si tout est hardcod\u00e9, on est oblig\u00e9 d'avoir le moins de groupes possibles pour que \u00e7a reste g\u00e9rable) et d'\u00eatre d\u00e9sesp\u00e9r\u00e9ment dangereux (par exemple : fin novembre 2024, une erreur dans le code a donn\u00e9 les acc\u00e8s \u00e0 la cr\u00e9ation des cotisations \u00e0 tout le monde ; mi-octobre 2019, le calcul des permissions des etickets pouvait faire tomber le site, cf.  ce topic du forum)</p>"},{"location":"tutorial/perms/#acces-a-toutes-les-ressources-dune-table","title":"Acc\u00e8s \u00e0 toutes les ressources d'une table","text":"<p>G\u00e9rer ce genre d'acc\u00e8s (par exemple : voir toutes les nouvelles ou pouvoir supprimer n'importe quelle photo) est exactement le probl\u00e8me que le syst\u00e8me de permissions de django r\u00e9sout. Nous utilisons donc ce syst\u00e8me dans ce genre de situations.</p> <p>Note</p> <p>Nous d\u00e9crivons ci-dessous l'usage que nous faisons du syst\u00e8me de permissions de django, mais la seule source d'information compl\u00e8te et pleinement fiable sur le fonctionnement r\u00e9el de ce syst\u00e8me est  la documentation de django.</p>"},{"location":"tutorial/perms/#permissions-dun-modele","title":"Permissions d'un mod\u00e8le","text":"<p>Par d\u00e9faut, django cr\u00e9e quatre permissions pour chaque table de la base de donn\u00e9es :</p> <ul> <li><code>add_&lt;nom de la table&gt;</code> : cr\u00e9er un objet dans cette table</li> <li><code>view_&lt;nom de la table&gt;</code> : voir le contenu de la table</li> <li><code>change_&lt;nom de la table&gt;</code> : \u00e9diter des objets de la table</li> <li><code>delete_&lt;nom de la table&gt;</code> : supprimer des objets de la table</li> </ul> <p>Ces permissions sont cr\u00e9\u00e9es au m\u00eame moment que le mod\u00e8le. Si la table existe en base de donn\u00e9es, ces permissions existent aussi.</p> <p>Il est \u00e9galement possible de rajouter nos propres permissions, directement dans les options Meta du mod\u00e8le. Par exemple, prenons le mod\u00e8le suivant :</p> <pre><code>from django.db import models\n\nclass News(models.Model):\n    # ...\n\n    class Meta:\n        permissions = [\n            (\"moderate_news\", \"Can moderate news\"),\n            (\"view_unmoderated_news\", \"Can view non-moderated news\"),\n        ]\n</code></pre> <p>Ce dernier aura les permissions : <code>view_news</code>, <code>add_news</code>, <code>change_news</code>, <code>delete_news</code>, <code>moderate_news</code> et <code>view_unmoderated_news</code>.</p>"},{"location":"tutorial/perms/#utilisation-des-permissions-dun-modele","title":"Utilisation des permissions d'un mod\u00e8le","text":"<p>Pour v\u00e9rifier qu'un utilisateur a une permission, on utilise les fonctions suivantes :</p> <ul> <li><code>User.has_perm(perm)</code> : retourne <code>True</code> si l'utilisateur   a la permission voulue, sinon <code>False</code></li> <li><code>User.has_perms([perm_a, perm_b, perm_c])</code> : retourne <code>True</code> si l'utilisateur   a toutes les permissions voulues, sinon <code>False</code>.</li> </ul> <p>Ces fonctions attendent un string suivant le format : <code>&lt;nom de l'application&gt;.&lt;nom de la permission&gt;</code>. Par exemple, la permission pour v\u00e9rifier qu'un utilisateur peut mod\u00e9rer une nouvelle sera : <code>com.moderate_news</code>.</p> <p>Ces fonctions sont utilisables aussi bien dans les templates Jinja que dans le code Python :</p> JinjaPython <pre><code>{% if user.has_perm(\"com.moderate_news\") %}\n    &lt;form method=\"post\" action=\"{{ url(\"com:news_moderate\", news_id=387) }}\"&gt;\n        &lt;input type=\"submit\" value=\"Mod\u00e9rer\" /&gt;\n    &lt;/form&gt;\n{% endif %}\n</code></pre> <pre><code>from com.models import News\nfrom core.models import User\n\n\nuser = User.objects.get(username=\"bibou\")\nnews = News.objects.get(id=387)\nif user.has_perm(\"com.moderate_news\"):\n    news.is_moderated = True\n    news.save()\nelse:\n    raise PermissionDenied\n</code></pre> <p>Pour utiliser ce syst\u00e8me de permissions dans une class-based view (c'est-\u00e0-dire la plus grande partie de nos vues), Django met \u00e0 disposition <code>PermissionRequiredMixin</code>, qui restreint l'acc\u00e8s \u00e0 la vue aux utilisateurs ayant la ou les permissions requises. Pour les vues sous forme de fonction, il y a le d\u00e9corateur <code>permission_required</code>.</p> Class-Based ViewFunction-based view <pre><code>from com.models import News\n\nfrom django.contrib.auth.mixins import PermissionRequiredMixin\nfrom django.shortcuts import redirect\nfrom django.urls import reverse\nfrom django.views import View\nfrom django.views.generic.detail import SingleObjectMixin\n\nclass NewsModerateView(PermissionRequiredMixin, SingleObjectMixin, View):\n    model = News\n    pk_url_kwarg = \"news_id\"\n    permission_required = \"com.moderate_news\"\n    # On peut aussi fournir plusieurs permissions, par exemple :\n    # permission_required = [\"com.moderate_news\", \"com.delete_news\"]\n\n    def post(self, request, *args, **kwargs):\n        # Si nous sommes ici, nous pouvons \u00eatre certains que l'utilisateur\n        # a la permission requise\n        obj = self.get_object()\n        obj.is_moderated = True\n        obj.save()\n        return redirect(reverse(\"com:news_list\"))\n</code></pre> <pre><code>from com.models import News\n\nfrom django.contrib.auth.decorators import permission_required\nfrom django.shortcuts import get_object_or_404, redirect\nfrom django.urls import reverse\nfrom django.views.decorators.http import require_POST\n\n@permission_required(\"com.moderate_news\")\n@require_POST\ndef moderate_news(request, news_id: int):\n    # Si nous sommes ici, nous pouvons \u00eatre certains que l'utilisateur\n    # a la permission requise\n    news = get_object_or_404(News, id=news_id)\n    news.is_moderated = True\n    news.save()\n    return redirect(reverse(\"com:news_list\"))\n</code></pre>"},{"location":"tutorial/perms/#acces-a-des-elements-en-particulier","title":"Acc\u00e8s \u00e0 des \u00e9l\u00e9ments en particulier","text":""},{"location":"tutorial/perms/#acces-a-lauteur-de-la-ressource","title":"Acc\u00e8s \u00e0 l'auteur de la ressource","text":"<p>Dans ce genre de cas, on peut identifier trois acteurs possibles :</p> <ul> <li>les administrateurs peuvent acc\u00e9der \u00e0 toutes les ressources,   y compris non-mod\u00e9r\u00e9es</li> <li>l'auteur d'une ressource non-mod\u00e9r\u00e9e peut y acc\u00e9der</li> <li>Les autres utilisateurs ne peuvent pas voir les ressources   non-mod\u00e9r\u00e9es dont ils ne sont pas l'auteur</li> </ul> <p>Dans ce genre de cas, on souhaite donc accorder l'acc\u00e8s aux utilisateurs qui ont la permission globale, selon le syst\u00e8me d\u00e9crit plus haut, ou bien \u00e0 l'auteur de la ressource.</p> <p>Pour cela, nous avons le mixin <code>PermissionOrAuthorRequired</code>. Ce dernier va effectuer les m\u00eames v\u00e9rifications que <code>PermissionRequiredMixin</code> puis, si l'utilisateur n'a pas la permission requise, v\u00e9rifier s'il est l'auteur de la ressource.</p> <pre><code>from com.models import News\nfrom core.auth.mixins import PermissionOrAuthorRequiredMixin\n\nfrom django.views.generic import UpdateView\n\nclass NewsUpdateView(PermissionOrAuthorRequiredMixin, UpdateView):\n    model = News\n    pk_url_kwarg = \"news_id\"\n    permission_required = \"com.change_news\"\n    author_field = \"author\"  # (1)!\n</code></pre> <ol> <li>Nom du champ du mod\u00e8le utilis\u00e9 comme clef \u00e9trang\u00e8re vers l'auteur.    Par exemple, ici, la permission sera accord\u00e9e si    l'utilisateur connect\u00e9 correspond \u00e0 l'utilisateur    d\u00e9sign\u00e9 par <code>News.author</code>.</li> </ol>"},{"location":"tutorial/perms/#acces-en-fonction-de-regles-plus-complexes","title":"Acc\u00e8s en fonction de r\u00e8gles plus complexes","text":"<p>Tout ce que nous avons d\u00e9crit pr\u00e9c\u00e9demment permet de couvrir la plupart des cas simples. Cependant, il arrivera souvent que les permissions attendues soient plus complexes. Dans ce genre de cas, on rentre enti\u00e8rement dans notre surcouche.</p>"},{"location":"tutorial/perms/#implementation-dans-les-modeles","title":"Impl\u00e9mentation dans les mod\u00e8les","text":"<p>La gestion de ce type de permissions se fait directement par mod\u00e8le. Il en existe trois niveaux :</p> <ul> <li>\u00c9diter des propri\u00e9t\u00e9s de l'objet</li> <li>\u00c9diter certaines valeurs l'objet</li> <li>Voir l'objet</li> </ul> <p>Chacune de ces permissions est v\u00e9rifi\u00e9e par une m\u00e9thode d\u00e9di\u00e9e de la classe User :</p> <ul> <li>Editer les propri\u00e9ts : User.is_owner(obj)</li> <li>Editer les valeurs : User.can_edit(obj)</li> <li>Voir : User.can_view(obj)</li> </ul> <p>Ces m\u00e9thodes vont alors r\u00e9soudre les permissions dans cet ordre :</p> <ol> <li>Si l'objet poss\u00e8de une m\u00e9thode <code>can_be_viewed_by(user)</code>     (ou <code>can_be_edited_by(user)</code>, ou <code>is_owned_by(user)</code>)    et que son appel renvoie <code>True</code>, l'utilisateur a la permission requise.</li> <li>Sinon, si le mod\u00e8le de l'objet poss\u00e8de un attribut <code>view_groups</code>    (ou <code>edit_groups</code>, ou <code>owner_group</code>) et que l'utilisateur    est dans l'un des groupes indiqu\u00e9s, il a la permission requise.</li> <li>Sinon, on regarde si l'utilisateur a la permission de niveau sup\u00e9rieur    (les droits <code>owner</code> impliquent les droits d'\u00e9dition, et les droits    d'\u00e9dition impliquent les droits de vue).</li> <li>Si aucune des \u00e9tapes si dessus ne permet d'\u00e9tablir que l'utilisateur    n'a la permission requise, c'est qu'il ne l'a pas.</li> </ol> <p>Voici un exemple d'impl\u00e9mentation de ce syst\u00e8me :</p> Avec les m\u00e9thodesAvec les groupes de permission <pre><code>from django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nfrom core.models import User, Group\n\nclass Article(models.Model):\n\n    title = models.CharField(_(\"title\"), max_length=100)\n    content = models.TextField(_(\"content\"))\n\n    def is_owned_by(self, user):  # (1)!\n        return user.is_board_member\n\n    def can_be_edited_by(self, user):  # (2)!\n        return user.is_subscribed\n\n    def can_be_viewed_by(self, user):  # (3)!\n        return not user.is_anonymous\n</code></pre> <ol> <li>Donne ou non les droits d'\u00e9dition des propri\u00e9t\u00e9s de l'objet.    Ici, un utilisateur dans le bureau AE aura tous les droits sur cet objet</li> <li>Donne ou non les droits d'\u00e9dition de l'objet    Ici, l'objet ne sera modifiable que par un utilisateur cotisant</li> <li>Donne ou non les droits de vue de l'objet    Ici, l'objet n'est visible que par un utilisateur connect\u00e9</li> </ol> <p>Note</p> <p>Dans cet exemple, nous utilisons des permissions tr\u00e8s simples pour que vous puissiez constater le squelette de ce syst\u00e8me, plut\u00f4t que la logique de validation dans ce cas particulier.</p> <p>En r\u00e9alit\u00e9, il serait ici beaucoup plus appropri\u00e9 de donner les permissions <code>com.delete_article</code> et <code>com.change_article_properties</code> (en cr\u00e9ant ce dernier  s'il n'existe pas encore) au groupe du bureau AE,  de donner \u00e9galement la permission <code>com.change_article</code> au groupe <code>Cotisants</code> et enfin de restreindre l'acc\u00e8s  aux vues d'acc\u00e8s aux articles avec <code>LoginRequiredMixin</code>.</p> <pre><code>from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\n\nfrom core.models import User, Group\n\nclass Article(models.Model):\n    title = models.CharField(_(\"title\"), max_length=100)\n    content = models.TextField(_(\"content\"))\n\n    # relation one-to-many\n    owner_group = models.ForeignKey(  # (1)!\n        Group, related_name=\"owned_articles\", default=settings.SITH_GROUP_ROOT_ID\n    )\n\n    # relation many-to-many\n    edit_groups = models.ManyToManyField(  # (2)!\n        Group,\n        related_name=\"editable_articles\",\n        verbose_name=_(\"edit groups\"),\n        blank=True,\n    )\n\n    # relation many-to-many\n    view_groups = models.ManyToManyField(  # (3)!\n        Group,\n        related_name=\"viewable_articles\",\n        verbose_name=_(\"view groups\"),\n        blank=True,\n    )\n</code></pre> <ol> <li>Groupe poss\u00e9dant l'objet    Donne les droits d'\u00e9dition des propri\u00e9t\u00e9s de l'objet.    Il ne peut y avoir qu'un seul groupe <code>owner</code> par objet.</li> <li>Tous les groupes ayant droit d'\u00e9dition sur l'objet.    Il peut y avoir autant de groupes d'\u00e9dition que l'on veut par objet.</li> <li>Tous les groupes ayant droit de voir l'objet.    Il peut y avoir autant de groupes de vue que l'on veut par objet.</li> </ol>"},{"location":"tutorial/perms/#application-dans-les-templates","title":"Application dans les templates","text":"<p>Il existe trois fonctions de base sur lesquelles  reposent les v\u00e9rifications de permission.  Elles sont disponibles dans le contexte par d\u00e9faut du  moteur de template et peuvent \u00eatre utilis\u00e9es \u00e0 tout moment.</p> <ul> <li>can_edit_prop(obj, user) : \u00e9quivalent de <code>obj.is_owned_by(user)</code></li> <li>can_edit(obj, user) : \u00e9quivalent de <code>obj.can_be_edited_by(user)</code></li> <li>can_view(obj, user) : \u00e9quivalent de <code>obj.can_be_viewed_by(user)</code></li> </ul> <p>Voici un exemple d'utilisation dans un template :</p> <pre><code>{# ... #}\n{% if can_edit(club, user) %}\n    &lt;a href=\"{{ url('club:tools', club_id=club.id) }}\"&gt;{{ club }}&lt;/a&gt;\n{% endif %}\n</code></pre>"},{"location":"tutorial/perms/#application-dans-les-vues","title":"Application dans les vues","text":"<p>G\u00e9n\u00e9ralement, les v\u00e9rifications de droits dans les templates se limitent aux urls \u00e0 afficher puisqu'il  ne faut normalement pas mettre de logique autre que d'affichage \u00e0 l'int\u00e9rieur (en r\u00e9alit\u00e9, c'est un principe qu'on a beaucoup viol\u00e9, mais promis on le fera plus). C'est donc habituellement au niveau des vues que cela a lieu.</p> <p>Pour cela, nous avons rajout\u00e9 des mixins \u00e0 h\u00e9riter lors de la cr\u00e9ation d'une vue bas\u00e9e sur une classe. Ces mixins ne sont compatibles qu'avec les classes r\u00e9cup\u00e9rant un objet ou une liste d'objet. Dans le cas d'un seul objet,  une permission refus\u00e9e est lev\u00e9e lorsque l'utilisateur n'a pas le droit de visionner la page.  Dans le cas d'une liste d'objet, le mixin filtre les objets non autoris\u00e9s et si aucun ne l'est, l'utilisateur recevra une liste vide d'objet.</p> <p>Voici un exemple d'utilisation en reprenant l'objet Article cr\u00e9e pr\u00e9c\u00e9demment :</p> <pre><code>from django.views.generic import CreateView, DetailView\n\nfrom core.auth.mixins import CanViewMixin, CanCreateMixin\n\nfrom com.models import WeekmailArticle\n\n\n# Il est important de mettre le mixin avant la classe h\u00e9rit\u00e9e de Django\n# L'h\u00e9ritage multiple se fait de droite \u00e0 gauche et les mixins ont besoin\n# d'une classe de base pour fonctionner correctement.\nclass ArticlesDetailView(CanViewMixin, DetailView):\n    model = WeekmailArticle\n\n\n# M\u00eame chose pour une vue de cr\u00e9ation de l'objet Article\nclass ArticlesCreateView(CanCreateMixin, CreateView):\n    model = WeekmailArticle\n</code></pre> <p>Les mixins suivants sont impl\u00e9ment\u00e9s :</p> <ul> <li>CanCreateMixin : l'utilisateur peut-il cr\u00e9er l'objet ?   Ce mixin existe, mais est d\u00e9pr\u00e9ci\u00e9 et ne doit plus \u00eatre utilis\u00e9 !</li> <li>CanEditPropMixin : l'utilisateur peut-il \u00e9diter les propri\u00e9t\u00e9s de l'objet ?</li> <li>CanEditMixin : L'utilisateur peut-il \u00e9diter l'objet ?</li> <li>CanViewMixin : L'utilisateur peut-il voir l'objet ?</li> <li>FormerSubscriberMixin : L'utilisateur a-t-il d\u00e9j\u00e0 \u00e9t\u00e9 cotisant ?</li> </ul> <p>CanCreateMixin</p> <p>L'usage de <code>CanCreateMixin</code> est dangereux et ne doit en aucun cas \u00eatre \u00e9tendu. La fa\u00e7on dont ce mixin marche est qu'il valide le formulaire de cr\u00e9ation et cr\u00e9e l'objet sans le persister en base de donn\u00e9es, puis v\u00e9rifie les droits sur cet objet non-persist\u00e9. Le danger de ce syst\u00e8me vient de multiples raisons :</p> <ul> <li>Les v\u00e9rifications se faisant sur un objet non persist\u00e9,   l'utilisation de m\u00e9canismes n\u00e9cessitant une persistance pr\u00e9alable   peut mener \u00e0 des comportements ind\u00e9sir\u00e9s, voire \u00e0 des erreurs.</li> <li>Les d\u00e9veloppeurs de django ayant tendance \u00e0 restreindre progressivement   les actions qui peuvent \u00eatre faites sur des objets non-persist\u00e9s,   les mises-\u00e0-jour de django deviennent plus compliqu\u00e9es.</li> <li>La v\u00e9rification des droits ne se fait que dans les requ\u00eates POST,   \u00e0 la toute fin de la requ\u00eate.   Tout ce qui arrive avant n'est absolument pas prot\u00e9g\u00e9.   Toute op\u00e9ration (m\u00eame les suppressions et les cr\u00e9ations) qui ont   lieu avant la persistance de l'objet seront appliqu\u00e9es,   m\u00eame sans permission.</li> <li>Si un d\u00e9veloppeur du site fait l'erreur de surcharger   la m\u00e9thode <code>form_valid</code> (ce qui est plut\u00f4t courant,   lorsqu'on veut accomplir certaines actions    quand un formulaire est valide), on peut se retrouver   dans une situation o\u00f9 l'objet est persist\u00e9 sans aucune protection.</li> </ul> <p>Performance</p> <p>Ce syst\u00e8me maison de permissions fonctionne et r\u00e9pond aux attentes de l'\u00e9poque de sa conception. Mais d'un point de vue performance, il est souvent plus que probl\u00e9matique. En effet, toutes les permissions sont dynamiquement calcul\u00e9es et n\u00e9cessitent plusieurs appels en base de donn\u00e9es qui ne se r\u00e9sument pas \u00e0 une \u00ab\u00a0simple\u00a0\u00bb jointure mais \u00e0 plusieurs requ\u00eates diff\u00e9rentes et difficiles \u00e0 optimiser. De plus, \u00e0 chaque calcul de permission, il est n\u00e9cessaire de recommencer tous les calculs depuis le d\u00e9but. La solution \u00e0 \u00e7a est de mettre du cache de session sur les tests effectu\u00e9s r\u00e9cemment, mais cela engendre son autre lot de probl\u00e8mes.</p> <p>Sur une vue o\u00f9 on manipule un seul objet, passe encore. Mais sur les <code>ListView</code>, on peut arriver \u00e0 des temps de r\u00e9ponse extr\u00eamement \u00e9lev\u00e9s.</p>"},{"location":"tutorial/perms/#filtrage-des-querysets","title":"Filtrage des querysets","text":"<p>R\u00e9cup\u00e9rer tous les objets d'un queryset et v\u00e9rifier pour chacun que l'utilisateur a le droit de les voir peut-\u00eatre excessivement co\u00fbteux en ressources (cf. l'encart ci-dessus).</p> <p>Lorsqu'il est n\u00e9cessaire de r\u00e9cup\u00e9rer un certain nombre d'objets depuis la base de donn\u00e9es, il est donc pr\u00e9f\u00e9rable de filtrer directement depuis le queryset.</p> <p>Pour cela, certains mod\u00e8les, tels que Picture  peuvent \u00eatre filtr\u00e9s avec la m\u00e9thode de queryset <code>viewable_by</code>. Cette derni\u00e8re s'utilise comme n'importe quelle autre m\u00e9thode de queryset :</p> <pre><code>from sas.models import Picture\nfrom core.models import User\n\nuser = User.objects.get(username=\"bibou\")\npictures = Picture.objects.viewable_by(user)\n</code></pre> <p>Le r\u00e9sultat de la requ\u00eate contiendra uniquement des \u00e9l\u00e9ments que l'utilisateur s\u00e9lectionn\u00e9 a effectivement le droit de voir.</p> <p>Si vous d\u00e9sirez utiliser cette m\u00e9thode sur un mod\u00e8le qui ne la poss\u00e8de pas, il est relativement facile de l'\u00e9crire :</p> <pre><code>from typing import Self\n\nfrom django.db import models\n\nfrom core.models import User\n\n\nclass NewsQuerySet(models.QuerySet):  # (1)!\n    def viewable_by(self, user: User) -&gt; Self:\n        if user.has_perm(\"com.view_unmoderated_news\"):\n            # si l'utilisateur peut tout voir, on retourne tout\n            return self\n        # sinon, on retourne les nouvelles mod\u00e9r\u00e9es ou dont l'utilisateur\n        # est l'auteur\n        return self.filter(\n            models.Q(is_moderated=True)\n            | models.Q(author=user)\n        )\n\n\nclass News(models.Model):\n    is_moderated = models.BooleanField(default=False)\n    author = models.ForeignKey(User, on_delete=models.PROTECT)\n    # ...\n\n    objects = NewsQuerySet.as_manager()  # (2)!\n\n    class Meta:\n        permissions = [(\"view_unmoderated_news\", \"Can view non moderated news\")]\n</code></pre> <ol> <li>On cr\u00e9e un <code>QuerySet</code> maison, dans lequel on d\u00e9finit la m\u00e9thode <code>viewable_by</code></li> <li>Puis, on attache ce <code>QuerySet</code> \u00e0 notre mod\u00e8le</li> </ol> <p>Note</p> <p>Pour plus d'informations sur la cr\u00e9ation de <code>QuerySet</code> personnalis\u00e9s, voir la documentation de django</p>"},{"location":"tutorial/perms/#api","title":"API","text":"<p>L'API utilise son propre syst\u00e8me de permissions. Ce n'est pas encore un autre syst\u00e8me en parall\u00e8le, mais un wrapper autour de notre syst\u00e8me de permissions, afin de l'adapter aux besoins de l'API.</p> <p>En effet, l'interface attendue pour manipuler le plus ais\u00e9ment possible les permissions des routes d'API avec la librairie que nous utilisons est diff\u00e9rente de notre syst\u00e8me, tout en restant adaptable. (Pour plus de d\u00e9tail,  voir la doc de la lib).</p> <p>Si vous avez bien suivi ce qui a \u00e9t\u00e9 dit plus haut, vous ne devriez pas \u00eatre perdu, \u00e9tant donn\u00e9 que le syst\u00e8me de permissions de l'API utilise des noms assez similaires : <code>IsInGroup</code>, <code>IsRoot</code>, <code>IsSubscriber</code>... Vous pouvez trouver des exemples d'utilisation de ce syst\u00e8me dans cette partie.</p>"},{"location":"tutorial/structure/","title":"Structure du projet","text":""},{"location":"tutorial/structure/#la-structure-dun-projet-django","title":"La structure d'un projet Django","text":"<p>Un projet Django est structur\u00e9 en applications. Une application est un package Python  contenant un ensemble de vues, de mod\u00e8les, de templates, etc. S\u00e9mantiquement, une application repr\u00e9sente  un ensemble de fonctionnalit\u00e9s coh\u00e9rentes. Par exemple, dans notre cas, nous avons une application charg\u00e9e de la gestion des comptoirs, une autre de la gestion des clubs, une autre de la gestion du SAS, etc.</p> <p>On trouve g\u00e9n\u00e9ralement dans un projet Django une application principale qui contient les fichiers de configuration du projet,  les urls et \u00e9ventuellement des commandes d'administration.</p>"},{"location":"tutorial/structure/#arborescence-du-projet","title":"Arborescence du projet","text":"<p>Le code source du projet est organis\u00e9 comme suit :</p> <pre><code>sith/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 actions/ (1)\n\u2502   \u2514\u2500\u2500 workflows/ (2)\n\u251c\u2500\u2500 api/ (3)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 antispam/ (4)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 club/ (5)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 com/ (6)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 core/ (7)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 counter/ (8)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 docs/ (9)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 eboutic/ (10)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 election/ (11)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 forum/ (12)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 galaxy/ (13)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 locale/ (14)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 matmat/ (15)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 pedagogy/ (16)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 rootplace/ (17)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 sas/ (18)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 sith/ (19)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 subscription/ (20)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 trombi/ (21)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 antispam/ (22)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 staticfiles/ (23)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 processes/ (24)\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 .coveragerc (25)\n\u251c\u2500\u2500 .envrc (26)\n\u251c\u2500\u2500 .gitattributes\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .mailmap\n\u251c\u2500\u2500 .env (27)\n\u251c\u2500\u2500 .env.example (28)\n\u251c\u2500\u2500 manage.py (29)\n\u251c\u2500\u2500 mkdocs.yml (30)\n\u251c\u2500\u2500 uv.lock\n\u251c\u2500\u2500 pyproject.toml (31)\n\u251c\u2500\u2500 .venv/ (32)\n\u251c\u2500\u2500 .python-version (33)\n\u251c\u2500\u2500 Procfile.static (34)\n\u251c\u2500\u2500 Procfile.service (35)\n\u2514\u2500\u2500 README.md\n</code></pre> <ol> <li>Dossier contenant certaines actions r\u00e9utilisables    dans des workflows Github. Par exemple, l'action    <code>setup-project</code> installe uv puis appelle    configure l'environnement de d\u00e9veloppement</li> <li>Dossier contenant les fichiers de configuration    des workflows Github.     Par exemple, le workflow <code>docs.yml</code> compile    et publie la documentation \u00e0 chaque push sur la branche <code>master</code>.</li> <li>Application avec la configuration de l'API</li> <li>Application contenant des utilitaires pour bloquer le spam et les bots</li> <li>Application de gestion des clubs et de leurs membres.</li> <li>Application contenant les fonctionnalit\u00e9s     destin\u00e9es aux responsables communication de l'AE.</li> <li>Application contenant la mod\u00e9lisation centrale du site.    On en reparle plus loin sur cette page.</li> <li>Application de gestion des comptoirs, des permanences    sur ces comptoirs et des transactions qui y sont effectu\u00e9es.</li> <li>Dossier contenant la documentation.</li> <li>Application de gestion de la boutique en ligne.</li> <li>Application de gestion des \u00e9lections.</li> <li>Application de gestion du forum</li> <li>Application de gestion de la galaxie ; la galaxie     est un graphe des niveaux de proximit\u00e9 entre les diff\u00e9rents     \u00e9tudiants.</li> <li>Dossier contenant les fichiers de traduction.</li> <li>Fonctionnalit\u00e9s de recherche d'utilisateurs.</li> <li>Le guide des UEs du site, sur lequel les utilisateurs     peuvent \u00e9galement laisser leurs avis.</li> <li>Fonctionnalit\u00e9s utiles aux utilisateurs root.</li> <li>Le SAS, o\u00f9 l'on trouve toutes les photos de l'AE.</li> <li>Application principale du projet, contenant sa configuration. </li> <li>Gestion des cotisations des utilisateurs du site. </li> <li>Outil pour faciliter la fabrication des trombinoscopes de promo. </li> <li>Fonctionnalit\u00e9s pour g\u00e9rer le spam. </li> <li>Gestion des statics du site. Override le syst\u00e8me de statics de Django.     Ajoute l'int\u00e9gration du scss et du bundler js     de mani\u00e8re transparente pour l'utilisateur. </li> <li>Module de gestion des services externes.     Offre une API simple pour utiliser les fichiers <code>Procfile.*</code>.</li> <li>Fichier de configuration de coverage. </li> <li>Fichier de configuration de direnv. </li> <li>Contient les variables d'environnement, qui sont susceptibles     de varier d'une machine \u00e0 l'autre.</li> <li>Contient des valeurs par d\u00e9faut pour le <code>.env</code>     pouvant convenir \u00e0 un environnment de d\u00e9veloppement local</li> <li>Fichier g\u00e9n\u00e9r\u00e9 automatiquement par Django. C'est lui     qui permet d'appeler des commandes de gestion du projet     avec la syntaxe <code>python ./manage.py &lt;nom de la commande&gt;</code></li> <li>Le fichier de configuration de la documentation,     avec ses plugins et sa table des mati\u00e8res. </li> <li>Le fichier o\u00f9 sont d\u00e9clar\u00e9s les d\u00e9pendances et la configuration     de certaines d'entre elles.</li> <li>Dossier d'environnement virtuel g\u00e9n\u00e9r\u00e9 par uv</li> <li>Fichier qui contr\u00f4le quelle version de python utiliser pour le projet</li> <li>Fichier qui contr\u00f4le les commandes \u00e0 lancer pour g\u00e9rer la compilation     automatique des static et autres services n\u00e9cessaires \u00e0 la command runserver.</li> <li>Fichier qui contr\u00f4le les services tiers n\u00e9cessaires au fonctionnement     du Sith tel que redis.</li> </ol>"},{"location":"tutorial/structure/#lapplication-principale","title":"L'application principale","text":"<p>L'application principale du projet est le package <code>sith</code>. Ce package contient les fichiers de configuration du projet, la racine des urls.</p> <p>Il est organis\u00e9 comme suit :</p> <pre><code>sith/\n\u251c\u2500\u2500 settings.py (1)\n\u251c\u2500\u2500 toolbar_debug.py (2)\n\u251c\u2500\u2500 urls.py (3)\n\u2514\u2500\u2500 wsgi.py (4)\n</code></pre> <ol> <li>Fichier de configuration du projet.    Ce fichier contient les param\u00e8tres de configuration du projet.    Par exemple, il contient la liste des applications    install\u00e9es dans le projet.</li> <li>Configuration de la barre de debug.    C'est inutilis\u00e9 en prod, mais c'est tr\u00e8s pratique en d\u00e9veloppement.</li> <li>Fichier de configuration des urls du projet.</li> <li>Fichier de configuration pour le serveur WSGI.    WSGI est un protocole de communication entre le serveur    et les applications.    Ce fichier ne vous servira sans doute pas sur un environnement    de d\u00e9veloppement, mais il est n\u00e9cessaire en production.</li> </ol>"},{"location":"tutorial/structure/#les-applications","title":"Les applications","text":"<p>Les applications sont des packages Python. Dans ce projet, les applications sont g\u00e9n\u00e9ralement organis\u00e9es comme suit :</p> <pre><code>.\n\u251c\u2500\u2500 migrations/ (1)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 templates/ (2)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 static/ (3)\n\u2502   \u2514\u2500\u2500 bundled/ (4)\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 api.py (5)\n\u251c\u2500\u2500 admin.py (6)\n\u251c\u2500\u2500 models.py (7)\n\u251c\u2500\u2500 tests.py (8)\n\u251c\u2500\u2500 schemas.py (9)\n\u251c\u2500\u2500 urls.py (10)\n\u2514\u2500\u2500 views.py (11)\n</code></pre> <ol> <li>Dossier contenant les migrations de la base de donn\u00e9es.    Les migrations sont des fichiers Python qui permettent    de mettre \u00e0 jour la base de donn\u00e9es.    cf. Gestion des migrations</li> <li>Dossier contenant les templates jinja utilis\u00e9s par cette application.</li> <li>Dossier contenant les fichiers statics (js, css, scss) qui sont r\u00e9cp\u00e9r\u00e9e par Django.</li> <li>Dossier contenant du js qui sera process avec le bundler javascript. Le contenu sera automatiquement process et accessible comme si \u00e7a avait \u00e9t\u00e9 plac\u00e9 dans le dossier <code>static/bundled</code>.</li> <li>Fichier contenant les routes d'API li\u00e9es \u00e0 cette application</li> <li>Fichier de configuration de l'interface d'administration.    Ce fichier permet de d\u00e9clarer les mod\u00e8les de l'application    dans l'interface d'administration.</li> <li>Fichier contenant les mod\u00e8les de l'application.    Les mod\u00e8les sont des classes Python qui repr\u00e9sentent    les tables de la base de donn\u00e9es.</li> <li>Fichier contenant les tests de l'application.</li> <li>Sch\u00e9mas de validation de donn\u00e9es utilis\u00e9s principalement dans l'API.</li> <li>Configuration des urls de l'application.</li> <li>Fichier contenant les vues de l'application.    Dans les plus grosses applications,    ce fichier peut \u00eatre remplac\u00e9 par un package    <code>views</code> dans lequel les vues sont r\u00e9parties entre    plusieurs fichiers.</li> </ol> <p>L'organisation peut \u00e9ventuellement \u00eatre un peu diff\u00e9rente pour certaines applications, mais le principe g\u00e9n\u00e9ral est le m\u00eame.</p>"},{"location":"tutorial/api/connect/","title":"Connexion \u00e0 l'API","text":"<p>La connexion \u00e0 l'API du site AE peut se faire par deux moyens :</p> <ul> <li>par le cookie de session du site ; si vous acc\u00e9dez \u00e0 l'API depuis le sith   en \u00e9tant connect\u00e9, cette m\u00e9thode fonctionne par d\u00e9faut</li> <li>par clef d'API ; si vous acc\u00e9dez \u00e0 l'API depuis une application externe,   vous devez passer par cette m\u00e9thode.</li> </ul> <p>Comme la m\u00e9thode par cookie de session ne devrait pas \u00eatre utilis\u00e9e en dehors du cadre interne au site et qu'elle marche par d\u00e9faut dans le cadre de ce dernier, nous ne d\u00e9crirons pas outre mesure la mani\u00e8re de l'utiliser.</p>"},{"location":"tutorial/api/connect/#obtenir-une-clef-dapi","title":"Obtenir une clef d'API","text":"<p>Il n'y a, \u00e0 l'heure actuelle, pas d'interface accessible sur le site pour obtenir une clef d'API. Si vous d\u00e9sirez en obtenir une, demandez directement au respo info.</p> <p>Danger</p> <p>Votre clef d'API doit rester secr\u00e8te. Ne la transmettez \u00e0 personne, ne l'inscrivez pas en dur dans votre code.</p> <p>Si votre clef a fuit\u00e9, ou que vous soup\u00e7onnez qu'elle ait pu fuiter, informez-en imm\u00e9diatement l'\u00e9quipe informatique !</p>"},{"location":"tutorial/api/connect/#linterface-swagger","title":"L'interface Swagger","text":"<p>Avant de commencer \u00e0 utiliser l'API du site, vous pouvez explorer les diff\u00e9rentes routes qu'elle met \u00e0 disposition,  avec les sch\u00e9mas de donn\u00e9es attendus en requ\u00eate et en r\u00e9ponse.</p> <p>Pour cela, vous pouvez vous rendre sur https://ae.utbm.fr/api/docs.</p> <p>Toutes les routes, \u00e0 de rares exceptions pr\u00e8s, y sont recens\u00e9es. Vous pouvez les utiliser dans les limites  de ce \u00e0 quoi vos permissions vous donnent droit et de la m\u00e9thode d'authentification.</p> <p>Vous pouvez vous connecter directement sur l'interface Swagger, en cliquant sur ce bouton, en haut \u00e0 droite :</p> <p></p> <p>Bouton d'autorisation sur Swagger</p> <p>Puis rentrez votre clef d'API dans le champ pr\u00e9vu \u00e0 cet effet, et cliquez sur authorize :</p> <p></p> <p>Saisie de la clef d'API</p> <p>Les routes accessibles avec une clef d'API seront alors marqu\u00e9es par  une ic\u00f4ne de cadenas ferm\u00e9, sur la droite.</p> <p>Authentification et permissions</p> <p>L'ic\u00f4ne de cadenas signifie que la route accepte l'authentification bas\u00e9e sur les clefs d'API, mais pas forc\u00e9ment que vous avez les  permissions n\u00e9cessaires.</p> <p>Si une route vous renvoie une erreur 403,  r\u00e9f\u00e9rez-en \u00e0 l'\u00e9quipe info, pour qu'elle puisse vous donner les permissions n\u00e9cessaires.</p>"},{"location":"tutorial/api/connect/#utiliser-la-clef-dapi","title":"Utiliser la clef d'API","text":""},{"location":"tutorial/api/connect/#x-apikey","title":"<code>X-APIKey</code>","text":"<p>Maintenant que vous avez la clef d'API, il faut l'utiliser pour authentifier votre application lorsqu'elle effectue des requ\u00eates au site.</p> <p>Pour cela, vous devez le fournir dans vos requ\u00eates \u00e0 travers le header <code>X-APIKey</code>.</p> <p>Par exemple :</p> <pre><code>curl \"https://ae.utbm.fr/api/club/1\" \\\n  -H \"X-APIKey: &lt;votre clef d'API&gt;\"\n</code></pre> <p>Comme votre clef d'API doit rester absolument secr\u00e8te, vous ne devez en aucun cas la mettre dans votre code. \u00c0 la place, vous pouvez cr\u00e9er un fichier (par exemple, un <code>.env</code>) qui contiendra votre clef et qui sera gitignor\u00e9.</p> .env<pre><code>API_KEY=\"&lt;votre clef d'API&gt;\"\n</code></pre> <p>Vous fournirez alors la clef d'API en la chargeant depuis votre environnement. Notez que c'est une bonne pratique \u00e0 double-titre, puisque vous pouvez ainsi ais\u00e9ment changer votre clef d'API.</p>"},{"location":"tutorial/api/connect/#connexion-persistante","title":"Connexion persistante","text":"<p>La plupart des librairies permettant d'effectuer des requ\u00eates HTTP incluent une prise en charge des sessions persistantes. Nous vous recommandons fortement d'utiliser ces fonctionnalit\u00e9s, puisqu'elles permettent de rendre votre code plus simple (vous n'aurez \u00e0 renseigner votre clef d'API qu'une seule fois) et plus efficace (r\u00e9utiliser la m\u00eame connexion plut\u00f4t que d'en cr\u00e9er une nouvelle \u00e0 chaque requ\u00eate peut r\u00e9sulter en un gain de performance significatif ;  cf. HTTP persistant connection (wikipedia))</p> <p>Voici quelques exemples : </p> Python (requests)Python (aiohttp)Javascript (axios)Rust (reqwest) <p>D\u00e9pendances :</p> <ul> <li><code>requests</code> (&gt;=2.32)</li> <li><code>environs</code> (&gt;=14.1)</li> </ul> <pre><code>import requests\nfrom environs import Env\n\nenv = Env()\nenv.read_env()\n\nwith requests.Session() as session:\n    session.headers[\"X-APIKey\"] = env.str(\"API_KEY\")\n    response = session.get(\"https://ae.utbm.fr/api/club/1\")\n    print(response.json())\n</code></pre> <p>D\u00e9pendances :</p> <ul> <li><code>aiohttp</code> (&gt;=3.11)</li> <li><code>environs</code> (&gt;=14.1)</li> </ul> <pre><code>import aiohttp\nimport asyncio\nfrom environs import Env\n\nenv = Env()\nenv.read_env()\n\nasync def main():\n    async with aiohttp.ClientSession(\n        base_url=\"https://ae.utbm.fr/api/\",\n        headers={\"X-APIKey\": env.str(\"API_KEY\")}\n    ) as session:\n        async with session.get(\"club/1\") as res:\n            print(await res.json())\n\nasyncio.run(main())\n</code></pre> <p>D\u00e9pendances :</p> <ul> <li><code>axios</code> (&gt;=1.9)</li> <li><code>dotenv</code> (&gt;=16.5)</li> </ul> <pre><code>import { axios } from \"axios\";\nimport { config } from \"dotenv\";\n\nconfig();\n\nconst instance = axios.create({\n    baseUrl: \"https://ae.utbm.fr/api/\",\n    headers: { \"X-APIKey\": process.env.API_KEY }\n});\nconsole.log(await instance.get(\"club/1\").json());\n</code></pre> <p>D\u00e9pendances :</p> <ul> <li><code>reqwest</code> (&gt;= 0.12, features <code>json</code> et <code>gzip</code>)</li> <li><code>tokio</code> (&gt;= 1.44, feature <code>derive</code>)</li> <li><code>dotenvy</code> (&gt;= 0.15)</li> </ul> <pre><code>use reqwest::Client;\nuse reqwest::header::{HeaderMap, HeaderValue};\nuse dotenvy::EnvLoader;\n\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let env = EnvLoader::new().load()?;\n    let mut headers = HeaderMap::new();\n    let mut api_key = HeaderValue::from_str(env.var(\"API_KEY\")?.as_str());\n    api_key.set_sensitive(true);\n    headers.insert(\"X-APIKey\", api_key);\n    let client = Client::builder()\n        .default_headers(headers)\n        .gzip(true)\n        .build()?;\n    let resp = client\n        .get(\"https://ae.utbm.fr/api/club/1\")\n        .send()\n        .await?\n        .json()\n        .await?;\n    println!(\"{resp:#?}\");\n    Ok(())\n}\n</code></pre>"},{"location":"tutorial/api/dev/","title":"D\u00e9veloppement","text":"<p>Pour l'API, nous utilisons <code>django-ninja</code> et sa surcouche <code>django-ninja-extra</code>. Ce sont des librairies relativement simples et qui pr\u00e9sentent l'immense avantage d'offrir des m\u00e9canismes de validation et de s\u00e9rialisation de donn\u00e9es \u00e0 la fois simples et expressifs.</p>"},{"location":"tutorial/api/dev/#dossiers-et-fichiers","title":"Dossiers et fichiers","text":"<p>L'API poss\u00e8de une application (<code>api</code>)  \u00e0 la racine du projet, contenant des utilitaires  et de la configuration partag\u00e9e par toutes les autres applications. C'est la pi\u00e8ce centrale de notre API, mais ce n'est pas l\u00e0 que vous trouverez les routes de l'API.</p> <p>Les routes en elles-m\u00eames sont contenues dans les autres applications, de mani\u00e8re th\u00e9matiques : les routes li\u00e9es aux clubs sont dans <code>club</code>, les routes li\u00e9es aux photos dans <code>sas</code> et ainsi de suite.</p> <p>Les fichiers li\u00e9s \u00e0 l'API dans chaque application sont <code>schemas.py</code> et <code>api.py</code>. <code>schemas.py</code> contient les sch\u00e9mas de validation de donn\u00e9es et <code>api.py</code> contient les contr\u00f4leurs de l'API.</p>"},{"location":"tutorial/api/dev/#schema-de-donnees","title":"Sch\u00e9ma de donn\u00e9es","text":"<p>Le c\u0153ur de django-ninja \u00e9tant sa validation de donn\u00e9es gr\u00e2ce \u00e0 Pydantic, le d\u00e9veloppement de l'API commence par l'\u00e9criture de ses sch\u00e9mas de donn\u00e9es.</p> <p>Pour en comprendre le fonctionnement, veuillez consulter  la doc de django-ninja.</p> <p>Il est \u00e9galement important de consulter  la doc de pydantic.</p> <p>Notre surcouche par-dessus les sch\u00e9mas de django-ninja est relativement mince. Elle ne comprend que UploadedImage, qui h\u00e9rite de  <code>UploadedFile</code> pour le restreindre uniquement aux images.</p>"},{"location":"tutorial/api/dev/#authentification-et-permissions","title":"Authentification et permissions","text":""},{"location":"tutorial/api/dev/#authentification","title":"Authentification","text":"<p>Notre API offre deux moyens d'authentification :</p> <ul> <li>par cookie de session (la m\u00e9thode par d\u00e9faut de django)</li> <li>par clef d'API</li> </ul> <p>La plus grande partie des routes de l'API utilisent la m\u00e9thode par cookie de session.</p> <p>Pour placer une route d'API derri\u00e8re l'une de ces m\u00e9thodes (ou bien les deux), utilisez l'attribut <code>auth</code> et les classes <code>SessionAuth</code> et  <code>ApiKeyAuth</code>.</p> <p>Example</p> <pre><code>@api_controller(\"/foo\")\nclass FooController(ControllerBase):\n    # Cette route sera accessible uniquement avec l'authentification\n    # par cookie de session\n    @route.get(\"\", auth=[SessionAuth()])\n    def fetch_foo(self, club_id: int): ...\n\n    # Et celle-ci sera accessible peut importe la m\u00e9thode d'authentification\n    @route.get(\"/bar\", auth=[SessionAuth(), ApiKeyAuth()])\n    def fetch_bar(self, club_id: int): ...\n</code></pre>"},{"location":"tutorial/api/dev/#permissions","title":"Permissions","text":"<p>Si l'utilisateur est connect\u00e9, \u00e7a ne veut pas dire pour autant qu'il a acc\u00e8s \u00e0 tout. Une fois qu'il est authentifi\u00e9, il faut donc v\u00e9rifier ses permissions.</p> <p>Pour cela, nous utilisons une surcouche par-dessus <code>django-ninja</code>, le syst\u00e8me de permissions de django et notre propre syst\u00e8me. Cette derni\u00e8re est document\u00e9e ici.</p>"},{"location":"tutorial/api/dev/#limites-des-clefs-dapi","title":"Limites des clefs d'API","text":""},{"location":"tutorial/api/dev/#incompatibilite-avec-certaines-permissions","title":"Incompatibilit\u00e9 avec certaines permissions","text":"<p>Le syst\u00e8me des clefs d'API est apparu tr\u00e8s tard dans l'histoire du site (en P25, 10 ans apr\u00e8s le d\u00e9but du d\u00e9veloppement). Il s'agit ni plus ni moins qu'un syst\u00e8me d'authentification parall\u00e8le fait maison, devant interagir avec un syst\u00e8me de permissions ayant connu lui-m\u00eame une histoire assez chaotique.</p> <p>Assez logiquement, on ne peut pas tout faire :  il n'est pas possible que toutes les routes acceptent  l'authentification par clef d'API.</p> <p>Cette impossibilit\u00e9 provient majoritairement d'une incompatibilit\u00e9 entre cette m\u00e9thode d'authentification et le syst\u00e8me de permissions (qui n'a pas \u00e9t\u00e9 pr\u00e9vu pour l'impl\u00e9mentation d'un client d'API). Les principaux points de friction sont :</p> <ul> <li><code>CanView</code> et <code>CanEdit</code>, qui se basent <code>User.can_view</code> et <code>User.can_edit</code>,   qui peuvent eux-m\u00eames se baser sur les m\u00e9thodes <code>can_be_viewed_by</code>   et <code>can_be_edited_by</code> des diff\u00e9rents mod\u00e8les.   Or, ces derni\u00e8res testent sp\u00e9cifiquement la relation entre l'objet et un <code>User</code>.   Ce comportement est possiblement changeable, mais au prix d'un certain travail   et au risque de transformer encore plus notre syst\u00e8me de permissions   en usine \u00e0 gaz.</li> <li><code>IsSubscriber</code> et <code>OldSubscriber</code>, qui v\u00e9rifient qu'un utilisateur est ou   a \u00e9t\u00e9 cotisant.   Or, une clef d'API est li\u00e9e \u00e0 un client d'API, pas \u00e0 un utilisateur.   Par d\u00e9finition, un client d'API ne peut pas \u00eatre cotisant.</li> <li><code>IsLoggedInCounter</code>, qui utilise encore un autre syst\u00e8me    d'authentification maison et qui n'est pas fait pour \u00eatre utilis\u00e9 en dehors du site.</li> </ul>"},{"location":"tutorial/api/dev/#incompatibilite-avec-les-tokens-csrf","title":"Incompatibilit\u00e9 avec les tokens csrf","text":"<p>Le CSRF (cross-site request forgery) est un des multiples facteurs d'attaque sur le web. Heureusement, Django vient encore une fois \u00e0 notre aide, avec des m\u00e9canismes int\u00e9gr\u00e9s pour s'en prot\u00e9ger. Ceux-ci incluent notamment un syst\u00e8me de  token CSRF \u00e0 fournir dans les requ\u00eates POST/PUT/PATCH.</p> <p>Ceux-ci sont bien adapt\u00e9s au cycle requ\u00eates/r\u00e9ponses typique de l'exp\u00e9rience utilisateur sur un navigateur,  o\u00f9 les requ\u00eates POST sont toujours effectu\u00e9es apr\u00e8s une requ\u00eate GET au cours de laquelle on a pu r\u00e9cup\u00e9rer un token csrf. Cependant, le flux des requ\u00eates sur une API est bien diff\u00e9rent ; de ce fait, il est \u00e0 attendre que les requ\u00eates POST envoy\u00e9es \u00e0 l'API par un client externe n'aient pas de token CSRF et se retrouvent  donc bloqu\u00e9es.</p> <p>Pour ces raisons, l'acc\u00e8s aux requ\u00eates POST/PUT/PATCH de l'API par un client externe ne marche pas.</p>"},{"location":"tutorial/api/dev/#creer-un-client-et-une-clef-dapi","title":"Cr\u00e9er un client et une clef d'API","text":"<p>Le site n'a actuellement pas d'interface permettant \u00e0 ses utilisateurs de cr\u00e9er une application et des clefs d'API.</p> <p>C'est volontaire : tant que le syst\u00e8me ne sera pas suffisamment mature, toute attribution de clef d'API doit passer par le p\u00f4le info.</p> <p>Cette op\u00e9ration se fait au travers de l'interface admin.</p> <p>Pour commencer, cr\u00e9ez un client d'API, en renseignant son nom, son propri\u00e9taire (l'utilisateur qui vous a demand\u00e9 de le cr\u00e9er) et les groupes qui lui sont attribu\u00e9s. Ces groupes sont les m\u00eames que ceux qui sont attribu\u00e9s aux utilisateurs, ce qui permet de r\u00e9utiliser une partie du syst\u00e8me d'authentification.</p> <p>Warning</p> <p>N'attribuez pas les groupes \"anciens cotisants\" et \"cotisants\" aux clients d'API. Un client d'API g\u00e9r\u00e9 comme un cotisant, \u00e7a n'a aucun sens.</p> <p>Evitez \u00e9galement de donner \u00e0 des clients d'API des droits autres que ceux de lecture sur le site.</p> <p>Et surtout, n'attribuez jamais le group Root \u00e0 un client d'API.</p> <p>Une fois le client d'API cr\u00e9\u00e9, cr\u00e9ez-lui une clef d'API. Renseignez uniquement son nom et le client d'API auquel elle est li\u00e9. La valeur de cette clef d'API est automatiquement g\u00e9n\u00e9r\u00e9e et affich\u00e9e en haut de la page une fois la cr\u00e9ation compl\u00e9t\u00e9e.</p> <p>Notez bien la valeur de la clef d'API et transmettez-la \u00e0 la personne qui en a besoin. Dites-lui bien de garder cette clef en lieu s\u00fbr ! Si la clef est perdue, il n'y a pas moyen de la r\u00e9cup\u00e9rer, vous devrez en recr\u00e9er une.</p>"}]}